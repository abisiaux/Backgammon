/**
 * \file library.c
 * \brief Contient l'implémentation des fonctions pour gérer les IA et déterminer le mode de jeu
 * \author Alexandre BISIAUX et Antonin BIRET
 * \date 26 janvier 2012
 *
 */

#ifndef LIBRARY_H
	#define LIBRARY_H
	
#include<stdio.h>
#include<stdlib.h>
#include<dlfcn.h>

#include "../include/definitions.h"

SIA_Functions* Init_SAI()
{
	SIA_Functions* IA_struct;
	
	IA_struct = (SIA_Functions*)malloc(2*sizeof(SIA_Functions));
	
	int i;
	
	for(i=0; i<2; i++)
	{
		IA_struct[i].IA_Handle = NULL;
		IA_struct[i].IA_InitLibrary = NULL;
		IA_struct[i].IA_StartMatch = NULL;
		IA_struct[i].IA_EndMatch = NULL;
		IA_struct[i].IA_StartGame = NULL;
		IA_struct[i].IA_EndGame = NULL;
		IA_struct[i].IA_EndMatch = NULL;
		IA_struct[i].IA_DoubleStack = NULL;
		IA_struct[i].IA_TakeDouble = NULL;
		IA_struct[i].IA_MakeDecision = NULL;
	}
	
	return IA_struct;
}

void Free_SAI(SIA_Functions* IA_struct)
{
	if (IA_struct[0].IA_Handle != NULL) // Si la librairie a été chargée
		dlclose(IA_struct[0].IA_Handle);
		
	if (IA_struct[1].IA_Handle != NULL) // Si la librairie a été chargée
		dlclose(IA_struct[1].IA_Handle);
	
	free(IA_struct);
}

int Load_API(char* path, SIA_Functions* IA_struct, int ind)
{
	char* tmp = (char*)malloc(50*sizeof(char));
	sprintf(tmp,"../lib/%s",path);
	
	if((IA_struct[ind].IA_Handle = dlopen(tmp,RTLD_LAZY)) == NULL)
	{
		fprintf(stderr, "Erreur lors du chargement de l'API\nInformations sur l'erreur :\n%s\n\n",dlerror());
		//free(tmp);
		return 0;
	}
	//free(tmp);
	
	if ((IA_struct[ind].IA_InitLibrary = (pfInitLibrary)dlsym(IA_struct[ind].IA_Handle, "InitLibrary")) == NULL) return 0;
	if ((IA_struct[ind].IA_StartMatch = (pfStartMatch)dlsym(IA_struct[ind].IA_Handle, "StartMatch")) == NULL) return 0;
	if ((IA_struct[ind].IA_StartGame = (pfStartGame)dlsym(IA_struct[ind].IA_Handle, "StartGame")) == NULL) return 0;
	if ((IA_struct[ind].IA_EndGame = (pfEndGame)dlsym(IA_struct[ind].IA_Handle, "EndGame")) == NULL) return 0;
	if ((IA_struct[ind].IA_EndMatch = (pfEndMatch)dlsym(IA_struct[ind].IA_Handle, "EndMatch")) == NULL) return 0;
	if ((IA_struct[ind].IA_DoubleStack = (pfDoubleStack)dlsym(IA_struct[ind].IA_Handle, "DoubleStack")) == NULL) return 0;
	if ((IA_struct[ind].IA_TakeDouble = (pfTakeDouble)dlsym(IA_struct[ind].IA_Handle, "TakeDouble")) == NULL) return 0;
	if ((IA_struct[ind].IA_MakeDecision = (pfMakeDecision)dlsym(IA_struct[ind].IA_Handle, "MakeDecision")) == NULL) return 0;

    return 1;
}

EGameMode Check_Args(int argc, char** argv, SIA_Functions* IA_struct)
{

	switch(argc)
	{
		case 1 :
			return HUMAN_HUMAN;
		case 2 :
			if(Load_API(argv[1], IA_struct, 0))
				return HUMAN_IA;
			else
				return ERROR;
		case 3 :
			if(Load_API(argv[1], IA_struct, 0) && Load_API(argv[2], IA_struct, 1))
				return IA_IA;
			else
				return ERROR;
		default :
			return ERROR;
	}
}

#endif

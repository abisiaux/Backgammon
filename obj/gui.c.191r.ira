
;; Function Display_Init (Display_Init)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 28 n_edges 35 count 28 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r493: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r493,l0) best GENERAL_REGS, cover GENERAL_REGS
    r492: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r492,l0) best GENERAL_REGS, cover GENERAL_REGS
    r491: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r491,l0) best GENERAL_REGS, cover GENERAL_REGS
    r490: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r490,l0) best GENERAL_REGS, cover GENERAL_REGS
    r489: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r489,l0) best GENERAL_REGS, cover GENERAL_REGS
    r488: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r488,l0) best GENERAL_REGS, cover GENERAL_REGS
    r487: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r487,l0) best GENERAL_REGS, cover GENERAL_REGS
    r486: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a8 (r486,l0) best AREG, cover GENERAL_REGS
    r485: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r485,l0) best GENERAL_REGS, cover GENERAL_REGS
    r484: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a11 (r484,l0) best AREG, cover GENERAL_REGS
    r483: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r483,l0) best GENERAL_REGS, cover GENERAL_REGS
    r482: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r482,l0) best GENERAL_REGS, cover GENERAL_REGS
    r481: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r481,l0) best GENERAL_REGS, cover GENERAL_REGS
    r480: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r480,l0) best GENERAL_REGS, cover GENERAL_REGS
    r479: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r479,l0) best GENERAL_REGS, cover GENERAL_REGS
    r478: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a24 (r478,l0) best AREG, cover GENERAL_REGS
    r477: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a25 (r477,l0) best CREG, cover GENERAL_REGS
    r476: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a23 (r476,l0) best DIREG, cover GENERAL_REGS
    r475: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r475,l0) best GENERAL_REGS, cover GENERAL_REGS
    r474: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a22 (r474,l0) best CREG, cover GENERAL_REGS
    r473: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r473,l0) best GENERAL_REGS, cover GENERAL_REGS
    r472: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r472,l0) best GENERAL_REGS, cover GENERAL_REGS
    r471: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r471,l0) best GENERAL_REGS, cover GENERAL_REGS
    r470: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r470,l0) best GENERAL_REGS, cover GENERAL_REGS
    r469: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r469,l0) best GENERAL_REGS, cover GENERAL_REGS
    r468: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r468,l0) best GENERAL_REGS, cover GENERAL_REGS
    r467: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r467,l0) best GENERAL_REGS, cover GENERAL_REGS
    r466: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r466,l0) best GENERAL_REGS, cover GENERAL_REGS
    r465: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r465,l0) best GENERAL_REGS, cover GENERAL_REGS
    r464: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r464,l0) best GENERAL_REGS, cover GENERAL_REGS
    r463: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r463,l0) best GENERAL_REGS, cover GENERAL_REGS
    r462: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r462,l0) best GENERAL_REGS, cover GENERAL_REGS
    r461: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r461,l0) best GENERAL_REGS, cover GENERAL_REGS
    r460: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r460,l0) best GENERAL_REGS, cover GENERAL_REGS
    r459: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r459,l0) best GENERAL_REGS, cover GENERAL_REGS
    r458: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r458,l0) best GENERAL_REGS, cover GENERAL_REGS
    r457: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r457,l0) best GENERAL_REGS, cover GENERAL_REGS
    r456: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r456,l0) best GENERAL_REGS, cover GENERAL_REGS
    r455: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r455,l0) best GENERAL_REGS, cover GENERAL_REGS
    r454: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r454,l0) best GENERAL_REGS, cover GENERAL_REGS
    r453: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r453,l0) best GENERAL_REGS, cover GENERAL_REGS
    r452: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r452,l0) best GENERAL_REGS, cover GENERAL_REGS
    r451: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r451,l0) best GENERAL_REGS, cover GENERAL_REGS
    r450: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r450,l0) best GENERAL_REGS, cover GENERAL_REGS
    r449: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r449,l0) best GENERAL_REGS, cover GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a74 (r448,l0) best GENERAL_REGS, cover GENERAL_REGS
    r447: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r447,l0) best GENERAL_REGS, cover GENERAL_REGS
    r446: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r446,l0) best GENERAL_REGS, cover GENERAL_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a79 (r445,l0) best GENERAL_REGS, cover GENERAL_REGS
    r444: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r444,l0) best GENERAL_REGS, cover GENERAL_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a81 (r443,l0) best GENERAL_REGS, cover GENERAL_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a85 (r442,l0) best GENERAL_REGS, cover GENERAL_REGS
    r441: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a83 (r441,l0) best GENERAL_REGS, cover GENERAL_REGS
    r440: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a82 (r440,l0) best GENERAL_REGS, cover GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a90 (r439,l0) best GENERAL_REGS, cover GENERAL_REGS
    r438: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a89 (r438,l0) best GENERAL_REGS, cover GENERAL_REGS
    r437: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a92 (r437,l0) best GENERAL_REGS, cover GENERAL_REGS
    r436: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a95 (r436,l0) best GENERAL_REGS, cover GENERAL_REGS
    r435: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a94 (r435,l0) best GENERAL_REGS, cover GENERAL_REGS
    r434: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a93 (r434,l0) best GENERAL_REGS, cover GENERAL_REGS
    r433: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a99 (r433,l0) best GENERAL_REGS, cover GENERAL_REGS
    r432: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a97 (r432,l0) best GENERAL_REGS, cover GENERAL_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a96 (r431,l0) best GENERAL_REGS, cover GENERAL_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a101 (r430,l0) best GENERAL_REGS, cover GENERAL_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a100 (r429,l0) best GENERAL_REGS, cover GENERAL_REGS
    r428: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a103 (r428,l0) best GENERAL_REGS, cover GENERAL_REGS
    r427: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a107 (r427,l0) best GENERAL_REGS, cover GENERAL_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a105 (r426,l0) best GENERAL_REGS, cover GENERAL_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a104 (r425,l0) best GENERAL_REGS, cover GENERAL_REGS
    r424: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a112 (r424,l0) best GENERAL_REGS, cover GENERAL_REGS
    r423: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a111 (r423,l0) best GENERAL_REGS, cover GENERAL_REGS
    r422: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a114 (r422,l0) best GENERAL_REGS, cover GENERAL_REGS
    r421: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a118 (r421,l0) best GENERAL_REGS, cover GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a116 (r420,l0) best GENERAL_REGS, cover GENERAL_REGS
    r419: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a115 (r419,l0) best GENERAL_REGS, cover GENERAL_REGS
    r418: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a123 (r418,l0) best GENERAL_REGS, cover GENERAL_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a122 (r417,l0) best GENERAL_REGS, cover GENERAL_REGS
    r416: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a125 (r416,l0) best GENERAL_REGS, cover GENERAL_REGS
    r415: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a129 (r415,l0) best GENERAL_REGS, cover GENERAL_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a127 (r414,l0) best GENERAL_REGS, cover GENERAL_REGS
    r413: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a126 (r413,l0) best GENERAL_REGS, cover GENERAL_REGS
    r412: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a134 (r412,l0) best GENERAL_REGS, cover GENERAL_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a133 (r411,l0) best GENERAL_REGS, cover GENERAL_REGS
    r410: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a136 (r410,l0) best GENERAL_REGS, cover GENERAL_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a140 (r409,l0) best GENERAL_REGS, cover GENERAL_REGS
    r408: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a138 (r408,l0) best GENERAL_REGS, cover GENERAL_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a137 (r407,l0) best GENERAL_REGS, cover GENERAL_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a142 (r406,l0) best GENERAL_REGS, cover GENERAL_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a141 (r405,l0) best GENERAL_REGS, cover GENERAL_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a144 (r404,l0) best GENERAL_REGS, cover GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a145 (r403,l0) best GENERAL_REGS, cover GENERAL_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a146 (r402,l0) best GENERAL_REGS, cover GENERAL_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a147 (r401,l0) best GENERAL_REGS, cover GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a148 (r400,l0) best GENERAL_REGS, cover GENERAL_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a149 (r399,l0) best GENERAL_REGS, cover GENERAL_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a150 (r398,l0) best GENERAL_REGS, cover GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a151 (r397,l0) best GENERAL_REGS, cover GENERAL_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a152 (r396,l0) best GENERAL_REGS, cover GENERAL_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a154 (r395,l0) best GENERAL_REGS, cover GENERAL_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a153 (r394,l0) best GENERAL_REGS, cover GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a157 (r393,l0) best GENERAL_REGS, cover GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a158 (r392,l0) best GENERAL_REGS, cover GENERAL_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a159 (r391,l0) best GENERAL_REGS, cover GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a161 (r390,l0) best GENERAL_REGS, cover GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a163 (r389,l0) best GENERAL_REGS, cover GENERAL_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a164 (r388,l0) best GENERAL_REGS, cover GENERAL_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a167 (r387,l0) best GENERAL_REGS, cover GENERAL_REGS
    r386: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a168 (r386,l0) best AREG, cover GENERAL_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a169 (r385,l0) best GENERAL_REGS, cover GENERAL_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a171 (r384,l0) best GENERAL_REGS, cover GENERAL_REGS
    r383: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a173 (r383,l0) best Q_REGS, cover GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a175 (r382,l0) best GENERAL_REGS, cover GENERAL_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a176 (r381,l0) best GENERAL_REGS, cover GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a177 (r380,l0) best GENERAL_REGS, cover GENERAL_REGS
    r379: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a182 (r379,l0) best AREG, cover GENERAL_REGS
    r378: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a183 (r378,l0) best CREG, cover GENERAL_REGS
    r377: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a181 (r377,l0) best DIREG, cover GENERAL_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a179 (r376,l0) best GENERAL_REGS, cover GENERAL_REGS
    r375: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a180 (r375,l0) best CREG, cover GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a184 (r374,l0) best GENERAL_REGS, cover GENERAL_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a185 (r373,l0) best GENERAL_REGS, cover GENERAL_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a188 (r372,l0) best GENERAL_REGS, cover GENERAL_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a189 (r371,l0) best GENERAL_REGS, cover GENERAL_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a191 (r370,l0) best GENERAL_REGS, cover GENERAL_REGS
    r369: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a193 (r369,l0) best Q_REGS, cover GENERAL_REGS
    r368: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a195 (r368,l0) best GENERAL_REGS, cover GENERAL_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a196 (r367,l0) best GENERAL_REGS, cover GENERAL_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a197 (r366,l0) best GENERAL_REGS, cover GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a198 (r365,l0) best GENERAL_REGS, cover GENERAL_REGS
    r364: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a203 (r364,l0) best AREG, cover GENERAL_REGS
    r363: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a204 (r363,l0) best CREG, cover GENERAL_REGS
    r362: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a202 (r362,l0) best DIREG, cover GENERAL_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a200 (r361,l0) best GENERAL_REGS, cover GENERAL_REGS
    r360: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a201 (r360,l0) best CREG, cover GENERAL_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a205 (r359,l0) best GENERAL_REGS, cover GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a206 (r358,l0) best GENERAL_REGS, cover GENERAL_REGS
    r357: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a209 (r357,l0) best GENERAL_REGS, cover GENERAL_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a210 (r356,l0) best GENERAL_REGS, cover GENERAL_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a212 (r355,l0) best GENERAL_REGS, cover GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a214 (r354,l0) best GENERAL_REGS, cover GENERAL_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a216 (r353,l0) best GENERAL_REGS, cover GENERAL_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a217 (r352,l0) best GENERAL_REGS, cover GENERAL_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a218 (r351,l0) best GENERAL_REGS, cover GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a219 (r350,l0) best GENERAL_REGS, cover GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a220 (r349,l0) best GENERAL_REGS, cover GENERAL_REGS
    r348: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a225 (r348,l0) best AREG, cover GENERAL_REGS
    r347: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a226 (r347,l0) best CREG, cover GENERAL_REGS
    r346: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a224 (r346,l0) best DIREG, cover GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a222 (r345,l0) best GENERAL_REGS, cover GENERAL_REGS
    r344: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a223 (r344,l0) best CREG, cover GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a227 (r343,l0) best GENERAL_REGS, cover GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a228 (r342,l0) best GENERAL_REGS, cover GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a231 (r341,l0) best GENERAL_REGS, cover GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a232 (r340,l0) best GENERAL_REGS, cover GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a234 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    r338: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a236 (r338,l0) best Q_REGS, cover GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a238 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a239 (r336,l0) best GENERAL_REGS, cover GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a240 (r335,l0) best GENERAL_REGS, cover GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a241 (r334,l0) best GENERAL_REGS, cover GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a242 (r333,l0) best GENERAL_REGS, cover GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a243 (r332,l0) best GENERAL_REGS, cover GENERAL_REGS
    r331: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a248 (r331,l0) best AREG, cover GENERAL_REGS
    r330: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a249 (r330,l0) best CREG, cover GENERAL_REGS
    r329: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a247 (r329,l0) best DIREG, cover GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a245 (r328,l0) best GENERAL_REGS, cover GENERAL_REGS
    r327: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a246 (r327,l0) best CREG, cover GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a250 (r326,l0) best GENERAL_REGS, cover GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a251 (r325,l0) best GENERAL_REGS, cover GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a254 (r324,l0) best GENERAL_REGS, cover GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a255 (r323,l0) best GENERAL_REGS, cover GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a257 (r322,l0) best GENERAL_REGS, cover GENERAL_REGS
    r321: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a259 (r321,l0) best Q_REGS, cover GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a261 (r320,l0) best GENERAL_REGS, cover GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a262 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a263 (r318,l0) best GENERAL_REGS, cover GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a264 (r317,l0) best GENERAL_REGS, cover GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a265 (r316,l0) best GENERAL_REGS, cover GENERAL_REGS
    r315: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a270 (r315,l0) best AREG, cover GENERAL_REGS
    r314: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a271 (r314,l0) best CREG, cover GENERAL_REGS
    r313: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a269 (r313,l0) best DIREG, cover GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a267 (r312,l0) best GENERAL_REGS, cover GENERAL_REGS
    r311: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a268 (r311,l0) best CREG, cover GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a272 (r310,l0) best GENERAL_REGS, cover GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a273 (r309,l0) best GENERAL_REGS, cover GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a276 (r308,l0) best GENERAL_REGS, cover GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a277 (r307,l0) best GENERAL_REGS, cover GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a279 (r306,l0) best GENERAL_REGS, cover GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a281 (r305,l0) best GENERAL_REGS, cover GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a283 (r304,l0) best GENERAL_REGS, cover GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a284 (r303,l0) best GENERAL_REGS, cover GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a285 (r302,l0) best GENERAL_REGS, cover GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a286 (r301,l0) best GENERAL_REGS, cover GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a287 (r300,l0) best GENERAL_REGS, cover GENERAL_REGS
    r299: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a292 (r299,l0) best AREG, cover GENERAL_REGS
    r298: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a293 (r298,l0) best CREG, cover GENERAL_REGS
    r297: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a291 (r297,l0) best DIREG, cover GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a289 (r296,l0) best GENERAL_REGS, cover GENERAL_REGS
    r295: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a290 (r295,l0) best CREG, cover GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a294 (r294,l0) best GENERAL_REGS, cover GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a295 (r293,l0) best GENERAL_REGS, cover GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a298 (r292,l0) best GENERAL_REGS, cover GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a299 (r291,l0) best GENERAL_REGS, cover GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a301 (r290,l0) best GENERAL_REGS, cover GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a303 (r289,l0) best GENERAL_REGS, cover GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a305 (r288,l0) best GENERAL_REGS, cover GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a306 (r287,l0) best GENERAL_REGS, cover GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a307 (r286,l0) best GENERAL_REGS, cover GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a308 (r285,l0) best GENERAL_REGS, cover GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a309 (r284,l0) best GENERAL_REGS, cover GENERAL_REGS
    r283: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a314 (r283,l0) best AREG, cover GENERAL_REGS
    r282: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a315 (r282,l0) best CREG, cover GENERAL_REGS
    r281: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a313 (r281,l0) best DIREG, cover GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a311 (r280,l0) best GENERAL_REGS, cover GENERAL_REGS
    r279: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a312 (r279,l0) best CREG, cover GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a316 (r278,l0) best GENERAL_REGS, cover GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a317 (r277,l0) best GENERAL_REGS, cover GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a320 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a321 (r275,l0) best GENERAL_REGS, cover GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a323 (r274,l0) best GENERAL_REGS, cover GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a325 (r273,l0) best GENERAL_REGS, cover GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a327 (r272,l0) best GENERAL_REGS, cover GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a328 (r271,l0) best GENERAL_REGS, cover GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a329 (r270,l0) best GENERAL_REGS, cover GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a330 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    r268: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a335 (r268,l0) best AREG, cover GENERAL_REGS
    r267: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a336 (r267,l0) best CREG, cover GENERAL_REGS
    r266: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a334 (r266,l0) best DIREG, cover GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a332 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    r264: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a333 (r264,l0) best CREG, cover GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a337 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a338 (r262,l0) best GENERAL_REGS, cover GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a341 (r261,l0) best GENERAL_REGS, cover GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a342 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a344 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a346 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a348 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a349 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a350 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a351 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    r253: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a356 (r253,l0) best AREG, cover GENERAL_REGS
    r252: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a357 (r252,l0) best CREG, cover GENERAL_REGS
    r251: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a355 (r251,l0) best DIREG, cover GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a353 (r250,l0) best GENERAL_REGS, cover GENERAL_REGS
    r249: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a354 (r249,l0) best CREG, cover GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a358 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a359 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a362 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a363 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a364 (r244,l0) best GENERAL_REGS, cover GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a365 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a367 (r242,l0) best GENERAL_REGS, cover GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a369 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a371 (r240,l0) best GENERAL_REGS, cover GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a372 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a373 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    r237: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a378 (r237,l0) best AREG, cover GENERAL_REGS
    r236: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a379 (r236,l0) best CREG, cover GENERAL_REGS
    r235: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a377 (r235,l0) best DIREG, cover GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a375 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    r233: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a376 (r233,l0) best CREG, cover GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a380 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a381 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a384 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a385 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a386 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a387 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a389 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    r225: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a391 (r225,l0) best Q_REGS, cover GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a393 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a394 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a395 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a396 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    r220: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a401 (r220,l0) best AREG, cover GENERAL_REGS
    r219: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a402 (r219,l0) best CREG, cover GENERAL_REGS
    r218: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a400 (r218,l0) best DIREG, cover GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a398 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    r216: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a399 (r216,l0) best CREG, cover GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a403 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a404 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a407 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a409 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    r211: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a411 (r211,l0) best Q_REGS, cover GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a413 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a414 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    r208: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a419 (r208,l0) best AREG, cover GENERAL_REGS
    r207: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a420 (r207,l0) best CREG, cover GENERAL_REGS
    r206: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a418 (r206,l0) best DIREG, cover GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a416 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    r204: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a417 (r204,l0) best CREG, cover GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a421 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a422 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a425 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    r200: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a426 (r200,l0) best AREG, cover GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a427 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a428 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a429 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a430 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    r193: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a13 (r193,l0) best AREG, cover GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    r184: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a35 (r184,l0) best AREG, cover GENERAL_REGS
    r183: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a37 (r183,l0) best AREG, cover GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    r179: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a42 (r179,l0) best AREG, cover GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    r177: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a47 (r177,l0) best AREG, cover GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a69 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a73 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a80 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a84 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a86 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a87 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a88 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a91 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a98 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a102 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a106 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a108 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a109 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a110 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a113 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a117 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a119 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a120 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a121 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a124 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a128 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a130 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a131 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a132 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a135 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a139 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a143 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    r140: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a155 (r140,l0) best AREG, cover GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a156 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a160 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a162 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a165 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a166 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    r134: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a170 (r134,l0) best AREG, cover GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a172 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a178 (r132,l0) best GENERAL_REGS, cover GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a174 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a186 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a187 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a190 (r128,l0) best AREG, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a192 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a199 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a194 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a207 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a208 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a211 (r122,l0) best AREG, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a213 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a221 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a215 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a229 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a230 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a233 (r116,l0) best AREG, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a235 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a244 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a237 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a252 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a253 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a256 (r110,l0) best AREG, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a258 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a266 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a260 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a274 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a275 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a278 (r104,l0) best AREG, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a280 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a288 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a282 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a296 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a297 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a300 (r98,l0) best AREG, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a302 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a310 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a304 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a318 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a319 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a322 (r92,l0) best AREG, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a324 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a331 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a326 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a339 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a340 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a343 (r86,l0) best AREG, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a345 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a352 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a347 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a360 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a361 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a366 (r80,l0) best AREG, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a368 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a374 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a370 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a382 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a383 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a388 (r74,l0) best AREG, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a390 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a397 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a392 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a405 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a406 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a408 (r68,l0) best AREG, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a410 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a415 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a412 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a423 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a424 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a431 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a432 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a433 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a434 (r59,l0) best AREG, cover GENERAL_REGS

  a0(r493,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r492,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r491,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r490,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r489,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r488,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r487,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r195,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r486,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r485,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r194,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r484,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a12(r483,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r193,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r482,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r192,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a16(r481,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r190,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a18(r480,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r479,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r191,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a21(r475,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a22(r474,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a23(r476,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a24(r478,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a25(r477,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a26(r473,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r472,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r189,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r188,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a30(r471,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r470,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r469,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r187,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r185,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r184,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r186,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a37(r183,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a38(r468,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a39(r467,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a40(r182,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r180,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r179,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r181,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a44(r178,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a45(r466,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a46(r465,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r177,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a48(r176,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a49(r175,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r464,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r463,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r462,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a53(r461,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a54(r460,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a55(r459,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a56(r458,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a57(r457,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a58(r456,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a59(r455,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a60(r452,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a61(r453,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a62(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a63(r454,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a64(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a65(r172,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a66(r171,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a67(r450,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a68(r451,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a69(r170,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a70(r449,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a71(r446,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a72(r447,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a73(r169,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a74(r448,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a75(r168,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a76(r167,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a77(r166,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a78(r444,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a79(r445,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a80(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a81(r443,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a82(r440,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a83(r441,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a84(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a85(r442,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a86(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a87(r162,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a88(r161,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a89(r438,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a90(r439,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a91(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a92(r437,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a93(r434,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a94(r435,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a95(r436,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a96(r431,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a97(r432,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a98(r159,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a99(r433,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a100(r429,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a101(r430,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a102(r158,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a103(r428,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a104(r425,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a105(r426,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a106(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a107(r427,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a108(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a109(r155,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a110(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a111(r423,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a112(r424,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a113(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a114(r422,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a115(r419,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a116(r420,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a117(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a118(r421,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a119(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a120(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a121(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a122(r417,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a123(r418,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a124(r148,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a125(r416,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a126(r413,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a127(r414,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a128(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a129(r415,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a130(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a131(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a132(r144,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a133(r411,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a134(r412,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a135(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a136(r410,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a137(r407,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a138(r408,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a139(r142,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a140(r409,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a141(r405,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a142(r406,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a143(r141,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a144(r404,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a145(r403,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a146(r402,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a147(r401,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a148(r400,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a149(r399,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a150(r398,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a151(r397,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a152(r396,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a153(r394,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a154(r395,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a155(r140,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a156(r139,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a157(r393,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a158(r392,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a159(r391,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a160(r138,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a161(r390,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a162(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a163(r389,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a164(r388,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a165(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a166(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a167(r387,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a168(r386,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a169(r385,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a170(r134,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a171(r384,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a172(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a173(r383,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a174(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a175(r382,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a176(r381,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a177(r380,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a178(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a179(r376,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a180(r375,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a181(r377,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a182(r379,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a183(r378,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a184(r374,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a185(r373,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a186(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a187(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a188(r372,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a189(r371,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a190(r128,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a191(r370,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a192(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a193(r369,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a194(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a195(r368,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a196(r367,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a197(r366,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a198(r365,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a199(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a200(r361,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a201(r360,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a202(r362,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a203(r364,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a204(r363,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a205(r359,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a206(r358,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a207(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a208(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a209(r357,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a210(r356,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a211(r122,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a212(r355,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a213(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a214(r354,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a215(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a216(r353,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a217(r352,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a218(r351,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a219(r350,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a220(r349,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a221(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a222(r345,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a223(r344,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a224(r346,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a225(r348,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a226(r347,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a227(r343,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a228(r342,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a229(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a230(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a231(r341,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a232(r340,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a233(r116,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a234(r339,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a235(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:32
  a236(r338,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a237(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:32
  a238(r337,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a239(r336,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a240(r335,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a241(r334,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a242(r333,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a243(r332,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a244(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a245(r328,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a246(r327,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a247(r329,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a248(r331,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a249(r330,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a250(r326,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a251(r325,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a252(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a253(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a254(r324,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a255(r323,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a256(r110,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a257(r322,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a258(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a259(r321,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a260(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a261(r320,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a262(r319,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a263(r318,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a264(r317,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a265(r316,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a266(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a267(r312,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a268(r311,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a269(r313,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a270(r315,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a271(r314,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a272(r310,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a273(r309,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a274(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a275(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a276(r308,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a277(r307,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a278(r104,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a279(r306,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a280(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a281(r305,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a282(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a283(r304,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a284(r303,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a285(r302,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a286(r301,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a287(r300,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a288(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a289(r296,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a290(r295,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a291(r297,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a292(r299,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a293(r298,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a294(r294,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a295(r293,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a296(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a297(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a298(r292,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a299(r291,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a300(r98,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a301(r290,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a302(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a303(r289,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a304(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:28
  a305(r288,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a306(r287,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a307(r286,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a308(r285,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a309(r284,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a310(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a311(r280,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a312(r279,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a313(r281,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a314(r283,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a315(r282,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a316(r278,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a317(r277,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a318(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a319(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a320(r276,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a321(r275,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a322(r92,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a323(r274,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a324(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a325(r273,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a326(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a327(r272,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a328(r271,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a329(r270,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a330(r269,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a331(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a332(r265,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a333(r264,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a334(r266,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a335(r268,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a336(r267,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a337(r263,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a338(r262,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a339(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a340(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a341(r261,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a342(r260,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a343(r86,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a344(r259,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a345(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a346(r258,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a347(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a348(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a349(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a350(r255,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a351(r254,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a352(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a353(r250,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a354(r249,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a355(r251,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a356(r253,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a357(r252,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a358(r248,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a359(r247,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a360(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a361(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a362(r246,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a363(r245,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a364(r244,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a365(r243,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a366(r80,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a367(r242,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a368(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a369(r241,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a370(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a371(r240,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a372(r239,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a373(r238,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a374(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a375(r234,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a376(r233,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a377(r235,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a378(r237,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a379(r236,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a380(r232,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a381(r231,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a382(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a383(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a384(r230,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a385(r229,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a386(r228,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a387(r227,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a388(r74,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a389(r226,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a390(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a391(r225,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a392(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a393(r224,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a394(r223,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a395(r222,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a396(r221,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a397(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a398(r217,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a399(r216,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a400(r218,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a401(r220,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a402(r219,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a403(r215,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a404(r214,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a405(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a406(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a407(r213,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a408(r68,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a409(r212,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a410(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a411(r211,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a412(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a413(r210,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a414(r209,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a415(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a416(r205,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a417(r204,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a418(r206,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a419(r208,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a420(r207,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a421(r203,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a422(r202,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a423(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a424(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a425(r201,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a426(r200,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a427(r199,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a428(r198,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a429(r197,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a430(r196,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a431(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a432(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a433(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a434(r59,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7

   Insn 778(l0): point = 0
   Insn 777(l0): point = 2
   Insn 776(l0): point = 4
   Insn 775(l0): point = 6
   Insn 774(l0): point = 8
   Insn 773(l0): point = 10
   Insn 772(l0): point = 12
   Insn 771(l0): point = 14
   Insn 770(l0): point = 16
   Insn 769(l0): point = 18
   Insn 768(l0): point = 20
   Insn 767(l0): point = 22
   Insn 766(l0): point = 24
   Insn 765(l0): point = 26
   Insn 764(l0): point = 28
   Insn 763(l0): point = 30
   Insn 762(l0): point = 32
   Insn 761(l0): point = 34
   Insn 760(l0): point = 36
   Insn 759(l0): point = 38
   Insn 758(l0): point = 40
   Insn 757(l0): point = 42
   Insn 756(l0): point = 44
   Insn 755(l0): point = 46
   Insn 754(l0): point = 48
   Insn 753(l0): point = 50
   Insn 752(l0): point = 52
   Insn 751(l0): point = 54
   Insn 750(l0): point = 56
   Insn 749(l0): point = 58
   Insn 748(l0): point = 60
   Insn 747(l0): point = 62
   Insn 746(l0): point = 64
   Insn 745(l0): point = 66
   Insn 744(l0): point = 68
   Insn 743(l0): point = 70
   Insn 742(l0): point = 72
   Insn 741(l0): point = 74
   Insn 740(l0): point = 76
   Insn 739(l0): point = 78
   Insn 737(l0): point = 80
   Insn 736(l0): point = 82
   Insn 735(l0): point = 84
   Insn 734(l0): point = 86
   Insn 733(l0): point = 88
   Insn 732(l0): point = 90
   Insn 738(l0): point = 92
   Insn 731(l0): point = 94
   Insn 730(l0): point = 96
   Insn 729(l0): point = 98
   Insn 728(l0): point = 100
   Insn 727(l0): point = 102
   Insn 726(l0): point = 104
   Insn 725(l0): point = 106
   Insn 724(l0): point = 108
   Insn 720(l0): point = 111
   Insn 719(l0): point = 113
   Insn 718(l0): point = 115
   Insn 717(l0): point = 117
   Insn 716(l0): point = 119
   Insn 715(l0): point = 121
   Insn 714(l0): point = 123
   Insn 713(l0): point = 125
   Insn 712(l0): point = 127
   Insn 711(l0): point = 129
   Insn 710(l0): point = 131
   Insn 709(l0): point = 133
   Insn 708(l0): point = 135
   Insn 707(l0): point = 137
   Insn 706(l0): point = 139
   Insn 705(l0): point = 141
   Insn 704(l0): point = 143
   Insn 702(l0): point = 146
   Insn 701(l0): point = 148
   Insn 700(l0): point = 150
   Insn 699(l0): point = 152
   Insn 698(l0): point = 154
   Insn 697(l0): point = 156
   Insn 696(l0): point = 158
   Insn 692(l0): point = 161
   Insn 691(l0): point = 163
   Insn 690(l0): point = 165
   Insn 689(l0): point = 167
   Insn 688(l0): point = 169
   Insn 687(l0): point = 171
   Insn 686(l0): point = 173
   Insn 685(l0): point = 175
   Insn 684(l0): point = 177
   Insn 683(l0): point = 179
   Insn 682(l0): point = 181
   Insn 681(l0): point = 183
   Insn 680(l0): point = 185
   Insn 679(l0): point = 187
   Insn 678(l0): point = 189
   Insn 677(l0): point = 191
   Insn 676(l0): point = 193
   Insn 674(l0): point = 196
   Insn 673(l0): point = 198
   Insn 672(l0): point = 200
   Insn 671(l0): point = 202
   Insn 670(l0): point = 204
   Insn 669(l0): point = 206
   Insn 668(l0): point = 208
   Insn 667(l0): point = 210
   Insn 666(l0): point = 212
   Insn 665(l0): point = 214
   Insn 664(l0): point = 216
   Insn 663(l0): point = 218
   Insn 662(l0): point = 220
   Insn 661(l0): point = 222
   Insn 660(l0): point = 224
   Insn 659(l0): point = 226
   Insn 658(l0): point = 228
   Insn 657(l0): point = 230
   Insn 656(l0): point = 232
   Insn 655(l0): point = 234
   Insn 654(l0): point = 236
   Insn 653(l0): point = 238
   Insn 652(l0): point = 240
   Insn 651(l0): point = 242
   Insn 650(l0): point = 244
   Insn 649(l0): point = 246
   Insn 648(l0): point = 248
   Insn 647(l0): point = 250
   Insn 646(l0): point = 252
   Insn 645(l0): point = 254
   Insn 644(l0): point = 256
   Insn 643(l0): point = 258
   Insn 641(l0): point = 261
   Insn 640(l0): point = 263
   Insn 636(l0): point = 266
   Insn 633(l0): point = 269
   Insn 632(l0): point = 271
   Insn 631(l0): point = 273
   Insn 630(l0): point = 275
   Insn 629(l0): point = 277
   Insn 628(l0): point = 279
   Insn 627(l0): point = 281
   Insn 626(l0): point = 283
   Insn 625(l0): point = 285
   Insn 624(l0): point = 287
   Insn 623(l0): point = 289
   Insn 622(l0): point = 291
   Insn 795(l0): point = 294
   Insn 617(l0): point = 296
   Insn 616(l0): point = 298
   Insn 615(l0): point = 300
   Insn 614(l0): point = 302
   Insn 613(l0): point = 304
   Insn 612(l0): point = 306
   Insn 611(l0): point = 308
   Insn 610(l0): point = 310
   Insn 609(l0): point = 312
   Insn 608(l0): point = 314
   Insn 607(l0): point = 316
   Insn 606(l0): point = 318
   Insn 604(l0): point = 321
   Insn 603(l0): point = 323
   Insn 793(l0): point = 326
   Insn 598(l0): point = 328
   Insn 597(l0): point = 330
   Insn 596(l0): point = 332
   Insn 595(l0): point = 334
   Insn 594(l0): point = 336
   Insn 593(l0): point = 338
   Insn 592(l0): point = 340
   Insn 591(l0): point = 342
   Insn 590(l0): point = 344
   Insn 589(l0): point = 346
   Insn 588(l0): point = 348
   Insn 587(l0): point = 350
   Insn 585(l0): point = 353
   Insn 584(l0): point = 355
   Insn 791(l0): point = 358
   Insn 579(l0): point = 360
   Insn 578(l0): point = 362
   Insn 577(l0): point = 364
   Insn 576(l0): point = 366
   Insn 575(l0): point = 368
   Insn 574(l0): point = 370
   Insn 573(l0): point = 372
   Insn 572(l0): point = 374
   Insn 571(l0): point = 376
   Insn 570(l0): point = 378
   Insn 569(l0): point = 380
   Insn 568(l0): point = 382
   Insn 567(l0): point = 384
   Insn 565(l0): point = 387
   Insn 564(l0): point = 389
   Insn 789(l0): point = 392
   Insn 559(l0): point = 394
   Insn 558(l0): point = 396
   Insn 557(l0): point = 398
   Insn 556(l0): point = 400
   Insn 555(l0): point = 402
   Insn 554(l0): point = 404
   Insn 553(l0): point = 406
   Insn 552(l0): point = 408
   Insn 551(l0): point = 410
   Insn 550(l0): point = 412
   Insn 549(l0): point = 414
   Insn 548(l0): point = 416
   Insn 546(l0): point = 419
   Insn 545(l0): point = 421
   Insn 787(l0): point = 424
   Insn 540(l0): point = 426
   Insn 539(l0): point = 428
   Insn 538(l0): point = 430
   Insn 537(l0): point = 432
   Insn 536(l0): point = 434
   Insn 535(l0): point = 436
   Insn 534(l0): point = 438
   Insn 533(l0): point = 440
   Insn 532(l0): point = 442
   Insn 531(l0): point = 444
   Insn 530(l0): point = 446
   Insn 529(l0): point = 448
   Insn 527(l0): point = 451
   Insn 526(l0): point = 453
   Insn 785(l0): point = 456
   Insn 521(l0): point = 458
   Insn 520(l0): point = 460
   Insn 519(l0): point = 462
   Insn 518(l0): point = 464
   Insn 517(l0): point = 466
   Insn 516(l0): point = 468
   Insn 515(l0): point = 470
   Insn 514(l0): point = 472
   Insn 513(l0): point = 474
   Insn 512(l0): point = 476
   Insn 511(l0): point = 478
   Insn 510(l0): point = 480
   Insn 508(l0): point = 483
   Insn 507(l0): point = 485
   Insn 506(l0): point = 487
   Insn 505(l0): point = 489
   Insn 504(l0): point = 491
   Insn 503(l0): point = 493
   Insn 502(l0): point = 495
   Insn 501(l0): point = 497
   Insn 500(l0): point = 499
   Insn 499(l0): point = 501
   Insn 498(l0): point = 503
   Insn 783(l0): point = 506
   Insn 494(l0): point = 508
   Insn 493(l0): point = 510
   Insn 492(l0): point = 512
   Insn 491(l0): point = 514
   Insn 490(l0): point = 516
   Insn 489(l0): point = 518
   Insn 488(l0): point = 520
   Insn 487(l0): point = 522
   Insn 486(l0): point = 524
   Insn 485(l0): point = 526
   Insn 484(l0): point = 528
   Insn 483(l0): point = 530
   Insn 482(l0): point = 532
   Insn 481(l0): point = 534
   Insn 480(l0): point = 536
   Insn 479(l0): point = 538
   Insn 478(l0): point = 540
   Insn 476(l0): point = 543
   Insn 475(l0): point = 545
   Insn 471(l0): point = 548
   Insn 470(l0): point = 550
   Insn 469(l0): point = 552
   Insn 468(l0): point = 554
   Insn 467(l0): point = 556
   Insn 466(l0): point = 558
   Insn 465(l0): point = 560
   Insn 464(l0): point = 562
   Insn 463(l0): point = 564
   Insn 462(l0): point = 566
   Insn 461(l0): point = 568
   Insn 460(l0): point = 570
   Insn 459(l0): point = 572
   Insn 458(l0): point = 574
   Insn 457(l0): point = 576
   Insn 456(l0): point = 578
   Insn 455(l0): point = 580
   Insn 454(l0): point = 582
   Insn 453(l0): point = 584
   Insn 452(l0): point = 586
   Insn 451(l0): point = 588
   Insn 450(l0): point = 590
   Insn 449(l0): point = 592
   Insn 448(l0): point = 594
   Insn 447(l0): point = 596
   Insn 446(l0): point = 598
   Insn 445(l0): point = 600
   Insn 444(l0): point = 602
   Insn 443(l0): point = 604
   Insn 781(l0): point = 607
   Insn 439(l0): point = 609
   Insn 438(l0): point = 611
   Insn 437(l0): point = 613
   Insn 436(l0): point = 615
   Insn 435(l0): point = 617
   Insn 434(l0): point = 619
   Insn 433(l0): point = 621
   Insn 432(l0): point = 623
   Insn 431(l0): point = 625
   Insn 430(l0): point = 627
   Insn 429(l0): point = 629
   Insn 428(l0): point = 631
   Insn 427(l0): point = 633
   Insn 426(l0): point = 635
   Insn 425(l0): point = 637
   Insn 424(l0): point = 639
   Insn 423(l0): point = 641
   Insn 422(l0): point = 643
   Insn 421(l0): point = 645
   Insn 420(l0): point = 647
   Insn 418(l0): point = 649
   Insn 417(l0): point = 651
   Insn 416(l0): point = 653
   Insn 415(l0): point = 655
   Insn 414(l0): point = 657
   Insn 413(l0): point = 659
   Insn 419(l0): point = 661
   Insn 412(l0): point = 663
   Insn 411(l0): point = 665
   Insn 410(l0): point = 667
   Insn 409(l0): point = 669
   Insn 408(l0): point = 671
   Insn 407(l0): point = 673
   Insn 406(l0): point = 675
   Insn 405(l0): point = 677
   Insn 404(l0): point = 679
   Insn 403(l0): point = 681
   Insn 402(l0): point = 683
   Insn 401(l0): point = 685
   Insn 400(l0): point = 687
   Insn 399(l0): point = 689
   Insn 398(l0): point = 691
   Insn 397(l0): point = 693
   Insn 396(l0): point = 695
   Insn 395(l0): point = 697
   Insn 394(l0): point = 699
   Insn 393(l0): point = 701
   Insn 392(l0): point = 703
   Insn 391(l0): point = 705
   Insn 390(l0): point = 707
   Insn 389(l0): point = 709
   Insn 388(l0): point = 711
   Insn 386(l0): point = 713
   Insn 385(l0): point = 715
   Insn 384(l0): point = 717
   Insn 383(l0): point = 719
   Insn 382(l0): point = 721
   Insn 381(l0): point = 723
   Insn 387(l0): point = 725
   Insn 380(l0): point = 727
   Insn 379(l0): point = 729
   Insn 378(l0): point = 731
   Insn 377(l0): point = 733
   Insn 376(l0): point = 735
   Insn 375(l0): point = 737
   Insn 374(l0): point = 739
   Insn 373(l0): point = 741
   Insn 372(l0): point = 743
   Insn 371(l0): point = 745
   Insn 370(l0): point = 747
   Insn 369(l0): point = 749
   Insn 368(l0): point = 751
   Insn 367(l0): point = 753
   Insn 366(l0): point = 755
   Insn 365(l0): point = 757
   Insn 364(l0): point = 759
   Insn 363(l0): point = 761
   Insn 362(l0): point = 763
   Insn 361(l0): point = 765
   Insn 360(l0): point = 767
   Insn 359(l0): point = 769
   Insn 358(l0): point = 771
   Insn 357(l0): point = 773
   Insn 356(l0): point = 775
   Insn 355(l0): point = 777
   Insn 354(l0): point = 779
   Insn 352(l0): point = 781
   Insn 351(l0): point = 783
   Insn 350(l0): point = 785
   Insn 349(l0): point = 787
   Insn 348(l0): point = 789
   Insn 347(l0): point = 791
   Insn 353(l0): point = 793
   Insn 346(l0): point = 795
   Insn 345(l0): point = 797
   Insn 344(l0): point = 799
   Insn 343(l0): point = 801
   Insn 342(l0): point = 803
   Insn 341(l0): point = 805
   Insn 340(l0): point = 807
   Insn 339(l0): point = 809
   Insn 338(l0): point = 811
   Insn 337(l0): point = 813
   Insn 336(l0): point = 815
   Insn 335(l0): point = 817
   Insn 334(l0): point = 819
   Insn 333(l0): point = 821
   Insn 332(l0): point = 823
   Insn 331(l0): point = 825
   Insn 330(l0): point = 827
   Insn 329(l0): point = 829
   Insn 328(l0): point = 831
   Insn 327(l0): point = 833
   Insn 326(l0): point = 835
   Insn 325(l0): point = 837
   Insn 324(l0): point = 839
   Insn 323(l0): point = 841
   Insn 322(l0): point = 843
   Insn 321(l0): point = 845
   Insn 320(l0): point = 847
   Insn 319(l0): point = 849
   Insn 318(l0): point = 851
   Insn 316(l0): point = 853
   Insn 315(l0): point = 855
   Insn 314(l0): point = 857
   Insn 313(l0): point = 859
   Insn 312(l0): point = 861
   Insn 311(l0): point = 863
   Insn 317(l0): point = 865
   Insn 310(l0): point = 867
   Insn 309(l0): point = 869
   Insn 308(l0): point = 871
   Insn 307(l0): point = 873
   Insn 306(l0): point = 875
   Insn 305(l0): point = 877
   Insn 304(l0): point = 879
   Insn 303(l0): point = 881
   Insn 302(l0): point = 883
   Insn 301(l0): point = 885
   Insn 300(l0): point = 887
   Insn 299(l0): point = 889
   Insn 298(l0): point = 891
   Insn 297(l0): point = 893
   Insn 296(l0): point = 895
   Insn 295(l0): point = 897
   Insn 294(l0): point = 899
   Insn 293(l0): point = 901
   Insn 292(l0): point = 903
   Insn 291(l0): point = 905
   Insn 290(l0): point = 907
   Insn 289(l0): point = 909
   Insn 288(l0): point = 911
   Insn 287(l0): point = 913
   Insn 286(l0): point = 915
   Insn 285(l0): point = 917
   Insn 284(l0): point = 919
   Insn 282(l0): point = 921
   Insn 281(l0): point = 923
   Insn 280(l0): point = 925
   Insn 279(l0): point = 927
   Insn 278(l0): point = 929
   Insn 277(l0): point = 931
   Insn 283(l0): point = 933
   Insn 276(l0): point = 935
   Insn 275(l0): point = 937
   Insn 274(l0): point = 939
   Insn 273(l0): point = 941
   Insn 272(l0): point = 943
   Insn 271(l0): point = 945
   Insn 270(l0): point = 947
   Insn 269(l0): point = 949
   Insn 268(l0): point = 951
   Insn 267(l0): point = 953
   Insn 266(l0): point = 955
   Insn 265(l0): point = 957
   Insn 264(l0): point = 959
   Insn 263(l0): point = 961
   Insn 262(l0): point = 963
   Insn 261(l0): point = 965
   Insn 260(l0): point = 967
   Insn 259(l0): point = 969
   Insn 258(l0): point = 971
   Insn 257(l0): point = 973
   Insn 256(l0): point = 975
   Insn 255(l0): point = 977
   Insn 254(l0): point = 979
   Insn 253(l0): point = 981
   Insn 252(l0): point = 983
   Insn 251(l0): point = 985
   Insn 250(l0): point = 987
   Insn 248(l0): point = 989
   Insn 247(l0): point = 991
   Insn 246(l0): point = 993
   Insn 245(l0): point = 995
   Insn 244(l0): point = 997
   Insn 243(l0): point = 999
   Insn 249(l0): point = 1001
   Insn 242(l0): point = 1003
   Insn 241(l0): point = 1005
   Insn 240(l0): point = 1007
   Insn 239(l0): point = 1009
   Insn 238(l0): point = 1011
   Insn 237(l0): point = 1013
   Insn 236(l0): point = 1015
   Insn 235(l0): point = 1017
   Insn 234(l0): point = 1019
   Insn 233(l0): point = 1021
   Insn 232(l0): point = 1023
   Insn 231(l0): point = 1025
   Insn 230(l0): point = 1027
   Insn 229(l0): point = 1029
   Insn 228(l0): point = 1031
   Insn 227(l0): point = 1033
   Insn 226(l0): point = 1035
   Insn 225(l0): point = 1037
   Insn 224(l0): point = 1039
   Insn 223(l0): point = 1041
   Insn 222(l0): point = 1043
   Insn 221(l0): point = 1045
   Insn 220(l0): point = 1047
   Insn 219(l0): point = 1049
   Insn 218(l0): point = 1051
   Insn 217(l0): point = 1053
   Insn 216(l0): point = 1055
   Insn 214(l0): point = 1057
   Insn 213(l0): point = 1059
   Insn 212(l0): point = 1061
   Insn 211(l0): point = 1063
   Insn 210(l0): point = 1065
   Insn 209(l0): point = 1067
   Insn 215(l0): point = 1069
   Insn 208(l0): point = 1071
   Insn 207(l0): point = 1073
   Insn 206(l0): point = 1075
   Insn 205(l0): point = 1077
   Insn 204(l0): point = 1079
   Insn 203(l0): point = 1081
   Insn 202(l0): point = 1083
   Insn 201(l0): point = 1085
   Insn 200(l0): point = 1087
   Insn 199(l0): point = 1089
   Insn 198(l0): point = 1091
   Insn 197(l0): point = 1093
   Insn 196(l0): point = 1095
   Insn 195(l0): point = 1097
   Insn 194(l0): point = 1099
   Insn 193(l0): point = 1101
   Insn 192(l0): point = 1103
   Insn 191(l0): point = 1105
   Insn 190(l0): point = 1107
   Insn 189(l0): point = 1109
   Insn 188(l0): point = 1111
   Insn 187(l0): point = 1113
   Insn 186(l0): point = 1115
   Insn 185(l0): point = 1117
   Insn 184(l0): point = 1119
   Insn 182(l0): point = 1121
   Insn 181(l0): point = 1123
   Insn 180(l0): point = 1125
   Insn 179(l0): point = 1127
   Insn 178(l0): point = 1129
   Insn 177(l0): point = 1131
   Insn 183(l0): point = 1133
   Insn 176(l0): point = 1135
   Insn 175(l0): point = 1137
   Insn 174(l0): point = 1139
   Insn 173(l0): point = 1141
   Insn 172(l0): point = 1143
   Insn 171(l0): point = 1145
   Insn 170(l0): point = 1147
   Insn 169(l0): point = 1149
   Insn 168(l0): point = 1151
   Insn 167(l0): point = 1153
   Insn 166(l0): point = 1155
   Insn 165(l0): point = 1157
   Insn 164(l0): point = 1159
   Insn 163(l0): point = 1161
   Insn 162(l0): point = 1163
   Insn 161(l0): point = 1165
   Insn 160(l0): point = 1167
   Insn 159(l0): point = 1169
   Insn 158(l0): point = 1171
   Insn 157(l0): point = 1173
   Insn 156(l0): point = 1175
   Insn 155(l0): point = 1177
   Insn 154(l0): point = 1179
   Insn 153(l0): point = 1181
   Insn 152(l0): point = 1183
   Insn 150(l0): point = 1185
   Insn 149(l0): point = 1187
   Insn 148(l0): point = 1189
   Insn 147(l0): point = 1191
   Insn 146(l0): point = 1193
   Insn 145(l0): point = 1195
   Insn 151(l0): point = 1197
   Insn 144(l0): point = 1199
   Insn 143(l0): point = 1201
   Insn 142(l0): point = 1203
   Insn 141(l0): point = 1205
   Insn 140(l0): point = 1207
   Insn 139(l0): point = 1209
   Insn 138(l0): point = 1211
   Insn 137(l0): point = 1213
   Insn 136(l0): point = 1215
   Insn 135(l0): point = 1217
   Insn 134(l0): point = 1219
   Insn 133(l0): point = 1221
   Insn 132(l0): point = 1223
   Insn 131(l0): point = 1225
   Insn 130(l0): point = 1227
   Insn 129(l0): point = 1229
   Insn 128(l0): point = 1231
   Insn 127(l0): point = 1233
   Insn 126(l0): point = 1235
   Insn 125(l0): point = 1237
   Insn 124(l0): point = 1239
   Insn 123(l0): point = 1241
   Insn 122(l0): point = 1243
   Insn 121(l0): point = 1245
   Insn 120(l0): point = 1247
   Insn 119(l0): point = 1249
   Insn 118(l0): point = 1251
   Insn 116(l0): point = 1253
   Insn 115(l0): point = 1255
   Insn 114(l0): point = 1257
   Insn 113(l0): point = 1259
   Insn 112(l0): point = 1261
   Insn 111(l0): point = 1263
   Insn 117(l0): point = 1265
   Insn 110(l0): point = 1267
   Insn 109(l0): point = 1269
   Insn 108(l0): point = 1271
   Insn 107(l0): point = 1273
   Insn 106(l0): point = 1275
   Insn 105(l0): point = 1277
   Insn 104(l0): point = 1279
   Insn 103(l0): point = 1281
   Insn 102(l0): point = 1283
   Insn 101(l0): point = 1285
   Insn 100(l0): point = 1287
   Insn 99(l0): point = 1289
   Insn 98(l0): point = 1291
   Insn 97(l0): point = 1293
   Insn 96(l0): point = 1295
   Insn 95(l0): point = 1297
   Insn 94(l0): point = 1299
   Insn 93(l0): point = 1301
   Insn 92(l0): point = 1303
   Insn 91(l0): point = 1305
   Insn 90(l0): point = 1307
   Insn 89(l0): point = 1309
   Insn 88(l0): point = 1311
   Insn 87(l0): point = 1313
   Insn 86(l0): point = 1315
   Insn 85(l0): point = 1317
   Insn 84(l0): point = 1319
   Insn 83(l0): point = 1321
   Insn 82(l0): point = 1323
   Insn 80(l0): point = 1325
   Insn 79(l0): point = 1327
   Insn 78(l0): point = 1329
   Insn 77(l0): point = 1331
   Insn 76(l0): point = 1333
   Insn 75(l0): point = 1335
   Insn 81(l0): point = 1337
   Insn 74(l0): point = 1339
   Insn 73(l0): point = 1341
   Insn 72(l0): point = 1343
   Insn 71(l0): point = 1345
   Insn 70(l0): point = 1347
   Insn 69(l0): point = 1349
   Insn 68(l0): point = 1351
   Insn 67(l0): point = 1353
   Insn 66(l0): point = 1355
   Insn 65(l0): point = 1357
   Insn 64(l0): point = 1359
   Insn 63(l0): point = 1361
   Insn 62(l0): point = 1363
   Insn 61(l0): point = 1365
   Insn 60(l0): point = 1367
   Insn 59(l0): point = 1369
   Insn 58(l0): point = 1371
   Insn 57(l0): point = 1373
   Insn 56(l0): point = 1375
   Insn 55(l0): point = 1377
   Insn 54(l0): point = 1379
   Insn 53(l0): point = 1381
   Insn 51(l0): point = 1383
   Insn 50(l0): point = 1385
   Insn 49(l0): point = 1387
   Insn 48(l0): point = 1389
   Insn 47(l0): point = 1391
   Insn 46(l0): point = 1393
   Insn 52(l0): point = 1395
   Insn 45(l0): point = 1397
   Insn 44(l0): point = 1399
   Insn 43(l0): point = 1401
   Insn 42(l0): point = 1403
   Insn 41(l0): point = 1405
   Insn 40(l0): point = 1407
   Insn 39(l0): point = 1409
   Insn 38(l0): point = 1411
   Insn 37(l0): point = 1413
   Insn 36(l0): point = 1415
   Insn 35(l0): point = 1417
   Insn 34(l0): point = 1419
   Insn 33(l0): point = 1421
   Insn 32(l0): point = 1423
   Insn 31(l0): point = 1425
   Insn 30(l0): point = 1427
   Insn 26(l0): point = 1430
   Insn 25(l0): point = 1432
   Insn 24(l0): point = 1434
   Insn 23(l0): point = 1436
   Insn 22(l0): point = 1438
   Insn 21(l0): point = 1440
   Insn 20(l0): point = 1442
   Insn 19(l0): point = 1444
   Insn 18(l0): point = 1446
   Insn 17(l0): point = 1448
   Insn 16(l0): point = 1450
   Insn 15(l0): point = 1452
   Insn 14(l0): point = 1454
   Insn 13(l0): point = 1456
   Insn 12(l0): point = 1458
   Insn 11(l0): point = 1460
   Insn 9(l0): point = 1463
   Insn 8(l0): point = 1465
   Insn 7(l0): point = 1467
   Insn 6(l0): point = 1469
   Insn 5(l0): point = 1471
 a0(r493): [3..4]
 a1(r492): [9..10]
 a2(r491): [13..14]
 a3(r490): [17..18]
 a4(r489): [21..22]
 a5(r488): [25..26]
 a6(r487): [29..30]
 a7(r195): [29..32]
 a8(r486): [33..34]
 a9(r485): [41..42]
 a10(r194): [41..44]
 a11(r484): [45..46]
 a12(r483): [53..54]
 a13(r193): [53..56]
 a14(r482): [61..62]
 a15(r192): [67..78]
 a16(r481): [67..68]
 a17(r190): [69..94]
 a18(r480): [71..72]
 a19(r479): [75..76]
 a20(r191): [79..80]
 a21(r475): [81..82]
 a22(r474): [83..84]
 a23(r476): [84..88]
 a24(r478): [85..86]
 a25(r477): [85..90]
 a26(r473): [89..92]
 a27(r472): [99..100]
 a28(r189): [103..104]
 a29(r188): [105..106]
 a30(r471): [107..108]
 a31(r470): [118..119]
 a32(r469): [124..125]
 a33(r187): [130..135]
 a34(r185): [132..139]
 a35(r184): [134..141]
 a36(r186): [136..137]
 a37(r183): [149..150]
 a38(r468): [168..169]
 a39(r467): [174..175]
 a40(r182): [180..185]
 a41(r180): [182..189]
 a42(r179): [184..191]
 a43(r181): [186..187]
 a44(r178): [199..200]
 a45(r466): [201..202]
 a46(r465): [205..206]
 a47(r177): [205..208]
 a48(r176): [213..220]
 a49(r175): [215..224]
 a50(r464): [221..222]
 a51(r463): [225..226]
 a52(r462): [229..230]
 a53(r461): [233..234]
 a54(r460): [237..238]
 a55(r459): [241..242]
 a56(r458): [245..246]
 a57(r457): [249..250]
 a58(r456): [253..254]
 a59(r455): [257..258]
 a60(r452): [270..275]
 a61(r453): [270..271]
 a62(r174): [270..277]
 a63(r454): [272..273]
 a64(r173): [278..279]
 a65(r172): [280..281]
 a66(r171): [282..283]
 a67(r450): [284..287]
 a68(r451): [284..285]
 a69(r170): [286..289]
 a70(r449): [290..291]
 a71(r446): [297..302]
 a72(r447): [297..298]
 a73(r169): [297..304]
 a74(r448): [299..300]
 a75(r168): [305..306]
 a76(r167): [307..308]
 a77(r166): [309..310]
 a78(r444): [311..314]
 a79(r445): [311..312]
 a80(r165): [313..316]
 a81(r443): [317..318]
 a82(r440): [329..334]
 a83(r441): [329..330]
 a84(r164): [329..336]
 a85(r442): [331..332]
 a86(r163): [337..338]
 a87(r162): [339..340]
 a88(r161): [341..342]
 a89(r438): [343..346]
 a90(r439): [343..344]
 a91(r160): [345..348]
 a92(r437): [349..350]
 a93(r434): [361..366]
 a94(r435): [361..362]
 a95(r436): [363..364]
 a96(r431): [369..374]
 a97(r432): [369..370]
 a98(r159): [369..376]
 a99(r433): [371..372]
 a100(r429): [377..380]
 a101(r430): [377..378]
 a102(r158): [379..382]
 a103(r428): [383..384]
 a104(r425): [395..400]
 a105(r426): [395..396]
 a106(r157): [395..402]
 a107(r427): [397..398]
 a108(r156): [403..404]
 a109(r155): [405..406]
 a110(r154): [407..408]
 a111(r423): [409..412]
 a112(r424): [409..410]
 a113(r153): [411..414]
 a114(r422): [415..416]
 a115(r419): [427..432]
 a116(r420): [427..428]
 a117(r152): [427..434]
 a118(r421): [429..430]
 a119(r151): [435..436]
 a120(r150): [437..438]
 a121(r149): [439..440]
 a122(r417): [441..444]
 a123(r418): [441..442]
 a124(r148): [443..446]
 a125(r416): [447..448]
 a126(r413): [459..464]
 a127(r414): [459..460]
 a128(r147): [459..466]
 a129(r415): [461..462]
 a130(r146): [467..468]
 a131(r145): [469..470]
 a132(r144): [471..472]
 a133(r411): [473..476]
 a134(r412): [473..474]
 a135(r143): [475..478]
 a136(r410): [479..480]
 a137(r407): [488..493]
 a138(r408): [488..489]
 a139(r142): [488..495]
 a140(r409): [490..491]
 a141(r405): [496..499]
 a142(r406): [496..497]
 a143(r141): [498..501]
 a144(r404): [502..503]
 a145(r403): [511..512]
 a146(r402): [515..516]
 a147(r401): [519..520]
 a148(r400): [523..524]
 a149(r399): [527..528]
 a150(r398): [531..532]
 a151(r397): [535..536]
 a152(r396): [539..540]
 a153(r394): [551..554]
 a154(r395): [551..552]
 a155(r140): [551..556]
 a156(r139): [553..564]
 a157(r393): [561..562]
 a158(r392): [565..566]
 a159(r391): [571..572]
 a160(r138): [575..576]
 a161(r390): [581..582]
 a162(r137): [585..590]
 a163(r389): [587..588]
 a164(r388): [595..596]
 a165(r136): [599..600]
 a166(r135): [601..602]
 a167(r387): [603..604]
 a168(r386): [612..613]
 a169(r385): [620..621]
 a170(r134): [620..623]
 a171(r384): [628..629]
 a172(r133): [632..647]
 a173(r383): [632..633]
 a174(r131): [634..663]
 a175(r382): [636..637]
 a176(r381): [640..641]
 a177(r380): [644..645]
 a178(r132): [648..649]
 a179(r376): [650..651]
 a180(r375): [652..653]
 a181(r377): [653..657]
 a182(r379): [654..655]
 a183(r378): [654..659]
 a184(r374): [658..661]
 a185(r373): [668..669]
 a186(r130): [672..673]
 a187(r129): [674..675]
 a188(r372): [676..677]
 a189(r371): [680..681]
 a190(r128): [680..683]
 a191(r370): [688..689]
 a192(r127): [692..711]
 a193(r369): [692..693]
 a194(r125): [694..727]
 a195(r368): [696..697]
 a196(r367): [700..701]
 a197(r366): [704..705]
 a198(r365): [708..709]
 a199(r126): [712..713]
 a200(r361): [714..715]
 a201(r360): [716..717]
 a202(r362): [717..721]
 a203(r364): [718..719]
 a204(r363): [718..723]
 a205(r359): [722..725]
 a206(r358): [732..733]
 a207(r124): [736..737]
 a208(r123): [738..739]
 a209(r357): [740..741]
 a210(r356): [744..745]
 a211(r122): [744..747]
 a212(r355): [752..753]
 a213(r121): [756..779]
 a214(r354): [756..757]
 a215(r119): [758..795]
 a216(r353): [760..761]
 a217(r352): [764..765]
 a218(r351): [768..769]
 a219(r350): [772..773]
 a220(r349): [776..777]
 a221(r120): [780..781]
 a222(r345): [782..783]
 a223(r344): [784..785]
 a224(r346): [785..789]
 a225(r348): [786..787]
 a226(r347): [786..791]
 a227(r343): [790..793]
 a228(r342): [800..801]
 a229(r118): [804..805]
 a230(r117): [806..807]
 a231(r341): [808..809]
 a232(r340): [812..813]
 a233(r116): [812..815]
 a234(r339): [820..821]
 a235(r115): [824..851]
 a236(r338): [824..825]
 a237(r113): [826..867]
 a238(r337): [828..829]
 a239(r336): [832..833]
 a240(r335): [836..837]
 a241(r334): [840..841]
 a242(r333): [844..845]
 a243(r332): [848..849]
 a244(r114): [852..853]
 a245(r328): [854..855]
 a246(r327): [856..857]
 a247(r329): [857..861]
 a248(r331): [858..859]
 a249(r330): [858..863]
 a250(r326): [862..865]
 a251(r325): [872..873]
 a252(r112): [876..877]
 a253(r111): [878..879]
 a254(r324): [880..881]
 a255(r323): [884..885]
 a256(r110): [884..887]
 a257(r322): [892..893]
 a258(r109): [896..919]
 a259(r321): [896..897]
 a260(r107): [898..935]
 a261(r320): [900..901]
 a262(r319): [904..905]
 a263(r318): [908..909]
 a264(r317): [912..913]
 a265(r316): [916..917]
 a266(r108): [920..921]
 a267(r312): [922..923]
 a268(r311): [924..925]
 a269(r313): [925..929]
 a270(r315): [926..927]
 a271(r314): [926..931]
 a272(r310): [930..933]
 a273(r309): [940..941]
 a274(r106): [944..945]
 a275(r105): [946..947]
 a276(r308): [948..949]
 a277(r307): [952..953]
 a278(r104): [952..955]
 a279(r306): [960..961]
 a280(r103): [964..987]
 a281(r305): [964..965]
 a282(r101): [966..1003]
 a283(r304): [968..969]
 a284(r303): [972..973]
 a285(r302): [976..977]
 a286(r301): [980..981]
 a287(r300): [984..985]
 a288(r102): [988..989]
 a289(r296): [990..991]
 a290(r295): [992..993]
 a291(r297): [993..997]
 a292(r299): [994..995]
 a293(r298): [994..999]
 a294(r294): [998..1001]
 a295(r293): [1008..1009]
 a296(r100): [1012..1013]
 a297(r99): [1014..1015]
 a298(r292): [1016..1017]
 a299(r291): [1020..1021]
 a300(r98): [1020..1023]
 a301(r290): [1028..1029]
 a302(r97): [1032..1055]
 a303(r289): [1032..1033]
 a304(r95): [1034..1071]
 a305(r288): [1036..1037]
 a306(r287): [1040..1041]
 a307(r286): [1044..1045]
 a308(r285): [1048..1049]
 a309(r284): [1052..1053]
 a310(r96): [1056..1057]
 a311(r280): [1058..1059]
 a312(r279): [1060..1061]
 a313(r281): [1061..1065]
 a314(r283): [1062..1063]
 a315(r282): [1062..1067]
 a316(r278): [1066..1069]
 a317(r277): [1076..1077]
 a318(r94): [1080..1081]
 a319(r93): [1082..1083]
 a320(r276): [1084..1085]
 a321(r275): [1088..1089]
 a322(r92): [1088..1091]
 a323(r274): [1096..1097]
 a324(r91): [1100..1119]
 a325(r273): [1100..1101]
 a326(r89): [1102..1135]
 a327(r272): [1104..1105]
 a328(r271): [1108..1109]
 a329(r270): [1112..1113]
 a330(r269): [1116..1117]
 a331(r90): [1120..1121]
 a332(r265): [1122..1123]
 a333(r264): [1124..1125]
 a334(r266): [1125..1129]
 a335(r268): [1126..1127]
 a336(r267): [1126..1131]
 a337(r263): [1130..1133]
 a338(r262): [1140..1141]
 a339(r88): [1144..1145]
 a340(r87): [1146..1147]
 a341(r261): [1148..1149]
 a342(r260): [1152..1153]
 a343(r86): [1152..1155]
 a344(r259): [1160..1161]
 a345(r85): [1164..1183]
 a346(r258): [1164..1165]
 a347(r83): [1166..1199]
 a348(r257): [1168..1169]
 a349(r256): [1172..1173]
 a350(r255): [1176..1177]
 a351(r254): [1180..1181]
 a352(r84): [1184..1185]
 a353(r250): [1186..1187]
 a354(r249): [1188..1189]
 a355(r251): [1189..1193]
 a356(r253): [1190..1191]
 a357(r252): [1190..1195]
 a358(r248): [1194..1197]
 a359(r247): [1204..1205]
 a360(r82): [1208..1209]
 a361(r81): [1210..1211]
 a362(r246): [1212..1213]
 a363(r245): [1216..1217]
 a364(r244): [1220..1221]
 a365(r243): [1224..1225]
 a366(r80): [1224..1227]
 a367(r242): [1232..1233]
 a368(r79): [1236..1251]
 a369(r241): [1236..1237]
 a370(r77): [1238..1267]
 a371(r240): [1240..1241]
 a372(r239): [1244..1245]
 a373(r238): [1248..1249]
 a374(r78): [1252..1253]
 a375(r234): [1254..1255]
 a376(r233): [1256..1257]
 a377(r235): [1257..1261]
 a378(r237): [1258..1259]
 a379(r236): [1258..1263]
 a380(r232): [1262..1265]
 a381(r231): [1272..1273]
 a382(r76): [1276..1277]
 a383(r75): [1278..1279]
 a384(r230): [1280..1281]
 a385(r229): [1284..1285]
 a386(r228): [1288..1289]
 a387(r227): [1292..1293]
 a388(r74): [1292..1295]
 a389(r226): [1300..1301]
 a390(r73): [1304..1323]
 a391(r225): [1304..1305]
 a392(r71): [1306..1339]
 a393(r224): [1308..1309]
 a394(r223): [1312..1313]
 a395(r222): [1316..1317]
 a396(r221): [1320..1321]
 a397(r72): [1324..1325]
 a398(r217): [1326..1327]
 a399(r216): [1328..1329]
 a400(r218): [1329..1333]
 a401(r220): [1330..1331]
 a402(r219): [1330..1335]
 a403(r215): [1334..1337]
 a404(r214): [1344..1345]
 a405(r70): [1348..1349]
 a406(r69): [1350..1351]
 a407(r213): [1352..1353]
 a408(r68): [1358..1361]
 a409(r212): [1366..1367]
 a410(r67): [1370..1381]
 a411(r211): [1370..1371]
 a412(r65): [1372..1397]
 a413(r210): [1374..1375]
 a414(r209): [1378..1379]
 a415(r66): [1382..1383]
 a416(r205): [1384..1385]
 a417(r204): [1386..1387]
 a418(r206): [1387..1391]
 a419(r208): [1388..1389]
 a420(r207): [1388..1393]
 a421(r203): [1392..1395]
 a422(r202): [1402..1403]
 a423(r64): [1406..1407]
 a424(r63): [1408..1409]
 a425(r201): [1410..1411]
 a426(r200): [1414..1415]
 a427(r199): [1422..1423]
 a428(r198): [1426..1427]
 a429(r197): [1437..1438]
 a430(r196): [1443..1444]
 a431(r62): [1449..1456]
 a432(r61): [1455..1458]
 a433(r60): [1459..1460]
 a434(r59): [1466..1467]
Compressing live ranges: from 1474 to 668 - 45%
Ranges after the compression:
 a0(r493): [0..1]
 a1(r492): [2..3]
 a2(r491): [4..5]
 a3(r490): [6..7]
 a4(r489): [8..9]
 a5(r488): [10..11]
 a6(r487): [12..13]
 a7(r195): [12..13]
 a8(r486): [14..15]
 a9(r485): [16..17]
 a10(r194): [16..17]
 a11(r484): [18..19]
 a12(r483): [20..21]
 a13(r193): [20..21]
 a14(r482): [22..23]
 a15(r192): [24..29]
 a16(r481): [24..25]
 a17(r190): [26..39]
 a18(r480): [26..27]
 a19(r479): [28..29]
 a20(r191): [30..31]
 a21(r475): [32..33]
 a22(r474): [34..35]
 a23(r476): [35..37]
 a24(r478): [36..37]
 a25(r477): [36..39]
 a26(r473): [38..39]
 a27(r472): [40..41]
 a28(r189): [42..43]
 a29(r188): [44..45]
 a30(r471): [46..47]
 a31(r470): [48..49]
 a32(r469): [50..51]
 a33(r187): [52..53]
 a34(r185): [52..55]
 a35(r184): [52..55]
 a36(r186): [54..55]
 a37(r183): [56..57]
 a38(r468): [58..59]
 a39(r467): [60..61]
 a40(r182): [62..63]
 a41(r180): [62..65]
 a42(r179): [62..65]
 a43(r181): [64..65]
 a44(r178): [66..67]
 a45(r466): [68..69]
 a46(r465): [70..71]
 a47(r177): [70..71]
 a48(r176): [72..73]
 a49(r175): [72..75]
 a50(r464): [74..75]
 a51(r463): [76..77]
 a52(r462): [78..79]
 a53(r461): [80..81]
 a54(r460): [82..83]
 a55(r459): [84..85]
 a56(r458): [86..87]
 a57(r457): [88..89]
 a58(r456): [90..91]
 a59(r455): [92..93]
 a60(r452): [94..97]
 a61(r453): [94..95]
 a62(r174): [94..97]
 a63(r454): [96..97]
 a64(r173): [98..99]
 a65(r172): [100..101]
 a66(r171): [102..103]
 a67(r450): [104..107]
 a68(r451): [104..105]
 a69(r170): [106..107]
 a70(r449): [108..109]
 a71(r446): [110..113]
 a72(r447): [110..111]
 a73(r169): [110..113]
 a74(r448): [112..113]
 a75(r168): [114..115]
 a76(r167): [116..117]
 a77(r166): [118..119]
 a78(r444): [120..123]
 a79(r445): [120..121]
 a80(r165): [122..123]
 a81(r443): [124..125]
 a82(r440): [126..129]
 a83(r441): [126..127]
 a84(r164): [126..129]
 a85(r442): [128..129]
 a86(r163): [130..131]
 a87(r162): [132..133]
 a88(r161): [134..135]
 a89(r438): [136..139]
 a90(r439): [136..137]
 a91(r160): [138..139]
 a92(r437): [140..141]
 a93(r434): [142..145]
 a94(r435): [142..143]
 a95(r436): [144..145]
 a96(r431): [146..149]
 a97(r432): [146..147]
 a98(r159): [146..149]
 a99(r433): [148..149]
 a100(r429): [150..153]
 a101(r430): [150..151]
 a102(r158): [152..153]
 a103(r428): [154..155]
 a104(r425): [156..159]
 a105(r426): [156..157]
 a106(r157): [156..159]
 a107(r427): [158..159]
 a108(r156): [160..161]
 a109(r155): [162..163]
 a110(r154): [164..165]
 a111(r423): [166..169]
 a112(r424): [166..167]
 a113(r153): [168..169]
 a114(r422): [170..171]
 a115(r419): [172..175]
 a116(r420): [172..173]
 a117(r152): [172..175]
 a118(r421): [174..175]
 a119(r151): [176..177]
 a120(r150): [178..179]
 a121(r149): [180..181]
 a122(r417): [182..185]
 a123(r418): [182..183]
 a124(r148): [184..185]
 a125(r416): [186..187]
 a126(r413): [188..191]
 a127(r414): [188..189]
 a128(r147): [188..191]
 a129(r415): [190..191]
 a130(r146): [192..193]
 a131(r145): [194..195]
 a132(r144): [196..197]
 a133(r411): [198..201]
 a134(r412): [198..199]
 a135(r143): [200..201]
 a136(r410): [202..203]
 a137(r407): [204..207]
 a138(r408): [204..205]
 a139(r142): [204..207]
 a140(r409): [206..207]
 a141(r405): [208..211]
 a142(r406): [208..209]
 a143(r141): [210..211]
 a144(r404): [212..213]
 a145(r403): [214..215]
 a146(r402): [216..217]
 a147(r401): [218..219]
 a148(r400): [220..221]
 a149(r399): [222..223]
 a150(r398): [224..225]
 a151(r397): [226..227]
 a152(r396): [228..229]
 a153(r394): [230..233]
 a154(r395): [230..231]
 a155(r140): [230..233]
 a156(r139): [232..235]
 a157(r393): [234..235]
 a158(r392): [236..237]
 a159(r391): [238..239]
 a160(r138): [240..241]
 a161(r390): [242..243]
 a162(r137): [244..245]
 a163(r389): [244..245]
 a164(r388): [246..247]
 a165(r136): [248..249]
 a166(r135): [250..251]
 a167(r387): [252..253]
 a168(r386): [254..255]
 a169(r385): [256..257]
 a170(r134): [256..257]
 a171(r384): [258..259]
 a172(r133): [260..267]
 a173(r383): [260..261]
 a174(r131): [262..277]
 a175(r382): [262..263]
 a176(r381): [264..265]
 a177(r380): [266..267]
 a178(r132): [268..269]
 a179(r376): [270..271]
 a180(r375): [272..273]
 a181(r377): [273..275]
 a182(r379): [274..275]
 a183(r378): [274..277]
 a184(r374): [276..277]
 a185(r373): [278..279]
 a186(r130): [280..281]
 a187(r129): [282..283]
 a188(r372): [284..285]
 a189(r371): [286..287]
 a190(r128): [286..287]
 a191(r370): [288..289]
 a192(r127): [290..299]
 a193(r369): [290..291]
 a194(r125): [292..309]
 a195(r368): [292..293]
 a196(r367): [294..295]
 a197(r366): [296..297]
 a198(r365): [298..299]
 a199(r126): [300..301]
 a200(r361): [302..303]
 a201(r360): [304..305]
 a202(r362): [305..307]
 a203(r364): [306..307]
 a204(r363): [306..309]
 a205(r359): [308..309]
 a206(r358): [310..311]
 a207(r124): [312..313]
 a208(r123): [314..315]
 a209(r357): [316..317]
 a210(r356): [318..319]
 a211(r122): [318..319]
 a212(r355): [320..321]
 a213(r121): [322..333]
 a214(r354): [322..323]
 a215(r119): [324..343]
 a216(r353): [324..325]
 a217(r352): [326..327]
 a218(r351): [328..329]
 a219(r350): [330..331]
 a220(r349): [332..333]
 a221(r120): [334..335]
 a222(r345): [336..337]
 a223(r344): [338..339]
 a224(r346): [339..341]
 a225(r348): [340..341]
 a226(r347): [340..343]
 a227(r343): [342..343]
 a228(r342): [344..345]
 a229(r118): [346..347]
 a230(r117): [348..349]
 a231(r341): [350..351]
 a232(r340): [352..353]
 a233(r116): [352..353]
 a234(r339): [354..355]
 a235(r115): [356..369]
 a236(r338): [356..357]
 a237(r113): [358..379]
 a238(r337): [358..359]
 a239(r336): [360..361]
 a240(r335): [362..363]
 a241(r334): [364..365]
 a242(r333): [366..367]
 a243(r332): [368..369]
 a244(r114): [370..371]
 a245(r328): [372..373]
 a246(r327): [374..375]
 a247(r329): [375..377]
 a248(r331): [376..377]
 a249(r330): [376..379]
 a250(r326): [378..379]
 a251(r325): [380..381]
 a252(r112): [382..383]
 a253(r111): [384..385]
 a254(r324): [386..387]
 a255(r323): [388..389]
 a256(r110): [388..389]
 a257(r322): [390..391]
 a258(r109): [392..403]
 a259(r321): [392..393]
 a260(r107): [394..413]
 a261(r320): [394..395]
 a262(r319): [396..397]
 a263(r318): [398..399]
 a264(r317): [400..401]
 a265(r316): [402..403]
 a266(r108): [404..405]
 a267(r312): [406..407]
 a268(r311): [408..409]
 a269(r313): [409..411]
 a270(r315): [410..411]
 a271(r314): [410..413]
 a272(r310): [412..413]
 a273(r309): [414..415]
 a274(r106): [416..417]
 a275(r105): [418..419]
 a276(r308): [420..421]
 a277(r307): [422..423]
 a278(r104): [422..423]
 a279(r306): [424..425]
 a280(r103): [426..437]
 a281(r305): [426..427]
 a282(r101): [428..447]
 a283(r304): [428..429]
 a284(r303): [430..431]
 a285(r302): [432..433]
 a286(r301): [434..435]
 a287(r300): [436..437]
 a288(r102): [438..439]
 a289(r296): [440..441]
 a290(r295): [442..443]
 a291(r297): [443..445]
 a292(r299): [444..445]
 a293(r298): [444..447]
 a294(r294): [446..447]
 a295(r293): [448..449]
 a296(r100): [450..451]
 a297(r99): [452..453]
 a298(r292): [454..455]
 a299(r291): [456..457]
 a300(r98): [456..457]
 a301(r290): [458..459]
 a302(r97): [460..471]
 a303(r289): [460..461]
 a304(r95): [462..481]
 a305(r288): [462..463]
 a306(r287): [464..465]
 a307(r286): [466..467]
 a308(r285): [468..469]
 a309(r284): [470..471]
 a310(r96): [472..473]
 a311(r280): [474..475]
 a312(r279): [476..477]
 a313(r281): [477..479]
 a314(r283): [478..479]
 a315(r282): [478..481]
 a316(r278): [480..481]
 a317(r277): [482..483]
 a318(r94): [484..485]
 a319(r93): [486..487]
 a320(r276): [488..489]
 a321(r275): [490..491]
 a322(r92): [490..491]
 a323(r274): [492..493]
 a324(r91): [494..503]
 a325(r273): [494..495]
 a326(r89): [496..513]
 a327(r272): [496..497]
 a328(r271): [498..499]
 a329(r270): [500..501]
 a330(r269): [502..503]
 a331(r90): [504..505]
 a332(r265): [506..507]
 a333(r264): [508..509]
 a334(r266): [509..511]
 a335(r268): [510..511]
 a336(r267): [510..513]
 a337(r263): [512..513]
 a338(r262): [514..515]
 a339(r88): [516..517]
 a340(r87): [518..519]
 a341(r261): [520..521]
 a342(r260): [522..523]
 a343(r86): [522..523]
 a344(r259): [524..525]
 a345(r85): [526..535]
 a346(r258): [526..527]
 a347(r83): [528..545]
 a348(r257): [528..529]
 a349(r256): [530..531]
 a350(r255): [532..533]
 a351(r254): [534..535]
 a352(r84): [536..537]
 a353(r250): [538..539]
 a354(r249): [540..541]
 a355(r251): [541..543]
 a356(r253): [542..543]
 a357(r252): [542..545]
 a358(r248): [544..545]
 a359(r247): [546..547]
 a360(r82): [548..549]
 a361(r81): [550..551]
 a362(r246): [552..553]
 a363(r245): [554..555]
 a364(r244): [556..557]
 a365(r243): [558..559]
 a366(r80): [558..559]
 a367(r242): [560..561]
 a368(r79): [562..569]
 a369(r241): [562..563]
 a370(r77): [564..579]
 a371(r240): [564..565]
 a372(r239): [566..567]
 a373(r238): [568..569]
 a374(r78): [570..571]
 a375(r234): [572..573]
 a376(r233): [574..575]
 a377(r235): [575..577]
 a378(r237): [576..577]
 a379(r236): [576..579]
 a380(r232): [578..579]
 a381(r231): [580..581]
 a382(r76): [582..583]
 a383(r75): [584..585]
 a384(r230): [586..587]
 a385(r229): [588..589]
 a386(r228): [590..591]
 a387(r227): [592..593]
 a388(r74): [592..593]
 a389(r226): [594..595]
 a390(r73): [596..605]
 a391(r225): [596..597]
 a392(r71): [598..615]
 a393(r224): [598..599]
 a394(r223): [600..601]
 a395(r222): [602..603]
 a396(r221): [604..605]
 a397(r72): [606..607]
 a398(r217): [608..609]
 a399(r216): [610..611]
 a400(r218): [611..613]
 a401(r220): [612..613]
 a402(r219): [612..615]
 a403(r215): [614..615]
 a404(r214): [616..617]
 a405(r70): [618..619]
 a406(r69): [620..621]
 a407(r213): [622..623]
 a408(r68): [624..625]
 a409(r212): [626..627]
 a410(r67): [628..633]
 a411(r211): [628..629]
 a412(r65): [630..643]
 a413(r210): [630..631]
 a414(r209): [632..633]
 a415(r66): [634..635]
 a416(r205): [636..637]
 a417(r204): [638..639]
 a418(r206): [639..641]
 a419(r208): [640..641]
 a420(r207): [640..643]
 a421(r203): [642..643]
 a422(r202): [644..645]
 a423(r64): [646..647]
 a424(r63): [648..649]
 a425(r201): [650..651]
 a426(r200): [652..653]
 a427(r199): [654..655]
 a428(r198): [656..657]
 a429(r197): [658..659]
 a430(r196): [660..661]
 a431(r62): [662..663]
 a432(r61): [662..663]
 a433(r60): [664..665]
 a434(r59): [666..667]
  regions=3, blocks=28, points=668
    allocnos=435 (big 0), copies=0, conflicts=0, ranges=435
Disposition:
  434:r59  l0     0  433:r60  l0     0  432:r61  l0     1  431:r62  l0     0
  424:r63  l0     0  423:r64  l0     0  412:r65  l0     1  415:r66  l0     0
  410:r67  l0     0  408:r68  l0     0  406:r69  l0     0  405:r70  l0     0
  392:r71  l0     1  397:r72  l0     0  390:r73  l0     0  388:r74  l0     0
  383:r75  l0     0  382:r76  l0     0  370:r77  l0     1  374:r78  l0     0
  368:r79  l0     0  366:r80  l0     0  361:r81  l0     0  360:r82  l0     0
  347:r83  l0     1  352:r84  l0     0  345:r85  l0     0  343:r86  l0     0
  340:r87  l0     0  339:r88  l0     0  326:r89  l0     1  331:r90  l0     0
  324:r91  l0     0  322:r92  l0     0  319:r93  l0     0  318:r94  l0     0
  304:r95  l0     1  310:r96  l0     0  302:r97  l0     0  300:r98  l0     0
  297:r99  l0     0  296:r100 l0     0  282:r101 l0     1  288:r102 l0     0
  280:r103 l0     0  278:r104 l0     0  275:r105 l0     0  274:r106 l0     0
  260:r107 l0     1  266:r108 l0     0  258:r109 l0     0  256:r110 l0     0
  253:r111 l0     0  252:r112 l0     0  237:r113 l0     1  244:r114 l0     0
  235:r115 l0     0  233:r116 l0     0  230:r117 l0     0  229:r118 l0     0
  215:r119 l0     1  221:r120 l0     0  213:r121 l0     0  211:r122 l0     0
  208:r123 l0     0  207:r124 l0     0  194:r125 l0     1  199:r126 l0     0
  192:r127 l0     0  190:r128 l0     0  187:r129 l0     0  186:r130 l0     0
  174:r131 l0     1  178:r132 l0     0  172:r133 l0     0  170:r134 l0     0
  166:r135 l0     0  165:r136 l0     0  162:r137 l0     0  160:r138 l0     0
  156:r139 l0     3  155:r140 l0     0  143:r141 l0     1  139:r142 l0     1
  135:r143 l0     1  132:r144 l0     0  131:r145 l0     0  130:r146 l0     0
  128:r147 l0     1  124:r148 l0     1  121:r149 l0     0  120:r150 l0     0
  119:r151 l0     0  117:r152 l0     1  113:r153 l0     1  110:r154 l0     0
  109:r155 l0     0  108:r156 l0     0  106:r157 l0     1  102:r158 l0     1
   98:r159 l0     1   91:r160 l0     1   88:r161 l0     0   87:r162 l0     0
   86:r163 l0     0   84:r164 l0     1   80:r165 l0     1   77:r166 l0     0
   76:r167 l0     0   75:r168 l0     0   73:r169 l0     1   69:r170 l0     1
   66:r171 l0     0   65:r172 l0     0   64:r173 l0     0   62:r174 l0     1
   49:r175 l0     1   48:r176 l0     0   47:r177 l0     0   44:r178 l0     0
   42:r179 l0     0   41:r180 l0     2   43:r181 l0     1   40:r182 l0     1
   37:r183 l0     0   35:r184 l0     0   34:r185 l0     2   36:r186 l0     1
   33:r187 l0     1   29:r188 l0     0   28:r189 l0     0   17:r190 l0     1
   20:r191 l0     0   15:r192 l0     0   13:r193 l0     0   10:r194 l0     1
    7:r195 l0     1  430:r196 l0     0  429:r197 l0     0  428:r198 l0     0
  427:r199 l0     0  426:r200 l0     0  425:r201 l0     0  422:r202 l0     0
  421:r203 l0     0  417:r204 l0     0  416:r205 l0     0  418:r206 l0     3
  420:r207 l0     2  419:r208 l0     0  414:r209 l0     2  413:r210 l0     2
  411:r211 l0     1  409:r212 l0     0  407:r213 l0     0  404:r214 l0     0
  403:r215 l0     0  399:r216 l0     0  398:r217 l0     0  400:r218 l0     3
  402:r219 l0     2  401:r220 l0     0  396:r221 l0     2  395:r222 l0     2
  394:r223 l0     2  393:r224 l0     2  391:r225 l0     1  389:r226 l0     0
  387:r227 l0     1  386:r228 l0     0  385:r229 l0     0  384:r230 l0     0
  381:r231 l0     0  380:r232 l0     0  376:r233 l0     0  375:r234 l0     0
  377:r235 l0     3  379:r236 l0     2  378:r237 l0     0  373:r238 l0     2
  372:r239 l0     2  371:r240 l0     2  369:r241 l0     1  367:r242 l0     0
  365:r243 l0     1  364:r244 l0     0  363:r245 l0     0  362:r246 l0     0
  359:r247 l0     0  358:r248 l0     0  354:r249 l0     0  353:r250 l0     0
  355:r251 l0     3  357:r252 l0     2  356:r253 l0     0  351:r254 l0     2
  350:r255 l0     2  349:r256 l0     2  348:r257 l0     2  346:r258 l0     1
  344:r259 l0     0  342:r260 l0     1  341:r261 l0     0  338:r262 l0     0
  337:r263 l0     0  333:r264 l0     0  332:r265 l0     0  334:r266 l0     3
  336:r267 l0     2  335:r268 l0     0  330:r269 l0     2  329:r270 l0     2
  328:r271 l0     2  327:r272 l0     2  325:r273 l0     1  323:r274 l0     0
  321:r275 l0     1  320:r276 l0     0  317:r277 l0     0  316:r278 l0     0
  312:r279 l0     0  311:r280 l0     0  313:r281 l0     3  315:r282 l0     2
  314:r283 l0     0  309:r284 l0     2  308:r285 l0     2  307:r286 l0     2
  306:r287 l0     2  305:r288 l0     2  303:r289 l0     1  301:r290 l0     0
  299:r291 l0     1  298:r292 l0     0  295:r293 l0     0  294:r294 l0     0
  290:r295 l0     0  289:r296 l0     0  291:r297 l0     3  293:r298 l0     2
  292:r299 l0     0  287:r300 l0     2  286:r301 l0     2  285:r302 l0     2
  284:r303 l0     2  283:r304 l0     2  281:r305 l0     1  279:r306 l0     0
  277:r307 l0     1  276:r308 l0     0  273:r309 l0     0  272:r310 l0     0
  268:r311 l0     0  267:r312 l0     0  269:r313 l0     3  271:r314 l0     2
  270:r315 l0     0  265:r316 l0     2  264:r317 l0     2  263:r318 l0     2
  262:r319 l0     2  261:r320 l0     2  259:r321 l0     1  257:r322 l0     0
  255:r323 l0     1  254:r324 l0     0  251:r325 l0     0  250:r326 l0     0
  246:r327 l0     0  245:r328 l0     0  247:r329 l0     3  249:r330 l0     2
  248:r331 l0     0  243:r332 l0     2  242:r333 l0     2  241:r334 l0     2
  240:r335 l0     2  239:r336 l0     2  238:r337 l0     2  236:r338 l0     1
  234:r339 l0     0  232:r340 l0     1  231:r341 l0     0  228:r342 l0     0
  227:r343 l0     0  223:r344 l0     0  222:r345 l0     0  224:r346 l0     3
  226:r347 l0     2  225:r348 l0     0  220:r349 l0     2  219:r350 l0     2
  218:r351 l0     2  217:r352 l0     2  216:r353 l0     2  214:r354 l0     1
  212:r355 l0     0  210:r356 l0     1  209:r357 l0     0  206:r358 l0     0
  205:r359 l0     0  201:r360 l0     0  200:r361 l0     0  202:r362 l0     3
  204:r363 l0     2  203:r364 l0     0  198:r365 l0     2  197:r366 l0     2
  196:r367 l0     2  195:r368 l0     2  193:r369 l0     1  191:r370 l0     0
  189:r371 l0     1  188:r372 l0     0  185:r373 l0     0  184:r374 l0     0
  180:r375 l0     0  179:r376 l0     0  181:r377 l0     3  183:r378 l0     2
  182:r379 l0     0  177:r380 l0     2  176:r381 l0     2  175:r382 l0     2
  173:r383 l0     1  171:r384 l0     0  169:r385 l0     1  168:r386 l0     0
  167:r387 l0     0  164:r388 l0     0  163:r389 l0     1  161:r390 l0     0
  159:r391 l0     0  158:r392 l0     0  157:r393 l0     0  153:r394 l0     1
  154:r395 l0     2  152:r396 l0     0  151:r397 l0     0  150:r398 l0     0
  149:r399 l0     0  148:r400 l0     0  147:r401 l0     0  146:r402 l0     0
  145:r403 l0     0  144:r404 l0     0  141:r405 l0     0  142:r406 l0     1
  137:r407 l0     0  138:r408 l0     2  140:r409 l0     2  136:r410 l0     0
  133:r411 l0     0  134:r412 l0     1  126:r413 l0     0  127:r414 l0     2
  129:r415 l0     2  125:r416 l0     0  122:r417 l0     0  123:r418 l0     1
  115:r419 l0     0  116:r420 l0     2  118:r421 l0     2  114:r422 l0     0
  111:r423 l0     0  112:r424 l0     1  104:r425 l0     0  105:r426 l0     2
  107:r427 l0     2  103:r428 l0     0  100:r429 l0     0  101:r430 l0     1
   96:r431 l0     0   97:r432 l0     2   99:r433 l0     2   93:r434 l0     0
   94:r435 l0     1   95:r436 l0     1   92:r437 l0     0   89:r438 l0     0
   90:r439 l0     1   82:r440 l0     0   83:r441 l0     2   85:r442 l0     2
   81:r443 l0     0   78:r444 l0     0   79:r445 l0     1   71:r446 l0     0
   72:r447 l0     2   74:r448 l0     2   70:r449 l0     0   67:r450 l0     0
   68:r451 l0     1   60:r452 l0     0   61:r453 l0     2   63:r454 l0     2
   59:r455 l0     0   58:r456 l0     0   57:r457 l0     0   56:r458 l0     0
   55:r459 l0     0   54:r460 l0     0   53:r461 l0     0   52:r462 l0     0
   51:r463 l0     0   50:r464 l0     0   46:r465 l0     1   45:r466 l0     0
   39:r467 l0     0   38:r468 l0     0   32:r469 l0     0   31:r470 l0     0
   30:r471 l0     0   27:r472 l0     0   26:r473 l0     0   22:r474 l0     0
   21:r475 l0     0   23:r476 l0     3   25:r477 l0     2   24:r478 l0     0
   19:r479 l0     2   18:r480 l0     2   16:r481 l0     1   14:r482 l0     0
   12:r483 l0     1   11:r484 l0     0    9:r485 l0     0    8:r486 l0     0
    6:r487 l0     0    5:r488 l0     0    4:r489 l0     0    3:r490 l0     0
    2:r491 l0     0    1:r492 l0     0    0:r493 l0     0
+++Costs: overall -23, reg -23, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 0
insn=7, live_throughout: 7, dead_or_set: 0, 59
insn=8, live_throughout: 7, dead_or_set: 59
insn=9, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 60
insn=12, live_throughout: 7, dead_or_set: 60, 61
insn=13, live_throughout: 7, 61, dead_or_set: 62
insn=14, live_throughout: 7, 62, dead_or_set: 61
insn=15, live_throughout: 7, 62, dead_or_set: 
insn=16, live_throughout: 7, 62, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 62
insn=18, live_throughout: 7, dead_or_set: 0
insn=19, live_throughout: 7, dead_or_set: 196
insn=20, live_throughout: 7, dead_or_set: 196
insn=21, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 197
insn=23, live_throughout: 7, dead_or_set: 197
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=30, live_throughout: 7, dead_or_set: 198
insn=31, live_throughout: 7, dead_or_set: 198
insn=32, live_throughout: 7, dead_or_set: 199
insn=33, live_throughout: 7, dead_or_set: 199
insn=34, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 0
insn=36, live_throughout: 7, dead_or_set: 0, 200
insn=37, live_throughout: 7, dead_or_set: 200
insn=38, live_throughout: 7, dead_or_set: 201
insn=39, live_throughout: 7, dead_or_set: 63, 201
insn=40, live_throughout: 7, dead_or_set: 63, 64
insn=41, live_throughout: 7, dead_or_set: 64
insn=42, live_throughout: 7, dead_or_set: 202
insn=43, live_throughout: 7, dead_or_set: 202
insn=44, live_throughout: 7, dead_or_set: 0
insn=45, live_throughout: 7, dead_or_set: 65
insn=52, live_throughout: 7, 65, dead_or_set: 203
insn=46, live_throughout: 7, 65, 203, dead_or_set: 207
insn=47, live_throughout: 7, 65, 207, dead_or_set: 203, 206
insn=48, live_throughout: 7, 65, 206, 207, dead_or_set: 208
insn=49, live_throughout: 7, 65, dead_or_set: 204, 206, 207, 208
insn=50, live_throughout: 7, 65, dead_or_set: 204, 205
insn=51, live_throughout: 7, 65, dead_or_set: 66, 205
insn=53, live_throughout: 7, 65, dead_or_set: 66, 67
insn=54, live_throughout: 7, 65, 67, dead_or_set: 209
insn=55, live_throughout: 7, 65, 67, dead_or_set: 209
insn=56, live_throughout: 7, 65, 67, dead_or_set: 210
insn=57, live_throughout: 7, 65, 67, dead_or_set: 210
insn=58, live_throughout: 7, 67, dead_or_set: 65, 211
insn=59, live_throughout: 7, dead_or_set: 67, 211
insn=60, live_throughout: 7, dead_or_set: 212
insn=61, live_throughout: 7, dead_or_set: 212
insn=62, live_throughout: 7, dead_or_set: 0
insn=63, live_throughout: 7, dead_or_set: 0, 68
insn=64, live_throughout: 7, 68, dead_or_set: 
insn=65, live_throughout: 7, dead_or_set: 68
insn=66, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 213
insn=68, live_throughout: 7, dead_or_set: 69, 213
insn=69, live_throughout: 7, dead_or_set: 69, 70
insn=70, live_throughout: 7, dead_or_set: 70
insn=71, live_throughout: 7, dead_or_set: 214
insn=72, live_throughout: 7, dead_or_set: 214
insn=73, live_throughout: 7, dead_or_set: 0
insn=74, live_throughout: 7, dead_or_set: 71
insn=81, live_throughout: 7, 71, dead_or_set: 215
insn=75, live_throughout: 7, 71, 215, dead_or_set: 219
insn=76, live_throughout: 7, 71, 219, dead_or_set: 215, 218
insn=77, live_throughout: 7, 71, 218, 219, dead_or_set: 220
insn=78, live_throughout: 7, 71, dead_or_set: 216, 218, 219, 220
insn=79, live_throughout: 7, 71, dead_or_set: 216, 217
insn=80, live_throughout: 7, 71, dead_or_set: 72, 217
insn=82, live_throughout: 7, 71, dead_or_set: 72, 73
insn=83, live_throughout: 7, 71, 73, dead_or_set: 221
insn=84, live_throughout: 7, 71, 73, dead_or_set: 221
insn=85, live_throughout: 7, 71, 73, dead_or_set: 222
insn=86, live_throughout: 7, 71, 73, dead_or_set: 222
insn=87, live_throughout: 7, 71, 73, dead_or_set: 223
insn=88, live_throughout: 7, 71, 73, dead_or_set: 223
insn=89, live_throughout: 7, 71, 73, dead_or_set: 224
insn=90, live_throughout: 7, 71, 73, dead_or_set: 224
insn=91, live_throughout: 7, 73, dead_or_set: 71, 225
insn=92, live_throughout: 7, dead_or_set: 73, 225
insn=93, live_throughout: 7, dead_or_set: 226
insn=94, live_throughout: 7, dead_or_set: 226
insn=95, live_throughout: 7, dead_or_set: 0
insn=96, live_throughout: 7, dead_or_set: 0, 74
insn=97, live_throughout: 7, 74, dead_or_set: 227
insn=98, live_throughout: 7, dead_or_set: 74, 227
insn=99, live_throughout: 7, dead_or_set: 228
insn=100, live_throughout: 7, dead_or_set: 228
insn=101, live_throughout: 7, dead_or_set: 229
insn=102, live_throughout: 7, dead_or_set: 229
insn=103, live_throughout: 7, dead_or_set: 230
insn=104, live_throughout: 7, dead_or_set: 75, 230
insn=105, live_throughout: 7, dead_or_set: 75, 76
insn=106, live_throughout: 7, dead_or_set: 76
insn=107, live_throughout: 7, dead_or_set: 231
insn=108, live_throughout: 7, dead_or_set: 231
insn=109, live_throughout: 7, dead_or_set: 0
insn=110, live_throughout: 7, dead_or_set: 77
insn=117, live_throughout: 7, 77, dead_or_set: 232
insn=111, live_throughout: 7, 77, 232, dead_or_set: 236
insn=112, live_throughout: 7, 77, 236, dead_or_set: 232, 235
insn=113, live_throughout: 7, 77, 235, 236, dead_or_set: 237
insn=114, live_throughout: 7, 77, dead_or_set: 233, 235, 236, 237
insn=115, live_throughout: 7, 77, dead_or_set: 233, 234
insn=116, live_throughout: 7, 77, dead_or_set: 78, 234
insn=118, live_throughout: 7, 77, dead_or_set: 78, 79
insn=119, live_throughout: 7, 77, 79, dead_or_set: 238
insn=120, live_throughout: 7, 77, 79, dead_or_set: 238
insn=121, live_throughout: 7, 77, 79, dead_or_set: 239
insn=122, live_throughout: 7, 77, 79, dead_or_set: 239
insn=123, live_throughout: 7, 77, 79, dead_or_set: 240
insn=124, live_throughout: 7, 77, 79, dead_or_set: 240
insn=125, live_throughout: 7, 79, dead_or_set: 77, 241
insn=126, live_throughout: 7, dead_or_set: 79, 241
insn=127, live_throughout: 7, dead_or_set: 242
insn=128, live_throughout: 7, dead_or_set: 242
insn=129, live_throughout: 7, dead_or_set: 0
insn=130, live_throughout: 7, dead_or_set: 0, 80
insn=131, live_throughout: 7, 80, dead_or_set: 243
insn=132, live_throughout: 7, dead_or_set: 80, 243
insn=133, live_throughout: 7, dead_or_set: 244
insn=134, live_throughout: 7, dead_or_set: 244
insn=135, live_throughout: 7, dead_or_set: 245
insn=136, live_throughout: 7, dead_or_set: 245
insn=137, live_throughout: 7, dead_or_set: 246
insn=138, live_throughout: 7, dead_or_set: 81, 246
insn=139, live_throughout: 7, dead_or_set: 81, 82
insn=140, live_throughout: 7, dead_or_set: 82
insn=141, live_throughout: 7, dead_or_set: 247
insn=142, live_throughout: 7, dead_or_set: 247
insn=143, live_throughout: 7, dead_or_set: 0
insn=144, live_throughout: 7, dead_or_set: 83
insn=151, live_throughout: 7, 83, dead_or_set: 248
insn=145, live_throughout: 7, 83, 248, dead_or_set: 252
insn=146, live_throughout: 7, 83, 252, dead_or_set: 248, 251
insn=147, live_throughout: 7, 83, 251, 252, dead_or_set: 253
insn=148, live_throughout: 7, 83, dead_or_set: 249, 251, 252, 253
insn=149, live_throughout: 7, 83, dead_or_set: 249, 250
insn=150, live_throughout: 7, 83, dead_or_set: 84, 250
insn=152, live_throughout: 7, 83, dead_or_set: 84, 85
insn=153, live_throughout: 7, 83, 85, dead_or_set: 254
insn=154, live_throughout: 7, 83, 85, dead_or_set: 254
insn=155, live_throughout: 7, 83, 85, dead_or_set: 255
insn=156, live_throughout: 7, 83, 85, dead_or_set: 255
insn=157, live_throughout: 7, 83, 85, dead_or_set: 256
insn=158, live_throughout: 7, 83, 85, dead_or_set: 256
insn=159, live_throughout: 7, 83, 85, dead_or_set: 257
insn=160, live_throughout: 7, 83, 85, dead_or_set: 257
insn=161, live_throughout: 7, 85, dead_or_set: 83, 258
insn=162, live_throughout: 7, dead_or_set: 85, 258
insn=163, live_throughout: 7, dead_or_set: 259
insn=164, live_throughout: 7, dead_or_set: 259
insn=165, live_throughout: 7, dead_or_set: 0
insn=166, live_throughout: 7, dead_or_set: 0, 86
insn=167, live_throughout: 7, 86, dead_or_set: 260
insn=168, live_throughout: 7, dead_or_set: 86, 260
insn=169, live_throughout: 7, dead_or_set: 261
insn=170, live_throughout: 7, dead_or_set: 87, 261
insn=171, live_throughout: 7, dead_or_set: 87, 88
insn=172, live_throughout: 7, dead_or_set: 88
insn=173, live_throughout: 7, dead_or_set: 262
insn=174, live_throughout: 7, dead_or_set: 262
insn=175, live_throughout: 7, dead_or_set: 0
insn=176, live_throughout: 7, dead_or_set: 89
insn=183, live_throughout: 7, 89, dead_or_set: 263
insn=177, live_throughout: 7, 89, 263, dead_or_set: 267
insn=178, live_throughout: 7, 89, 267, dead_or_set: 263, 266
insn=179, live_throughout: 7, 89, 266, 267, dead_or_set: 268
insn=180, live_throughout: 7, 89, dead_or_set: 264, 266, 267, 268
insn=181, live_throughout: 7, 89, dead_or_set: 264, 265
insn=182, live_throughout: 7, 89, dead_or_set: 90, 265
insn=184, live_throughout: 7, 89, dead_or_set: 90, 91
insn=185, live_throughout: 7, 89, 91, dead_or_set: 269
insn=186, live_throughout: 7, 89, 91, dead_or_set: 269
insn=187, live_throughout: 7, 89, 91, dead_or_set: 270
insn=188, live_throughout: 7, 89, 91, dead_or_set: 270
insn=189, live_throughout: 7, 89, 91, dead_or_set: 271
insn=190, live_throughout: 7, 89, 91, dead_or_set: 271
insn=191, live_throughout: 7, 89, 91, dead_or_set: 272
insn=192, live_throughout: 7, 89, 91, dead_or_set: 272
insn=193, live_throughout: 7, 91, dead_or_set: 89, 273
insn=194, live_throughout: 7, dead_or_set: 91, 273
insn=195, live_throughout: 7, dead_or_set: 274
insn=196, live_throughout: 7, dead_or_set: 274
insn=197, live_throughout: 7, dead_or_set: 0
insn=198, live_throughout: 7, dead_or_set: 0, 92
insn=199, live_throughout: 7, 92, dead_or_set: 275
insn=200, live_throughout: 7, dead_or_set: 92, 275
insn=201, live_throughout: 7, dead_or_set: 276
insn=202, live_throughout: 7, dead_or_set: 93, 276
insn=203, live_throughout: 7, dead_or_set: 93, 94
insn=204, live_throughout: 7, dead_or_set: 94
insn=205, live_throughout: 7, dead_or_set: 277
insn=206, live_throughout: 7, dead_or_set: 277
insn=207, live_throughout: 7, dead_or_set: 0
insn=208, live_throughout: 7, dead_or_set: 95
insn=215, live_throughout: 7, 95, dead_or_set: 278
insn=209, live_throughout: 7, 95, 278, dead_or_set: 282
insn=210, live_throughout: 7, 95, 282, dead_or_set: 278, 281
insn=211, live_throughout: 7, 95, 281, 282, dead_or_set: 283
insn=212, live_throughout: 7, 95, dead_or_set: 279, 281, 282, 283
insn=213, live_throughout: 7, 95, dead_or_set: 279, 280
insn=214, live_throughout: 7, 95, dead_or_set: 96, 280
insn=216, live_throughout: 7, 95, dead_or_set: 96, 97
insn=217, live_throughout: 7, 95, 97, dead_or_set: 284
insn=218, live_throughout: 7, 95, 97, dead_or_set: 284
insn=219, live_throughout: 7, 95, 97, dead_or_set: 285
insn=220, live_throughout: 7, 95, 97, dead_or_set: 285
insn=221, live_throughout: 7, 95, 97, dead_or_set: 286
insn=222, live_throughout: 7, 95, 97, dead_or_set: 286
insn=223, live_throughout: 7, 95, 97, dead_or_set: 287
insn=224, live_throughout: 7, 95, 97, dead_or_set: 287
insn=225, live_throughout: 7, 95, 97, dead_or_set: 288
insn=226, live_throughout: 7, 95, 97, dead_or_set: 288
insn=227, live_throughout: 7, 97, dead_or_set: 95, 289
insn=228, live_throughout: 7, dead_or_set: 97, 289
insn=229, live_throughout: 7, dead_or_set: 290
insn=230, live_throughout: 7, dead_or_set: 290
insn=231, live_throughout: 7, dead_or_set: 0
insn=232, live_throughout: 7, dead_or_set: 0, 98
insn=233, live_throughout: 7, 98, dead_or_set: 291
insn=234, live_throughout: 7, dead_or_set: 98, 291
insn=235, live_throughout: 7, dead_or_set: 292
insn=236, live_throughout: 7, dead_or_set: 99, 292
insn=237, live_throughout: 7, dead_or_set: 99, 100
insn=238, live_throughout: 7, dead_or_set: 100
insn=239, live_throughout: 7, dead_or_set: 293
insn=240, live_throughout: 7, dead_or_set: 293
insn=241, live_throughout: 7, dead_or_set: 0
insn=242, live_throughout: 7, dead_or_set: 101
insn=249, live_throughout: 7, 101, dead_or_set: 294
insn=243, live_throughout: 7, 101, 294, dead_or_set: 298
insn=244, live_throughout: 7, 101, 298, dead_or_set: 294, 297
insn=245, live_throughout: 7, 101, 297, 298, dead_or_set: 299
insn=246, live_throughout: 7, 101, dead_or_set: 295, 297, 298, 299
insn=247, live_throughout: 7, 101, dead_or_set: 295, 296
insn=248, live_throughout: 7, 101, dead_or_set: 102, 296
insn=250, live_throughout: 7, 101, dead_or_set: 102, 103
insn=251, live_throughout: 7, 101, 103, dead_or_set: 300
insn=252, live_throughout: 7, 101, 103, dead_or_set: 300
insn=253, live_throughout: 7, 101, 103, dead_or_set: 301
insn=254, live_throughout: 7, 101, 103, dead_or_set: 301
insn=255, live_throughout: 7, 101, 103, dead_or_set: 302
insn=256, live_throughout: 7, 101, 103, dead_or_set: 302
insn=257, live_throughout: 7, 101, 103, dead_or_set: 303
insn=258, live_throughout: 7, 101, 103, dead_or_set: 303
insn=259, live_throughout: 7, 101, 103, dead_or_set: 304
insn=260, live_throughout: 7, 101, 103, dead_or_set: 304
insn=261, live_throughout: 7, 103, dead_or_set: 101, 305
insn=262, live_throughout: 7, dead_or_set: 103, 305
insn=263, live_throughout: 7, dead_or_set: 306
insn=264, live_throughout: 7, dead_or_set: 306
insn=265, live_throughout: 7, dead_or_set: 0
insn=266, live_throughout: 7, dead_or_set: 0, 104
insn=267, live_throughout: 7, 104, dead_or_set: 307
insn=268, live_throughout: 7, dead_or_set: 104, 307
insn=269, live_throughout: 7, dead_or_set: 308
insn=270, live_throughout: 7, dead_or_set: 105, 308
insn=271, live_throughout: 7, dead_or_set: 105, 106
insn=272, live_throughout: 7, dead_or_set: 106
insn=273, live_throughout: 7, dead_or_set: 309
insn=274, live_throughout: 7, dead_or_set: 309
insn=275, live_throughout: 7, dead_or_set: 0
insn=276, live_throughout: 7, dead_or_set: 107
insn=283, live_throughout: 7, 107, dead_or_set: 310
insn=277, live_throughout: 7, 107, 310, dead_or_set: 314
insn=278, live_throughout: 7, 107, 314, dead_or_set: 310, 313
insn=279, live_throughout: 7, 107, 313, 314, dead_or_set: 315
insn=280, live_throughout: 7, 107, dead_or_set: 311, 313, 314, 315
insn=281, live_throughout: 7, 107, dead_or_set: 311, 312
insn=282, live_throughout: 7, 107, dead_or_set: 108, 312
insn=284, live_throughout: 7, 107, dead_or_set: 108, 109
insn=285, live_throughout: 7, 107, 109, dead_or_set: 316
insn=286, live_throughout: 7, 107, 109, dead_or_set: 316
insn=287, live_throughout: 7, 107, 109, dead_or_set: 317
insn=288, live_throughout: 7, 107, 109, dead_or_set: 317
insn=289, live_throughout: 7, 107, 109, dead_or_set: 318
insn=290, live_throughout: 7, 107, 109, dead_or_set: 318
insn=291, live_throughout: 7, 107, 109, dead_or_set: 319
insn=292, live_throughout: 7, 107, 109, dead_or_set: 319
insn=293, live_throughout: 7, 107, 109, dead_or_set: 320
insn=294, live_throughout: 7, 107, 109, dead_or_set: 320
insn=295, live_throughout: 7, 109, dead_or_set: 107, 321
insn=296, live_throughout: 7, dead_or_set: 109, 321
insn=297, live_throughout: 7, dead_or_set: 322
insn=298, live_throughout: 7, dead_or_set: 322
insn=299, live_throughout: 7, dead_or_set: 0
insn=300, live_throughout: 7, dead_or_set: 0, 110
insn=301, live_throughout: 7, 110, dead_or_set: 323
insn=302, live_throughout: 7, dead_or_set: 110, 323
insn=303, live_throughout: 7, dead_or_set: 324
insn=304, live_throughout: 7, dead_or_set: 111, 324
insn=305, live_throughout: 7, dead_or_set: 111, 112
insn=306, live_throughout: 7, dead_or_set: 112
insn=307, live_throughout: 7, dead_or_set: 325
insn=308, live_throughout: 7, dead_or_set: 325
insn=309, live_throughout: 7, dead_or_set: 0
insn=310, live_throughout: 7, dead_or_set: 113
insn=317, live_throughout: 7, 113, dead_or_set: 326
insn=311, live_throughout: 7, 113, 326, dead_or_set: 330
insn=312, live_throughout: 7, 113, 330, dead_or_set: 326, 329
insn=313, live_throughout: 7, 113, 329, 330, dead_or_set: 331
insn=314, live_throughout: 7, 113, dead_or_set: 327, 329, 330, 331
insn=315, live_throughout: 7, 113, dead_or_set: 327, 328
insn=316, live_throughout: 7, 113, dead_or_set: 114, 328
insn=318, live_throughout: 7, 113, dead_or_set: 114, 115
insn=319, live_throughout: 7, 113, 115, dead_or_set: 332
insn=320, live_throughout: 7, 113, 115, dead_or_set: 332
insn=321, live_throughout: 7, 113, 115, dead_or_set: 333
insn=322, live_throughout: 7, 113, 115, dead_or_set: 333
insn=323, live_throughout: 7, 113, 115, dead_or_set: 334
insn=324, live_throughout: 7, 113, 115, dead_or_set: 334
insn=325, live_throughout: 7, 113, 115, dead_or_set: 335
insn=326, live_throughout: 7, 113, 115, dead_or_set: 335
insn=327, live_throughout: 7, 113, 115, dead_or_set: 336
insn=328, live_throughout: 7, 113, 115, dead_or_set: 336
insn=329, live_throughout: 7, 113, 115, dead_or_set: 337
insn=330, live_throughout: 7, 113, 115, dead_or_set: 337
insn=331, live_throughout: 7, 115, dead_or_set: 113, 338
insn=332, live_throughout: 7, dead_or_set: 115, 338
insn=333, live_throughout: 7, dead_or_set: 339
insn=334, live_throughout: 7, dead_or_set: 339
insn=335, live_throughout: 7, dead_or_set: 0
insn=336, live_throughout: 7, dead_or_set: 0, 116
insn=337, live_throughout: 7, 116, dead_or_set: 340
insn=338, live_throughout: 7, dead_or_set: 116, 340
insn=339, live_throughout: 7, dead_or_set: 341
insn=340, live_throughout: 7, dead_or_set: 117, 341
insn=341, live_throughout: 7, dead_or_set: 117, 118
insn=342, live_throughout: 7, dead_or_set: 118
insn=343, live_throughout: 7, dead_or_set: 342
insn=344, live_throughout: 7, dead_or_set: 342
insn=345, live_throughout: 7, dead_or_set: 0
insn=346, live_throughout: 7, dead_or_set: 119
insn=353, live_throughout: 7, 119, dead_or_set: 343
insn=347, live_throughout: 7, 119, 343, dead_or_set: 347
insn=348, live_throughout: 7, 119, 347, dead_or_set: 343, 346
insn=349, live_throughout: 7, 119, 346, 347, dead_or_set: 348
insn=350, live_throughout: 7, 119, dead_or_set: 344, 346, 347, 348
insn=351, live_throughout: 7, 119, dead_or_set: 344, 345
insn=352, live_throughout: 7, 119, dead_or_set: 120, 345
insn=354, live_throughout: 7, 119, dead_or_set: 120, 121
insn=355, live_throughout: 7, 119, 121, dead_or_set: 349
insn=356, live_throughout: 7, 119, 121, dead_or_set: 349
insn=357, live_throughout: 7, 119, 121, dead_or_set: 350
insn=358, live_throughout: 7, 119, 121, dead_or_set: 350
insn=359, live_throughout: 7, 119, 121, dead_or_set: 351
insn=360, live_throughout: 7, 119, 121, dead_or_set: 351
insn=361, live_throughout: 7, 119, 121, dead_or_set: 352
insn=362, live_throughout: 7, 119, 121, dead_or_set: 352
insn=363, live_throughout: 7, 119, 121, dead_or_set: 353
insn=364, live_throughout: 7, 119, 121, dead_or_set: 353
insn=365, live_throughout: 7, 121, dead_or_set: 119, 354
insn=366, live_throughout: 7, dead_or_set: 121, 354
insn=367, live_throughout: 7, dead_or_set: 355
insn=368, live_throughout: 7, dead_or_set: 355
insn=369, live_throughout: 7, dead_or_set: 0
insn=370, live_throughout: 7, dead_or_set: 0, 122
insn=371, live_throughout: 7, 122, dead_or_set: 356
insn=372, live_throughout: 7, dead_or_set: 122, 356
insn=373, live_throughout: 7, dead_or_set: 357
insn=374, live_throughout: 7, dead_or_set: 123, 357
insn=375, live_throughout: 7, dead_or_set: 123, 124
insn=376, live_throughout: 7, dead_or_set: 124
insn=377, live_throughout: 7, dead_or_set: 358
insn=378, live_throughout: 7, dead_or_set: 358
insn=379, live_throughout: 7, dead_or_set: 0
insn=380, live_throughout: 7, dead_or_set: 125
insn=387, live_throughout: 7, 125, dead_or_set: 359
insn=381, live_throughout: 7, 125, 359, dead_or_set: 363
insn=382, live_throughout: 7, 125, 363, dead_or_set: 359, 362
insn=383, live_throughout: 7, 125, 362, 363, dead_or_set: 364
insn=384, live_throughout: 7, 125, dead_or_set: 360, 362, 363, 364
insn=385, live_throughout: 7, 125, dead_or_set: 360, 361
insn=386, live_throughout: 7, 125, dead_or_set: 126, 361
insn=388, live_throughout: 7, 125, dead_or_set: 126, 127
insn=389, live_throughout: 7, 125, 127, dead_or_set: 365
insn=390, live_throughout: 7, 125, 127, dead_or_set: 365
insn=391, live_throughout: 7, 125, 127, dead_or_set: 366
insn=392, live_throughout: 7, 125, 127, dead_or_set: 366
insn=393, live_throughout: 7, 125, 127, dead_or_set: 367
insn=394, live_throughout: 7, 125, 127, dead_or_set: 367
insn=395, live_throughout: 7, 125, 127, dead_or_set: 368
insn=396, live_throughout: 7, 125, 127, dead_or_set: 368
insn=397, live_throughout: 7, 127, dead_or_set: 125, 369
insn=398, live_throughout: 7, dead_or_set: 127, 369
insn=399, live_throughout: 7, dead_or_set: 370
insn=400, live_throughout: 7, dead_or_set: 370
insn=401, live_throughout: 7, dead_or_set: 0
insn=402, live_throughout: 7, dead_or_set: 0, 128
insn=403, live_throughout: 7, 128, dead_or_set: 371
insn=404, live_throughout: 7, dead_or_set: 128, 371
insn=405, live_throughout: 7, dead_or_set: 372
insn=406, live_throughout: 7, dead_or_set: 129, 372
insn=407, live_throughout: 7, dead_or_set: 129, 130
insn=408, live_throughout: 7, dead_or_set: 130
insn=409, live_throughout: 7, dead_or_set: 373
insn=410, live_throughout: 7, dead_or_set: 373
insn=411, live_throughout: 7, dead_or_set: 0
insn=412, live_throughout: 7, dead_or_set: 131
insn=419, live_throughout: 7, 131, dead_or_set: 374
insn=413, live_throughout: 7, 131, 374, dead_or_set: 378
insn=414, live_throughout: 7, 131, 378, dead_or_set: 374, 377
insn=415, live_throughout: 7, 131, 377, 378, dead_or_set: 379
insn=416, live_throughout: 7, 131, dead_or_set: 375, 377, 378, 379
insn=417, live_throughout: 7, 131, dead_or_set: 375, 376
insn=418, live_throughout: 7, 131, dead_or_set: 132, 376
insn=420, live_throughout: 7, 131, dead_or_set: 132, 133
insn=421, live_throughout: 7, 131, 133, dead_or_set: 380
insn=422, live_throughout: 7, 131, 133, dead_or_set: 380
insn=423, live_throughout: 7, 131, 133, dead_or_set: 381
insn=424, live_throughout: 7, 131, 133, dead_or_set: 381
insn=425, live_throughout: 7, 131, 133, dead_or_set: 382
insn=426, live_throughout: 7, 131, 133, dead_or_set: 382
insn=427, live_throughout: 7, 133, dead_or_set: 131, 383
insn=428, live_throughout: 7, dead_or_set: 133, 383
insn=429, live_throughout: 7, dead_or_set: 384
insn=430, live_throughout: 7, dead_or_set: 384
insn=431, live_throughout: 7, dead_or_set: 0
insn=432, live_throughout: 7, dead_or_set: 0, 134
insn=433, live_throughout: 7, 134, dead_or_set: 385
insn=434, live_throughout: 7, dead_or_set: 134, 385
insn=435, live_throughout: 7, dead_or_set: 
insn=436, live_throughout: 7, dead_or_set: 0
insn=437, live_throughout: 7, dead_or_set: 0, 386
insn=438, live_throughout: 7, dead_or_set: 386
insn=439, live_throughout: 7, dead_or_set: 
insn=781, live_throughout: 7, dead_or_set: 
insn=474, live_throughout: 7, dead_or_set: 
insn=443, live_throughout: 7, dead_or_set: 387
insn=444, live_throughout: 7, dead_or_set: 135, 387
insn=445, live_throughout: 7, dead_or_set: 135, 136
insn=446, live_throughout: 7, dead_or_set: 136
insn=447, live_throughout: 7, dead_or_set: 388
insn=448, live_throughout: 7, dead_or_set: 388
insn=449, live_throughout: 7, dead_or_set: 0
insn=450, live_throughout: 7, dead_or_set: 137
insn=451, live_throughout: 7, 137, dead_or_set: 389
insn=452, live_throughout: 7, 137, dead_or_set: 389
insn=453, live_throughout: 7, dead_or_set: 137
insn=454, live_throughout: 7, dead_or_set: 390
insn=455, live_throughout: 7, dead_or_set: 390
insn=456, live_throughout: 7, dead_or_set: 0
insn=457, live_throughout: 7, dead_or_set: 138
insn=458, live_throughout: 7, dead_or_set: 138
insn=459, live_throughout: 7, dead_or_set: 391
insn=460, live_throughout: 7, dead_or_set: 391
insn=461, live_throughout: 7, dead_or_set: 0
insn=462, live_throughout: 7, dead_or_set: 392
insn=463, live_throughout: 7, dead_or_set: 139, 392
insn=464, live_throughout: 7, 139, dead_or_set: 393
insn=465, live_throughout: 7, 139, dead_or_set: 393
insn=466, live_throughout: 7, 139, dead_or_set: 0
insn=467, live_throughout: 7, 139, dead_or_set: 0, 140
insn=468, live_throughout: 7, 139, 140, dead_or_set: 394
insn=469, live_throughout: 7, 140, 394, dead_or_set: 139, 395
insn=470, live_throughout: 7, dead_or_set: 140, 394, 395
insn=471, live_throughout: 7, dead_or_set: 
insn=472, live_throughout: 7, dead_or_set: 
insn=475, live_throughout: 7, dead_or_set: 
insn=476, live_throughout: 7, dead_or_set: 
insn=478, live_throughout: 7, dead_or_set: 396
insn=479, live_throughout: 7, dead_or_set: 396
insn=480, live_throughout: 7, dead_or_set: 397
insn=481, live_throughout: 7, dead_or_set: 397
insn=482, live_throughout: 7, dead_or_set: 398
insn=483, live_throughout: 7, dead_or_set: 398
insn=484, live_throughout: 7, dead_or_set: 399
insn=485, live_throughout: 7, dead_or_set: 399
insn=486, live_throughout: 7, dead_or_set: 400
insn=487, live_throughout: 7, dead_or_set: 400
insn=488, live_throughout: 7, dead_or_set: 401
insn=489, live_throughout: 7, dead_or_set: 401
insn=490, live_throughout: 7, dead_or_set: 402
insn=491, live_throughout: 7, dead_or_set: 402
insn=492, live_throughout: 7, dead_or_set: 403
insn=493, live_throughout: 7, dead_or_set: 403
insn=494, live_throughout: 7, dead_or_set: 
insn=783, live_throughout: 7, dead_or_set: 
insn=639, live_throughout: 7, dead_or_set: 
insn=498, live_throughout: 7, dead_or_set: 404
insn=499, live_throughout: 7, dead_or_set: 141, 404
insn=500, live_throughout: 7, 141, dead_or_set: 405
insn=501, live_throughout: 7, 405, dead_or_set: 141, 406
insn=502, live_throughout: 7, dead_or_set: 142, 405, 406
insn=503, live_throughout: 7, 142, dead_or_set: 407
insn=504, live_throughout: 7, 142, 407, dead_or_set: 409
insn=505, live_throughout: 7, 142, 407, dead_or_set: 408, 409
insn=506, live_throughout: 7, dead_or_set: 142, 407, 408
insn=507, live_throughout: 7, dead_or_set: 
insn=508, live_throughout: 7, dead_or_set: 
insn=510, live_throughout: 7, dead_or_set: 410
insn=511, live_throughout: 7, dead_or_set: 143, 410
insn=512, live_throughout: 7, 143, dead_or_set: 411
insn=513, live_throughout: 7, 411, dead_or_set: 143, 412
insn=514, live_throughout: 7, dead_or_set: 144, 411, 412
insn=515, live_throughout: 7, dead_or_set: 144, 145
insn=516, live_throughout: 7, dead_or_set: 145, 146
insn=517, live_throughout: 7, dead_or_set: 146, 147
insn=518, live_throughout: 7, 147, dead_or_set: 413
insn=519, live_throughout: 7, 147, 413, dead_or_set: 415
insn=520, live_throughout: 7, 147, 413, dead_or_set: 414, 415
insn=521, live_throughout: 7, dead_or_set: 147, 413, 414
insn=785, live_throughout: 7, dead_or_set: 
insn=524, live_throughout: 7, dead_or_set: 
insn=526, live_throughout: 7, dead_or_set: 
insn=527, live_throughout: 7, dead_or_set: 
insn=529, live_throughout: 7, dead_or_set: 416
insn=530, live_throughout: 7, dead_or_set: 148, 416
insn=531, live_throughout: 7, 148, dead_or_set: 417
insn=532, live_throughout: 7, 417, dead_or_set: 148, 418
insn=533, live_throughout: 7, dead_or_set: 149, 417, 418
insn=534, live_throughout: 7, dead_or_set: 149, 150
insn=535, live_throughout: 7, dead_or_set: 150, 151
insn=536, live_throughout: 7, dead_or_set: 151, 152
insn=537, live_throughout: 7, 152, dead_or_set: 419
insn=538, live_throughout: 7, 152, 419, dead_or_set: 421
insn=539, live_throughout: 7, 152, 419, dead_or_set: 420, 421
insn=540, live_throughout: 7, dead_or_set: 152, 419, 420
insn=787, live_throughout: 7, dead_or_set: 
insn=543, live_throughout: 7, dead_or_set: 
insn=545, live_throughout: 7, dead_or_set: 
insn=546, live_throughout: 7, dead_or_set: 
insn=548, live_throughout: 7, dead_or_set: 422
insn=549, live_throughout: 7, dead_or_set: 153, 422
insn=550, live_throughout: 7, 153, dead_or_set: 423
insn=551, live_throughout: 7, 423, dead_or_set: 153, 424
insn=552, live_throughout: 7, dead_or_set: 154, 423, 424
insn=553, live_throughout: 7, dead_or_set: 154, 155
insn=554, live_throughout: 7, dead_or_set: 155, 156
insn=555, live_throughout: 7, dead_or_set: 156, 157
insn=556, live_throughout: 7, 157, dead_or_set: 425
insn=557, live_throughout: 7, 157, 425, dead_or_set: 427
insn=558, live_throughout: 7, 157, 425, dead_or_set: 426, 427
insn=559, live_throughout: 7, dead_or_set: 157, 425, 426
insn=789, live_throughout: 7, dead_or_set: 
insn=562, live_throughout: 7, dead_or_set: 
insn=564, live_throughout: 7, dead_or_set: 
insn=565, live_throughout: 7, dead_or_set: 
insn=567, live_throughout: 7, dead_or_set: 428
insn=568, live_throughout: 7, dead_or_set: 158, 428
insn=569, live_throughout: 7, 158, dead_or_set: 429
insn=570, live_throughout: 7, 429, dead_or_set: 158, 430
insn=571, live_throughout: 7, dead_or_set: 159, 429, 430
insn=572, live_throughout: 7, 159, dead_or_set: 431
insn=573, live_throughout: 7, 159, 431, dead_or_set: 433
insn=574, live_throughout: 7, 159, 431, dead_or_set: 432, 433
insn=575, live_throughout: 7, dead_or_set: 159, 431, 432
insn=576, live_throughout: 7, dead_or_set: 434
insn=577, live_throughout: 7, 434, dead_or_set: 436
insn=578, live_throughout: 7, 434, dead_or_set: 435, 436
insn=579, live_throughout: 7, dead_or_set: 434, 435
insn=791, live_throughout: 7, dead_or_set: 
insn=582, live_throughout: 7, dead_or_set: 
insn=584, live_throughout: 7, dead_or_set: 
insn=585, live_throughout: 7, dead_or_set: 
insn=587, live_throughout: 7, dead_or_set: 437
insn=588, live_throughout: 7, dead_or_set: 160, 437
insn=589, live_throughout: 7, 160, dead_or_set: 438
insn=590, live_throughout: 7, 438, dead_or_set: 160, 439
insn=591, live_throughout: 7, dead_or_set: 161, 438, 439
insn=592, live_throughout: 7, dead_or_set: 161, 162
insn=593, live_throughout: 7, dead_or_set: 162, 163
insn=594, live_throughout: 7, dead_or_set: 163, 164
insn=595, live_throughout: 7, 164, dead_or_set: 440
insn=596, live_throughout: 7, 164, 440, dead_or_set: 442
insn=597, live_throughout: 7, 164, 440, dead_or_set: 441, 442
insn=598, live_throughout: 7, dead_or_set: 164, 440, 441
insn=793, live_throughout: 7, dead_or_set: 
insn=601, live_throughout: 7, dead_or_set: 
insn=603, live_throughout: 7, dead_or_set: 
insn=604, live_throughout: 7, dead_or_set: 
insn=606, live_throughout: 7, dead_or_set: 443
insn=607, live_throughout: 7, dead_or_set: 165, 443
insn=608, live_throughout: 7, 165, dead_or_set: 444
insn=609, live_throughout: 7, 444, dead_or_set: 165, 445
insn=610, live_throughout: 7, dead_or_set: 166, 444, 445
insn=611, live_throughout: 7, dead_or_set: 166, 167
insn=612, live_throughout: 7, dead_or_set: 167, 168
insn=613, live_throughout: 7, dead_or_set: 168, 169
insn=614, live_throughout: 7, 169, dead_or_set: 446
insn=615, live_throughout: 7, 169, 446, dead_or_set: 448
insn=616, live_throughout: 7, 169, 446, dead_or_set: 447, 448
insn=617, live_throughout: 7, dead_or_set: 169, 446, 447
insn=795, live_throughout: 7, dead_or_set: 
insn=620, live_throughout: 7, dead_or_set: 
insn=622, live_throughout: 7, dead_or_set: 449
insn=623, live_throughout: 7, dead_or_set: 170, 449
insn=624, live_throughout: 7, 170, dead_or_set: 450
insn=625, live_throughout: 7, 450, dead_or_set: 170, 451
insn=626, live_throughout: 7, dead_or_set: 171, 450, 451
insn=627, live_throughout: 7, dead_or_set: 171, 172
insn=628, live_throughout: 7, dead_or_set: 172, 173
insn=629, live_throughout: 7, dead_or_set: 173, 174
insn=630, live_throughout: 7, 174, dead_or_set: 452
insn=631, live_throughout: 7, 174, 452, dead_or_set: 454
insn=632, live_throughout: 7, 174, 452, dead_or_set: 453, 454
insn=633, live_throughout: 7, dead_or_set: 174, 452, 453
insn=634, live_throughout: 7, dead_or_set: 
insn=636, live_throughout: 7, dead_or_set: 
insn=637, live_throughout: 7, dead_or_set: 
insn=640, live_throughout: 7, dead_or_set: 
insn=641, live_throughout: 7, dead_or_set: 
insn=643, live_throughout: 7, dead_or_set: 455
insn=644, live_throughout: 7, dead_or_set: 455
insn=645, live_throughout: 7, dead_or_set: 456
insn=646, live_throughout: 7, dead_or_set: 456
insn=647, live_throughout: 7, dead_or_set: 457
insn=648, live_throughout: 7, dead_or_set: 457
insn=649, live_throughout: 7, dead_or_set: 458
insn=650, live_throughout: 7, dead_or_set: 458
insn=651, live_throughout: 7, dead_or_set: 459
insn=652, live_throughout: 7, dead_or_set: 459
insn=653, live_throughout: 7, dead_or_set: 460
insn=654, live_throughout: 7, dead_or_set: 460
insn=655, live_throughout: 7, dead_or_set: 461
insn=656, live_throughout: 7, dead_or_set: 461
insn=657, live_throughout: 7, dead_or_set: 462
insn=658, live_throughout: 7, dead_or_set: 462
insn=659, live_throughout: 7, dead_or_set: 463
insn=660, live_throughout: 7, dead_or_set: 175, 463
insn=661, live_throughout: 7, 175, dead_or_set: 464
insn=662, live_throughout: 7, 175, dead_or_set: 176, 464
insn=663, live_throughout: 7, 175, 176, dead_or_set: 
insn=664, live_throughout: 7, 175, 176, dead_or_set: 
insn=665, live_throughout: 7, 176, dead_or_set: 175
insn=666, live_throughout: 7, dead_or_set: 176
insn=667, live_throughout: 7, dead_or_set: 0
insn=668, live_throughout: 7, dead_or_set: 0, 177
insn=669, live_throughout: 7, 177, dead_or_set: 465
insn=670, live_throughout: 7, dead_or_set: 177, 465
insn=671, live_throughout: 7, dead_or_set: 466
insn=672, live_throughout: 7, dead_or_set: 178, 466
insn=673, live_throughout: 7, dead_or_set: 178
insn=674, live_throughout: 7, dead_or_set: 
insn=676, live_throughout: 7, dead_or_set: 0
insn=677, live_throughout: 7, dead_or_set: 0, 179
insn=678, live_throughout: 7, 179, dead_or_set: 180
insn=679, live_throughout: 7, 179, 180, dead_or_set: 181
insn=680, live_throughout: 7, 179, 180, dead_or_set: 181, 182
insn=681, live_throughout: 7, 180, 182, dead_or_set: 179
insn=682, live_throughout: 7, 182, dead_or_set: 180
insn=683, live_throughout: 7, dead_or_set: 182
insn=684, live_throughout: 7, dead_or_set: 0
insn=685, live_throughout: 7, dead_or_set: 467
insn=686, live_throughout: 7, dead_or_set: 467
insn=687, live_throughout: 7, dead_or_set: 
insn=688, live_throughout: 7, dead_or_set: 468
insn=689, live_throughout: 7, dead_or_set: 468
insn=690, live_throughout: 7, dead_or_set: 
insn=691, live_throughout: 7, dead_or_set: 
insn=692, live_throughout: 7, dead_or_set: 
insn=694, live_throughout: 7, dead_or_set: 
insn=696, live_throughout: 7, dead_or_set: 
insn=697, live_throughout: 7, dead_or_set: 
insn=698, live_throughout: 7, dead_or_set: 
insn=699, live_throughout: 7, dead_or_set: 0
insn=700, live_throughout: 7, dead_or_set: 0, 183
insn=701, live_throughout: 7, dead_or_set: 183
insn=702, live_throughout: 7, dead_or_set: 
insn=704, live_throughout: 7, dead_or_set: 0
insn=705, live_throughout: 7, dead_or_set: 0, 184
insn=706, live_throughout: 7, 184, dead_or_set: 185
insn=707, live_throughout: 7, 184, 185, dead_or_set: 186
insn=708, live_throughout: 7, 184, 185, dead_or_set: 186, 187
insn=709, live_throughout: 7, 185, 187, dead_or_set: 184
insn=710, live_throughout: 7, 187, dead_or_set: 185
insn=711, live_throughout: 7, dead_or_set: 187
insn=712, live_throughout: 7, dead_or_set: 0
insn=713, live_throughout: 7, dead_or_set: 469
insn=714, live_throughout: 7, dead_or_set: 469
insn=715, live_throughout: 7, dead_or_set: 
insn=716, live_throughout: 7, dead_or_set: 470
insn=717, live_throughout: 7, dead_or_set: 470
insn=718, live_throughout: 7, dead_or_set: 
insn=719, live_throughout: 7, dead_or_set: 
insn=720, live_throughout: 7, dead_or_set: 
insn=722, live_throughout: 7, dead_or_set: 
insn=724, live_throughout: 7, dead_or_set: 471
insn=725, live_throughout: 7, dead_or_set: 188, 471
insn=726, live_throughout: 7, dead_or_set: 188, 189
insn=727, live_throughout: 7, dead_or_set: 189
insn=728, live_throughout: 7, dead_or_set: 472
insn=729, live_throughout: 7, dead_or_set: 472
insn=730, live_throughout: 7, dead_or_set: 0
insn=731, live_throughout: 7, dead_or_set: 190
insn=738, live_throughout: 7, 190, dead_or_set: 473
insn=732, live_throughout: 7, 190, 473, dead_or_set: 477
insn=733, live_throughout: 7, 190, 477, dead_or_set: 473, 476
insn=734, live_throughout: 7, 190, 476, 477, dead_or_set: 478
insn=735, live_throughout: 7, 190, dead_or_set: 474, 476, 477, 478
insn=736, live_throughout: 7, 190, dead_or_set: 474, 475
insn=737, live_throughout: 7, 190, dead_or_set: 191, 475
insn=739, live_throughout: 7, 190, dead_or_set: 191, 192
insn=740, live_throughout: 7, 190, 192, dead_or_set: 479
insn=741, live_throughout: 7, 190, 192, dead_or_set: 479
insn=742, live_throughout: 7, 190, 192, dead_or_set: 480
insn=743, live_throughout: 7, 190, 192, dead_or_set: 480
insn=744, live_throughout: 7, 192, dead_or_set: 190, 481
insn=745, live_throughout: 7, dead_or_set: 192, 481
insn=746, live_throughout: 7, dead_or_set: 
insn=747, live_throughout: 7, dead_or_set: 482
insn=748, live_throughout: 7, dead_or_set: 482
insn=749, live_throughout: 7, dead_or_set: 0
insn=750, live_throughout: 7, dead_or_set: 0, 193
insn=751, live_throughout: 7, 193, dead_or_set: 483
insn=752, live_throughout: 7, dead_or_set: 193, 483
insn=753, live_throughout: 7, dead_or_set: 
insn=754, live_throughout: 7, dead_or_set: 0
insn=755, live_throughout: 7, dead_or_set: 0, 484
insn=756, live_throughout: 7, dead_or_set: 194, 484
insn=757, live_throughout: 7, 194, dead_or_set: 485
insn=758, live_throughout: 7, dead_or_set: 194, 485
insn=759, live_throughout: 7, dead_or_set: 
insn=760, live_throughout: 7, dead_or_set: 0
insn=761, live_throughout: 7, dead_or_set: 0, 486
insn=762, live_throughout: 7, dead_or_set: 195, 486
insn=763, live_throughout: 7, 195, dead_or_set: 487
insn=764, live_throughout: 7, dead_or_set: 195, 487
insn=765, live_throughout: 7, dead_or_set: 488
insn=766, live_throughout: 7, dead_or_set: 488
insn=767, live_throughout: 7, dead_or_set: 489
insn=768, live_throughout: 7, dead_or_set: 489
insn=769, live_throughout: 7, dead_or_set: 490
insn=770, live_throughout: 7, dead_or_set: 490
insn=771, live_throughout: 7, dead_or_set: 491
insn=772, live_throughout: 7, dead_or_set: 491
insn=773, live_throughout: 7, dead_or_set: 492
insn=774, live_throughout: 7, dead_or_set: 492
insn=775, live_throughout: 7, dead_or_set: 
insn=776, live_throughout: 7, dead_or_set: 493
insn=777, live_throughout: 7, dead_or_set: 493
insn=778, live_throughout: 7, dead_or_set: 
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 17
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 58
changing reg in insn 56
changing reg in insn 54
changing reg in insn 51
changing reg in insn 53
changing reg in insn 53
changing reg in insn 59
changing reg in insn 57
changing reg in insn 55
changing reg in insn 63
changing reg in insn 65
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 74
changing reg in insn 91
changing reg in insn 89
changing reg in insn 87
changing reg in insn 85
changing reg in insn 83
changing reg in insn 80
changing reg in insn 82
changing reg in insn 82
changing reg in insn 92
changing reg in insn 90
changing reg in insn 88
changing reg in insn 86
changing reg in insn 84
changing reg in insn 96
changing reg in insn 98
changing reg in insn 104
changing reg in insn 105
changing reg in insn 105
changing reg in insn 106
changing reg in insn 110
changing reg in insn 125
changing reg in insn 123
changing reg in insn 121
changing reg in insn 119
changing reg in insn 116
changing reg in insn 118
changing reg in insn 118
changing reg in insn 126
changing reg in insn 124
changing reg in insn 122
changing reg in insn 120
changing reg in insn 130
changing reg in insn 132
changing reg in insn 138
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 161
changing reg in insn 159
changing reg in insn 157
changing reg in insn 155
changing reg in insn 153
changing reg in insn 150
changing reg in insn 152
changing reg in insn 152
changing reg in insn 162
changing reg in insn 160
changing reg in insn 158
changing reg in insn 156
changing reg in insn 154
changing reg in insn 166
changing reg in insn 168
changing reg in insn 170
changing reg in insn 171
changing reg in insn 171
changing reg in insn 172
changing reg in insn 176
changing reg in insn 193
changing reg in insn 191
changing reg in insn 189
changing reg in insn 187
changing reg in insn 185
changing reg in insn 182
changing reg in insn 184
changing reg in insn 184
changing reg in insn 194
changing reg in insn 192
changing reg in insn 190
changing reg in insn 188
changing reg in insn 186
changing reg in insn 198
changing reg in insn 200
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 208
changing reg in insn 227
changing reg in insn 225
changing reg in insn 223
changing reg in insn 221
changing reg in insn 219
changing reg in insn 217
changing reg in insn 214
changing reg in insn 216
changing reg in insn 216
changing reg in insn 228
changing reg in insn 226
changing reg in insn 224
changing reg in insn 222
changing reg in insn 220
changing reg in insn 218
changing reg in insn 232
changing reg in insn 234
changing reg in insn 236
changing reg in insn 237
changing reg in insn 237
changing reg in insn 238
changing reg in insn 242
changing reg in insn 261
changing reg in insn 259
changing reg in insn 257
changing reg in insn 255
changing reg in insn 253
changing reg in insn 251
changing reg in insn 248
changing reg in insn 250
changing reg in insn 250
changing reg in insn 262
changing reg in insn 260
changing reg in insn 258
changing reg in insn 256
changing reg in insn 254
changing reg in insn 252
changing reg in insn 266
changing reg in insn 268
changing reg in insn 270
changing reg in insn 271
changing reg in insn 271
changing reg in insn 272
changing reg in insn 276
changing reg in insn 295
changing reg in insn 293
changing reg in insn 291
changing reg in insn 289
changing reg in insn 287
changing reg in insn 285
changing reg in insn 282
changing reg in insn 284
changing reg in insn 284
changing reg in insn 296
changing reg in insn 294
changing reg in insn 292
changing reg in insn 290
changing reg in insn 288
changing reg in insn 286
changing reg in insn 300
changing reg in insn 302
changing reg in insn 304
changing reg in insn 305
changing reg in insn 305
changing reg in insn 306
changing reg in insn 310
changing reg in insn 331
changing reg in insn 329
changing reg in insn 327
changing reg in insn 325
changing reg in insn 323
changing reg in insn 321
changing reg in insn 319
changing reg in insn 316
changing reg in insn 318
changing reg in insn 318
changing reg in insn 332
changing reg in insn 330
changing reg in insn 328
changing reg in insn 326
changing reg in insn 324
changing reg in insn 322
changing reg in insn 320
changing reg in insn 336
changing reg in insn 338
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 346
changing reg in insn 365
changing reg in insn 363
changing reg in insn 361
changing reg in insn 359
changing reg in insn 357
changing reg in insn 355
changing reg in insn 352
changing reg in insn 354
changing reg in insn 354
changing reg in insn 366
changing reg in insn 364
changing reg in insn 362
changing reg in insn 360
changing reg in insn 358
changing reg in insn 356
changing reg in insn 370
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 375
changing reg in insn 376
changing reg in insn 380
changing reg in insn 397
changing reg in insn 395
changing reg in insn 393
changing reg in insn 391
changing reg in insn 389
changing reg in insn 386
changing reg in insn 388
changing reg in insn 388
changing reg in insn 398
changing reg in insn 396
changing reg in insn 394
changing reg in insn 392
changing reg in insn 390
changing reg in insn 402
changing reg in insn 404
changing reg in insn 406
changing reg in insn 407
changing reg in insn 407
changing reg in insn 408
changing reg in insn 412
changing reg in insn 427
changing reg in insn 425
changing reg in insn 423
changing reg in insn 421
changing reg in insn 418
changing reg in insn 420
changing reg in insn 420
changing reg in insn 428
changing reg in insn 426
changing reg in insn 424
changing reg in insn 422
changing reg in insn 432
changing reg in insn 434
changing reg in insn 444
changing reg in insn 445
changing reg in insn 445
changing reg in insn 446
changing reg in insn 450
changing reg in insn 453
changing reg in insn 457
changing reg in insn 458
changing reg in insn 463
changing reg in insn 469
changing reg in insn 467
changing reg in insn 470
changing reg in insn 499
changing reg in insn 501
changing reg in insn 502
changing reg in insn 506
changing reg in insn 511
changing reg in insn 513
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 516
changing reg in insn 516
changing reg in insn 517
changing reg in insn 517
changing reg in insn 521
changing reg in insn 530
changing reg in insn 532
changing reg in insn 533
changing reg in insn 534
changing reg in insn 534
changing reg in insn 535
changing reg in insn 535
changing reg in insn 536
changing reg in insn 536
changing reg in insn 540
changing reg in insn 549
changing reg in insn 551
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 554
changing reg in insn 554
changing reg in insn 555
changing reg in insn 555
changing reg in insn 559
changing reg in insn 568
changing reg in insn 570
changing reg in insn 571
changing reg in insn 575
changing reg in insn 588
changing reg in insn 590
changing reg in insn 591
changing reg in insn 592
changing reg in insn 592
changing reg in insn 593
changing reg in insn 593
changing reg in insn 594
changing reg in insn 594
changing reg in insn 598
changing reg in insn 607
changing reg in insn 609
changing reg in insn 610
changing reg in insn 611
changing reg in insn 611
changing reg in insn 612
changing reg in insn 612
changing reg in insn 613
changing reg in insn 613
changing reg in insn 617
changing reg in insn 623
changing reg in insn 625
changing reg in insn 626
changing reg in insn 627
changing reg in insn 627
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 629
changing reg in insn 633
changing reg in insn 660
changing reg in insn 665
changing reg in insn 662
changing reg in insn 666
changing reg in insn 668
changing reg in insn 670
changing reg in insn 672
changing reg in insn 673
changing reg in insn 677
changing reg in insn 681
changing reg in insn 678
changing reg in insn 682
changing reg in insn 679
changing reg in insn 680
changing reg in insn 680
changing reg in insn 683
changing reg in insn 700
changing reg in insn 701
changing reg in insn 705
changing reg in insn 709
changing reg in insn 706
changing reg in insn 710
changing reg in insn 707
changing reg in insn 708
changing reg in insn 708
changing reg in insn 711
changing reg in insn 725
changing reg in insn 726
changing reg in insn 726
changing reg in insn 727
changing reg in insn 731
changing reg in insn 744
changing reg in insn 742
changing reg in insn 740
changing reg in insn 737
changing reg in insn 739
changing reg in insn 739
changing reg in insn 745
changing reg in insn 743
changing reg in insn 741
changing reg in insn 750
changing reg in insn 752
changing reg in insn 756
changing reg in insn 758
changing reg in insn 762
changing reg in insn 764
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 23
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 52
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 51
changing reg in insn 49
changing reg in insn 47
changing reg in insn 49
changing reg in insn 46
changing reg in insn 49
changing reg in insn 48
changing reg in insn 49
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 81
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 80
changing reg in insn 78
changing reg in insn 76
changing reg in insn 78
changing reg in insn 75
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 91
changing reg in insn 92
changing reg in insn 93
changing reg in insn 94
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 107
changing reg in insn 108
changing reg in insn 117
changing reg in insn 112
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 114
changing reg in insn 112
changing reg in insn 114
changing reg in insn 111
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 119
changing reg in insn 120
changing reg in insn 121
changing reg in insn 122
changing reg in insn 123
changing reg in insn 124
changing reg in insn 125
changing reg in insn 126
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 138
changing reg in insn 141
changing reg in insn 142
changing reg in insn 151
changing reg in insn 146
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 150
changing reg in insn 148
changing reg in insn 146
changing reg in insn 148
changing reg in insn 145
changing reg in insn 148
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 157
changing reg in insn 158
changing reg in insn 159
changing reg in insn 160
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 183
changing reg in insn 178
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 182
changing reg in insn 180
changing reg in insn 178
changing reg in insn 180
changing reg in insn 177
changing reg in insn 180
changing reg in insn 179
changing reg in insn 180
changing reg in insn 185
changing reg in insn 186
changing reg in insn 187
changing reg in insn 188
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 192
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 199
changing reg in insn 200
changing reg in insn 201
changing reg in insn 202
changing reg in insn 205
changing reg in insn 206
changing reg in insn 215
changing reg in insn 210
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 214
changing reg in insn 212
changing reg in insn 210
changing reg in insn 212
changing reg in insn 209
changing reg in insn 212
changing reg in insn 211
changing reg in insn 212
changing reg in insn 217
changing reg in insn 218
changing reg in insn 219
changing reg in insn 220
changing reg in insn 221
changing reg in insn 222
changing reg in insn 223
changing reg in insn 224
changing reg in insn 225
changing reg in insn 226
changing reg in insn 227
changing reg in insn 228
changing reg in insn 229
changing reg in insn 230
changing reg in insn 233
changing reg in insn 234
changing reg in insn 235
changing reg in insn 236
changing reg in insn 239
changing reg in insn 240
changing reg in insn 249
changing reg in insn 244
changing reg in insn 246
changing reg in insn 247
changing reg in insn 247
changing reg in insn 248
changing reg in insn 246
changing reg in insn 244
changing reg in insn 246
changing reg in insn 243
changing reg in insn 246
changing reg in insn 245
changing reg in insn 246
changing reg in insn 251
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 256
changing reg in insn 257
changing reg in insn 258
changing reg in insn 259
changing reg in insn 260
changing reg in insn 261
changing reg in insn 262
changing reg in insn 263
changing reg in insn 264
changing reg in insn 267
changing reg in insn 268
changing reg in insn 269
changing reg in insn 270
changing reg in insn 273
changing reg in insn 274
changing reg in insn 283
changing reg in insn 278
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 282
changing reg in insn 280
changing reg in insn 278
changing reg in insn 280
changing reg in insn 277
changing reg in insn 280
changing reg in insn 279
changing reg in insn 280
changing reg in insn 285
changing reg in insn 286
changing reg in insn 287
changing reg in insn 288
changing reg in insn 289
changing reg in insn 290
changing reg in insn 291
changing reg in insn 292
changing reg in insn 293
changing reg in insn 294
changing reg in insn 295
changing reg in insn 296
changing reg in insn 297
changing reg in insn 298
changing reg in insn 301
changing reg in insn 302
changing reg in insn 303
changing reg in insn 304
changing reg in insn 307
changing reg in insn 308
changing reg in insn 317
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 315
changing reg in insn 316
changing reg in insn 314
changing reg in insn 312
changing reg in insn 314
changing reg in insn 311
changing reg in insn 314
changing reg in insn 313
changing reg in insn 314
changing reg in insn 319
changing reg in insn 320
changing reg in insn 321
changing reg in insn 322
changing reg in insn 323
changing reg in insn 324
changing reg in insn 325
changing reg in insn 326
changing reg in insn 327
changing reg in insn 328
changing reg in insn 329
changing reg in insn 330
changing reg in insn 331
changing reg in insn 332
changing reg in insn 333
changing reg in insn 334
changing reg in insn 337
changing reg in insn 338
changing reg in insn 339
changing reg in insn 340
changing reg in insn 343
changing reg in insn 344
changing reg in insn 353
changing reg in insn 348
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 352
changing reg in insn 350
changing reg in insn 348
changing reg in insn 350
changing reg in insn 347
changing reg in insn 350
changing reg in insn 349
changing reg in insn 350
changing reg in insn 355
changing reg in insn 356
changing reg in insn 357
changing reg in insn 358
changing reg in insn 359
changing reg in insn 360
changing reg in insn 361
changing reg in insn 362
changing reg in insn 363
changing reg in insn 364
changing reg in insn 365
changing reg in insn 366
changing reg in insn 367
changing reg in insn 368
changing reg in insn 371
changing reg in insn 372
changing reg in insn 373
changing reg in insn 374
changing reg in insn 377
changing reg in insn 378
changing reg in insn 387
changing reg in insn 382
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 384
changing reg in insn 382
changing reg in insn 384
changing reg in insn 381
changing reg in insn 384
changing reg in insn 383
changing reg in insn 384
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 392
changing reg in insn 393
changing reg in insn 394
changing reg in insn 395
changing reg in insn 396
changing reg in insn 397
changing reg in insn 398
changing reg in insn 399
changing reg in insn 400
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 406
changing reg in insn 409
changing reg in insn 410
changing reg in insn 419
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 417
changing reg in insn 418
changing reg in insn 416
changing reg in insn 414
changing reg in insn 416
changing reg in insn 413
changing reg in insn 416
changing reg in insn 415
changing reg in insn 416
changing reg in insn 421
changing reg in insn 422
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 433
changing reg in insn 434
changing reg in insn 437
changing reg in insn 438
changing reg in insn 443
changing reg in insn 444
changing reg in insn 447
changing reg in insn 448
changing reg in insn 451
changing reg in insn 452
changing reg in insn 454
changing reg in insn 455
changing reg in insn 459
changing reg in insn 460
changing reg in insn 462
changing reg in insn 463
changing reg in insn 464
changing reg in insn 465
changing reg in insn 468
changing reg in insn 470
changing reg in insn 469
changing reg in insn 470
changing reg in insn 478
changing reg in insn 479
changing reg in insn 480
changing reg in insn 481
changing reg in insn 482
changing reg in insn 483
changing reg in insn 484
changing reg in insn 485
changing reg in insn 486
changing reg in insn 487
changing reg in insn 488
changing reg in insn 489
changing reg in insn 490
changing reg in insn 491
changing reg in insn 492
changing reg in insn 493
changing reg in insn 498
changing reg in insn 499
changing reg in insn 500
changing reg in insn 502
changing reg in insn 501
changing reg in insn 502
changing reg in insn 503
changing reg in insn 506
changing reg in insn 505
changing reg in insn 506
changing reg in insn 504
changing reg in insn 505
changing reg in insn 510
changing reg in insn 511
changing reg in insn 512
changing reg in insn 514
changing reg in insn 513
changing reg in insn 514
changing reg in insn 518
changing reg in insn 521
changing reg in insn 520
changing reg in insn 521
changing reg in insn 519
changing reg in insn 520
changing reg in insn 529
changing reg in insn 530
changing reg in insn 531
changing reg in insn 533
changing reg in insn 532
changing reg in insn 533
changing reg in insn 537
changing reg in insn 540
changing reg in insn 539
changing reg in insn 540
changing reg in insn 538
changing reg in insn 539
changing reg in insn 548
changing reg in insn 549
changing reg in insn 550
changing reg in insn 552
changing reg in insn 551
changing reg in insn 552
changing reg in insn 556
changing reg in insn 559
changing reg in insn 558
changing reg in insn 559
changing reg in insn 557
changing reg in insn 558
changing reg in insn 567
changing reg in insn 568
changing reg in insn 569
changing reg in insn 571
changing reg in insn 570
changing reg in insn 571
changing reg in insn 572
changing reg in insn 575
changing reg in insn 574
changing reg in insn 575
changing reg in insn 573
changing reg in insn 574
changing reg in insn 576
changing reg in insn 579
changing reg in insn 578
changing reg in insn 579
changing reg in insn 577
changing reg in insn 578
changing reg in insn 587
changing reg in insn 588
changing reg in insn 589
changing reg in insn 591
changing reg in insn 590
changing reg in insn 591
changing reg in insn 595
changing reg in insn 598
changing reg in insn 597
changing reg in insn 598
changing reg in insn 596
changing reg in insn 597
changing reg in insn 606
changing reg in insn 607
changing reg in insn 608
changing reg in insn 610
changing reg in insn 609
changing reg in insn 610
changing reg in insn 614
changing reg in insn 617
changing reg in insn 616
changing reg in insn 617
changing reg in insn 615
changing reg in insn 616
changing reg in insn 622
changing reg in insn 623
changing reg in insn 624
changing reg in insn 626
changing reg in insn 625
changing reg in insn 626
changing reg in insn 630
changing reg in insn 633
changing reg in insn 632
changing reg in insn 633
changing reg in insn 631
changing reg in insn 632
changing reg in insn 643
changing reg in insn 644
changing reg in insn 645
changing reg in insn 646
changing reg in insn 647
changing reg in insn 648
changing reg in insn 649
changing reg in insn 650
changing reg in insn 651
changing reg in insn 652
changing reg in insn 653
changing reg in insn 654
changing reg in insn 655
changing reg in insn 656
changing reg in insn 657
changing reg in insn 658
changing reg in insn 659
changing reg in insn 660
changing reg in insn 661
changing reg in insn 662
changing reg in insn 669
changing reg in insn 670
changing reg in insn 671
changing reg in insn 672
changing reg in insn 685
changing reg in insn 686
changing reg in insn 688
changing reg in insn 689
changing reg in insn 713
changing reg in insn 714
changing reg in insn 716
changing reg in insn 717
changing reg in insn 724
changing reg in insn 725
changing reg in insn 728
changing reg in insn 729
changing reg in insn 738
changing reg in insn 733
changing reg in insn 735
changing reg in insn 736
changing reg in insn 736
changing reg in insn 737
changing reg in insn 735
changing reg in insn 733
changing reg in insn 735
changing reg in insn 732
changing reg in insn 735
changing reg in insn 734
changing reg in insn 735
changing reg in insn 740
changing reg in insn 741
changing reg in insn 742
changing reg in insn 743
changing reg in insn 744
changing reg in insn 745
changing reg in insn 747
changing reg in insn 748
changing reg in insn 751
changing reg in insn 752
changing reg in insn 755
changing reg in insn 756
changing reg in insn 757
changing reg in insn 758
changing reg in insn 761
changing reg in insn 762
changing reg in insn 763
changing reg in insn 764
changing reg in insn 765
changing reg in insn 766
changing reg in insn 767
changing reg in insn 768
changing reg in insn 769
changing reg in insn 770
changing reg in insn 771
changing reg in insn 772
changing reg in insn 773
changing reg in insn 774
changing reg in insn 776
changing reg in insn 777
Spilling for insn 49.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 78.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 114.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 148.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 180.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 212.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 246.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 280.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 314.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 350.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 384.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 416.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 735.
Using reg 2 for reload 0
Using reg 5 for reload 1
changing reg in insn 46
changing reg in insn 49
 Register 207 now on stack.

changing reg in insn 75
changing reg in insn 78
 Register 219 now on stack.

changing reg in insn 111
changing reg in insn 114
 Register 236 now on stack.

changing reg in insn 145
changing reg in insn 148
 Register 252 now on stack.

changing reg in insn 177
changing reg in insn 180
 Register 267 now on stack.

changing reg in insn 209
changing reg in insn 212
 Register 282 now on stack.

changing reg in insn 243
changing reg in insn 246
 Register 298 now on stack.

changing reg in insn 277
changing reg in insn 280
 Register 314 now on stack.

changing reg in insn 311
changing reg in insn 314
 Register 330 now on stack.

changing reg in insn 347
changing reg in insn 350
 Register 347 now on stack.

changing reg in insn 381
changing reg in insn 384
 Register 363 now on stack.

changing reg in insn 413
changing reg in insn 416
 Register 378 now on stack.

changing reg in insn 732
changing reg in insn 735
 Register 477 now on stack.

Spilling for insn 49.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 78.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 114.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 148.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 180.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 212.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 246.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 280.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 314.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 350.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 384.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 416.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 735.
Using reg 2 for reload 0
Using reg 5 for reload 1

Reloads for insn # 49
Reload 0: reload_in (SI) = (reg:SI 207)
	reload_out (SI) = (reg:SI 0 ax [204])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 207)
	reload_out_reg: (reg:SI 0 ax [204])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [206])
	reload_out (SI) = (reg:SI 3 bx [206])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [206])
	reload_out_reg: (reg:SI 3 bx [206])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 78
Reload 0: reload_in (SI) = (reg:SI 219)
	reload_out (SI) = (reg:SI 0 ax [216])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 219)
	reload_out_reg: (reg:SI 0 ax [216])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [218])
	reload_out (SI) = (reg:SI 3 bx [218])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [218])
	reload_out_reg: (reg:SI 3 bx [218])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 114
Reload 0: reload_in (SI) = (reg:SI 236)
	reload_out (SI) = (reg:SI 0 ax [233])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 236)
	reload_out_reg: (reg:SI 0 ax [233])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [235])
	reload_out (SI) = (reg:SI 3 bx [235])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [235])
	reload_out_reg: (reg:SI 3 bx [235])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 148
Reload 0: reload_in (SI) = (reg:SI 252)
	reload_out (SI) = (reg:SI 0 ax [249])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 252)
	reload_out_reg: (reg:SI 0 ax [249])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [251])
	reload_out (SI) = (reg:SI 3 bx [251])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [251])
	reload_out_reg: (reg:SI 3 bx [251])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 180
Reload 0: reload_in (SI) = (reg:SI 267)
	reload_out (SI) = (reg:SI 0 ax [264])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 267)
	reload_out_reg: (reg:SI 0 ax [264])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [266])
	reload_out (SI) = (reg:SI 3 bx [266])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [266])
	reload_out_reg: (reg:SI 3 bx [266])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 212
Reload 0: reload_in (SI) = (reg:SI 282)
	reload_out (SI) = (reg:SI 0 ax [279])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 282)
	reload_out_reg: (reg:SI 0 ax [279])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [281])
	reload_out (SI) = (reg:SI 3 bx [281])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [281])
	reload_out_reg: (reg:SI 3 bx [281])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 246
Reload 0: reload_in (SI) = (reg:SI 298)
	reload_out (SI) = (reg:SI 0 ax [295])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 298)
	reload_out_reg: (reg:SI 0 ax [295])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [297])
	reload_out (SI) = (reg:SI 3 bx [297])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [297])
	reload_out_reg: (reg:SI 3 bx [297])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 280
Reload 0: reload_in (SI) = (reg:SI 314)
	reload_out (SI) = (reg:SI 0 ax [311])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 314)
	reload_out_reg: (reg:SI 0 ax [311])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [313])
	reload_out (SI) = (reg:SI 3 bx [313])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [313])
	reload_out_reg: (reg:SI 3 bx [313])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 314
Reload 0: reload_in (SI) = (reg:SI 330)
	reload_out (SI) = (reg:SI 0 ax [327])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 330)
	reload_out_reg: (reg:SI 0 ax [327])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [329])
	reload_out (SI) = (reg:SI 3 bx [329])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [329])
	reload_out_reg: (reg:SI 3 bx [329])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 350
Reload 0: reload_in (SI) = (reg:SI 347)
	reload_out (SI) = (reg:SI 0 ax [344])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 347)
	reload_out_reg: (reg:SI 0 ax [344])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [346])
	reload_out (SI) = (reg:SI 3 bx [346])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [346])
	reload_out_reg: (reg:SI 3 bx [346])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 384
Reload 0: reload_in (SI) = (reg:SI 363)
	reload_out (SI) = (reg:SI 0 ax [360])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 363)
	reload_out_reg: (reg:SI 0 ax [360])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [362])
	reload_out (SI) = (reg:SI 3 bx [362])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [362])
	reload_out_reg: (reg:SI 3 bx [362])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 416
Reload 0: reload_in (SI) = (reg:SI 378)
	reload_out (SI) = (reg:SI 0 ax [375])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 378)
	reload_out_reg: (reg:SI 0 ax [375])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [377])
	reload_out (SI) = (reg:SI 3 bx [377])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [377])
	reload_out_reg: (reg:SI 3 bx [377])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 735
Reload 0: reload_in (SI) = (reg:SI 477)
	reload_out (SI) = (reg:SI 0 ax [474])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 477)
	reload_out_reg: (reg:SI 0 ax [474])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [476])
	reload_out (SI) = (reg:SI 3 bx [476])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [476])
	reload_out_reg: (reg:SI 3 bx [476])
	reload_reg_rtx: (reg:SI 5 di)
deleting insn with uid = 7.
deleting insn with uid = 36.
deleting insn with uid = 40.
deleting insn with uid = 63.
deleting insn with uid = 69.
deleting insn with uid = 96.
deleting insn with uid = 105.
deleting insn with uid = 130.
deleting insn with uid = 139.
deleting insn with uid = 166.
deleting insn with uid = 171.
deleting insn with uid = 198.
deleting insn with uid = 203.
deleting insn with uid = 232.
deleting insn with uid = 237.
deleting insn with uid = 266.
deleting insn with uid = 271.
deleting insn with uid = 300.
deleting insn with uid = 305.
deleting insn with uid = 336.
deleting insn with uid = 341.
deleting insn with uid = 370.
deleting insn with uid = 375.
deleting insn with uid = 402.
deleting insn with uid = 407.
deleting insn with uid = 432.
deleting insn with uid = 437.
deleting insn with uid = 445.
deleting insn with uid = 467.
deleting insn with uid = 515.
deleting insn with uid = 534.
deleting insn with uid = 553.
deleting insn with uid = 592.
deleting insn with uid = 611.
deleting insn with uid = 627.
deleting insn with uid = 668.
deleting insn with uid = 677.
deleting insn with uid = 680.
deleting insn with uid = 700.
deleting insn with uid = 705.
deleting insn with uid = 708.
deleting insn with uid = 726.
deleting insn with uid = 750.
deleting insn with uid = 755.
deleting insn with uid = 761.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 95.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 129.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 165.
verify found no changes in insn with uid = 175.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 207.
verify found no changes in insn with uid = 231.
verify found no changes in insn with uid = 241.
verify found no changes in insn with uid = 265.
verify found no changes in insn with uid = 275.
verify found no changes in insn with uid = 299.
verify found no changes in insn with uid = 309.
verify found no changes in insn with uid = 335.
verify found no changes in insn with uid = 345.
verify found no changes in insn with uid = 369.
verify found no changes in insn with uid = 379.
verify found no changes in insn with uid = 401.
verify found no changes in insn with uid = 411.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 436.
verify found no changes in insn with uid = 449.
verify found no changes in insn with uid = 456.
verify found no changes in insn with uid = 461.
verify found no changes in insn with uid = 466.
verify found no changes in insn with uid = 667.
verify found no changes in insn with uid = 676.
verify found no changes in insn with uid = 684.
verify found no changes in insn with uid = 687.
verify found no changes in insn with uid = 690.
verify found no changes in insn with uid = 692.
verify found no changes in insn with uid = 698.
verify found no changes in insn with uid = 699.
verify found no changes in insn with uid = 704.
verify found no changes in insn with uid = 712.
verify found no changes in insn with uid = 715.
verify found no changes in insn with uid = 718.
verify found no changes in insn with uid = 720.
verify found no changes in insn with uid = 730.
verify found no changes in insn with uid = 749.
verify found no changes in insn with uid = 754.
verify found no changes in insn with uid = 760.
verify found no changes in insn with uid = 775.
verify found no changes in insn with uid = 778.


Display_Init

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={275d,294u} r1={129d,125u} r2={153d,97u} r3={14d,14u} r5={26d,13u} r6={1d,229u} r7={1d,164u} r8={55d} r9={55d} r10={55d} r11={55d} r12={55d} r13={55d} r14={55d} r15={55d} r17={140d,11u} r18={55d} r19={55d} r20={1d,1u,18e} r21={55d} r22={55d} r23={55d} r24={55d} r25={55d} r26={55d} r27={55d} r28={55d} r29={55d} r30={55d} r31={55d} r32={55d} r33={55d} r34={55d} r35={55d} r36={55d} r37={55d} r38={55d} r39={55d} r40={55d} r41={55d} r42={55d} r43={55d} r44={55d} r45={55d} r46={55d} r47={55d} r48={55d} r49={55d} r50={55d} r51={55d} r52={55d} 
;;    total ref usage 4016{3050d,948u,18e} in 718{663 regular + 55 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 32 [0x20])) src/gui.c:22 64 {*movsi_internal}
     (nil))

(call_insn 6 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Init") [flags 0x41]  <function_decl 0x407f0700 SDL_Init>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:22 927 {*call_value_0}
     (nil)
    (nil))

(insn 8 6 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 D.6484 ] [59])
            (const_int -1 [0xffffffffffffffff]))) src/gui.c:22 6 {*cmpsi_1}
     (nil))

(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) src/gui.c:22 591 {*jcc_1}
     (nil)
 -> 28)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 60 61 62 196 197

;; Pred edge  2 (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 (set (reg/f:SI 0 ax [orig:60 stderr.50 ] [60])
        (mem/f/c/i:SI (symbol_ref:SI ("stderr") [flags 0x40]  <var_decl 0x40711120 stderr>) [0 stderr+0 S4 A32])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 12 11 13 3 (set (reg/f:SI 1 dx [orig:61 stderr.51 ] [61])
        (reg/f:SI 0 ax [orig:60 stderr.50 ] [60])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 13 12 14 3 (set (reg/f:SI 0 ax [orig:62 D.6489 ] [62])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x408fd6c0 *.LC0>)) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 14 13 15 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:61 stderr.51 ] [61])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 15 14 16 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 33 [0x21])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 16 15 17 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(insn 17 16 18 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:62 D.6489 ] [62])) src/gui.c:24 64 {*movsi_internal}
     (nil))

(call_insn 18 17 19 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fwrite") [flags 0x41]  <function_decl 0x406b1980 __builtin_fwrite>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:24 927 {*call_value_0}
     (nil)
    (nil))

(insn 19 18 20 3 (set (reg/f:SI 0 ax [196])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:25 64 {*movsi_internal}
     (nil))

(insn 20 19 21 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [196])) src/gui.c:25 64 {*movsi_internal}
     (nil))

(call_insn 21 20 22 3 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:25 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 22 21 23 3 (set (reg/f:SI 0 ax [197])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:26 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [197])) src/gui.c:26 64 {*movsi_internal}
     (nil))

(call_insn 24 23 25 3 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:26 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 25 24 26 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:27 64 {*movsi_internal}
     (nil))

(call_insn 26 25 27 3 (call (mem:QI (symbol_ref:SI ("exit") [flags 0x41]  <function_decl 0x406bd980 exit>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:27 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;; End of basic block 3 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 27 26 28)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386

;; Pred edge  2
(code_label 28 27 29 4 2 "" [1 uses])

(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 4 (set (reg/f:SI 0 ax [198])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:31 64 {*movsi_internal}
     (nil))

(insn 31 30 32 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [198])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x408fd720 *.LC1>)) src/gui.c:31 64 {*movsi_internal}
     (nil))

(insn 32 31 33 4 (set (reg/f:SI 0 ax [199])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:34 64 {*movsi_internal}
     (nil))

(insn 33 32 34 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [199])
                (const_int 116 [0x74])) [0 display_9(D)->font_path+0 S4 A32])
        (symbol_ref/f:SI ("*.LC2") [flags 0x2]  <var_decl 0x408fd780 *.LC2>)) src/gui.c:34 64 {*movsi_internal}
     (nil))

(insn 34 33 35 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 100 [0x64])) src/gui.c:35 64 {*movsi_internal}
     (nil))

(call_insn 35 34 37 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:35 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 37 35 38 4 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])
        (reg/f:SI 0 ax [200])) src/gui.c:35 64 {*movsi_internal}
     (nil))

(insn 38 37 39 4 (set (reg/f:SI 0 ax [201])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:38 64 {*movsi_internal}
     (nil))

(insn 39 38 41 4 (set (reg/f:SI 0 ax [orig:63 D.6490 ] [63])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [201])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:38 64 {*movsi_internal}
     (nil))

(insn 41 39 42 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:64 D.6491 ] [64])) src/gui.c:38 64 {*movsi_internal}
     (nil))

(insn 42 41 43 4 (set (reg/f:SI 0 ax [202])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:38 64 {*movsi_internal}
     (nil))

(insn 43 42 44 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [202])) src/gui.c:38 64 {*movsi_internal}
     (nil))

(call_insn 44 43 45 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:38 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 45 44 52 4 (set (reg/f:SI 1 dx [orig:65 D.6492 ] [65])
        (symbol_ref/f:SI ("*.LC3") [flags 0x2]  <var_decl 0x408fd7e0 *.LC3>)) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 52 45 46 4 (set (reg:SI 0 ax [203])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 46 52 47 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 47 46 48 4 (set (reg:SI 3 bx [206])
        (reg:SI 0 ax [203])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 48 47 798 4 (set (reg:QI 0 ax [208])
        (const_int 0 [0])) src/gui.c:39 66 {*movqi_internal}
     (nil))

(insn 798 48 800 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 800 798 49 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [206])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 49 800 799 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [208])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:39 876 {*strlenqi_1}
     (nil))

(insn 799 49 50 4 (set (reg:SI 0 ax [204])
        (reg:SI 2 cx)) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 50 799 51 4 (set (reg:SI 0 ax [205])
        (not:SI (reg:SI 0 ax [204]))) src/gui.c:39 482 {*one_cmplsi2_1}
     (nil))

(insn 51 50 53 4 (parallel [
            (set (reg:SI 0 ax [orig:66 D.6493 ] [66])
                (plus:SI (reg:SI 0 ax [205])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:39 252 {*addsi_1}
     (nil))

(insn 53 51 54 4 (parallel [
            (set (reg/f:SI 0 ax [orig:67 D.6494 ] [67])
                (plus:SI (reg:SI 0 ax [orig:66 D.6493 ] [66])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:39 252 {*addsi_1}
     (nil))

(insn 54 53 55 4 (set (reg:SI 2 cx [209])
        (mem:SI (reg/f:SI 1 dx [orig:65 D.6492 ] [65]) [0 S4 A8])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 55 54 56 4 (set (mem:SI (reg/f:SI 0 ax [orig:67 D.6494 ] [67]) [0 S4 A8])
        (reg:SI 2 cx [209])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 56 55 57 4 (set (reg:SI 2 cx [210])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:65 D.6492 ] [65])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 57 56 58 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:67 D.6494 ] [67])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [210])) src/gui.c:39 64 {*movsi_internal}
     (nil))

(insn 58 57 59 4 (set (reg:QI 1 dx [211])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:65 D.6492 ] [65])
                (const_int 8 [0x8])) [0 S1 A8])) src/gui.c:39 66 {*movqi_internal}
     (nil))

(insn 59 58 60 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:67 D.6494 ] [67])
                (const_int 8 [0x8])) [0 S1 A8])
        (reg:QI 1 dx [211])) src/gui.c:39 66 {*movqi_internal}
     (nil))

(insn 60 59 61 4 (set (reg/f:SI 0 ax [212])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:40 64 {*movsi_internal}
     (nil))

(insn 61 60 62 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [212])) src/gui.c:40 64 {*movsi_internal}
     (nil))

(call_insn 62 61 64 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:40 927 {*call_value_0}
     (nil)
    (nil))

(insn 64 62 65 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:40 64 {*movsi_internal}
     (nil))

(insn 65 64 66 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6495 ] [68])) src/gui.c:40 64 {*movsi_internal}
     (nil))

(call_insn 66 65 67 4 (call (mem:QI (symbol_ref:SI ("SDL_WM_SetIcon") [flags 0x41]  <function_decl 0x407d1f00 SDL_WM_SetIcon>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:40 618 {*call_0}
     (nil)
    (nil))

(insn 67 66 68 4 (set (reg/f:SI 0 ax [213])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:43 64 {*movsi_internal}
     (nil))

(insn 68 67 70 4 (set (reg/f:SI 0 ax [orig:69 D.6496 ] [69])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [213])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:43 64 {*movsi_internal}
     (nil))

(insn 70 68 71 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:70 D.6497 ] [70])) src/gui.c:43 64 {*movsi_internal}
     (nil))

(insn 71 70 72 4 (set (reg/f:SI 0 ax [214])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:43 64 {*movsi_internal}
     (nil))

(insn 72 71 73 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [214])) src/gui.c:43 64 {*movsi_internal}
     (nil))

(call_insn 73 72 74 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:43 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 74 73 81 4 (set (reg/f:SI 1 dx [orig:71 D.6498 ] [71])
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x408fd840 *.LC4>)) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 81 74 75 4 (set (reg:SI 0 ax [215])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 75 81 76 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 76 75 77 4 (set (reg:SI 3 bx [218])
        (reg:SI 0 ax [215])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 77 76 801 4 (set (reg:QI 0 ax [220])
        (const_int 0 [0])) src/gui.c:44 66 {*movqi_internal}
     (nil))

(insn 801 77 803 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 803 801 78 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [218])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 78 803 802 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [220])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:44 876 {*strlenqi_1}
     (nil))

(insn 802 78 79 4 (set (reg:SI 0 ax [216])
        (reg:SI 2 cx)) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 79 802 80 4 (set (reg:SI 0 ax [217])
        (not:SI (reg:SI 0 ax [216]))) src/gui.c:44 482 {*one_cmplsi2_1}
     (nil))

(insn 80 79 82 4 (parallel [
            (set (reg:SI 0 ax [orig:72 D.6499 ] [72])
                (plus:SI (reg:SI 0 ax [217])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:44 252 {*addsi_1}
     (nil))

(insn 82 80 83 4 (parallel [
            (set (reg/f:SI 0 ax [orig:73 D.6500 ] [73])
                (plus:SI (reg:SI 0 ax [orig:72 D.6499 ] [72])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:44 252 {*addsi_1}
     (nil))

(insn 83 82 84 4 (set (reg:SI 2 cx [221])
        (mem:SI (reg/f:SI 1 dx [orig:71 D.6498 ] [71]) [0 S4 A8])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 84 83 85 4 (set (mem:SI (reg/f:SI 0 ax [orig:73 D.6500 ] [73]) [0 S4 A8])
        (reg:SI 2 cx [221])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 85 84 86 4 (set (reg:SI 2 cx [222])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:71 D.6498 ] [71])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 86 85 87 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:73 D.6500 ] [73])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [222])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 87 86 88 4 (set (reg:SI 2 cx [223])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:71 D.6498 ] [71])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 88 87 89 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:73 D.6500 ] [73])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [223])) src/gui.c:44 64 {*movsi_internal}
     (nil))

(insn 89 88 90 4 (set (reg:HI 2 cx [224])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:71 D.6498 ] [71])
                (const_int 12 [0xc])) [0 S2 A8])) src/gui.c:44 65 {*movhi_internal}
     (nil))

(insn 90 89 91 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:73 D.6500 ] [73])
                (const_int 12 [0xc])) [0 S2 A8])
        (reg:HI 2 cx [224])) src/gui.c:44 65 {*movhi_internal}
     (nil))

(insn 91 90 92 4 (set (reg:QI 1 dx [225])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:71 D.6498 ] [71])
                (const_int 14 [0xe])) [0 S1 A8])) src/gui.c:44 66 {*movqi_internal}
     (nil))

(insn 92 91 93 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:73 D.6500 ] [73])
                (const_int 14 [0xe])) [0 S1 A8])
        (reg:QI 1 dx [225])) src/gui.c:44 66 {*movqi_internal}
     (nil))

(insn 93 92 94 4 (set (reg/f:SI 0 ax [226])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:45 64 {*movsi_internal}
     (nil))

(insn 94 93 95 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [226])) src/gui.c:45 64 {*movsi_internal}
     (nil))

(call_insn 95 94 97 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:45 927 {*call_value_0}
     (nil)
    (nil))

(insn 97 95 98 4 (set (reg/f:SI 1 dx [227])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:45 64 {*movsi_internal}
     (nil))

(insn 98 97 99 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [227])
                (const_int 12 [0xc])) [0 display_9(D)->background+0 S4 A32])
        (reg/f:SI 0 ax [orig:74 D.6501 ] [74])) src/gui.c:45 64 {*movsi_internal}
     (nil))

(insn 99 98 100 4 (set (reg/f:SI 0 ax [228])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:46 64 {*movsi_internal}
     (nil))

(insn 100 99 101 4 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [228])
                (const_int 16 [0x10])) [0 display_9(D)->background_position.x+0 S2 A32])
        (const_int 0 [0])) src/gui.c:46 65 {*movhi_internal}
     (nil))

(insn 101 100 102 4 (set (reg/f:SI 0 ax [229])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:47 64 {*movsi_internal}
     (nil))

(insn 102 101 103 4 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [229])
                (const_int 18 [0x12])) [0 display_9(D)->background_position.y+0 S2 A16])
        (const_int 0 [0])) src/gui.c:47 65 {*movhi_internal}
     (nil))

(insn 103 102 104 4 (set (reg/f:SI 0 ax [230])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:50 64 {*movsi_internal}
     (nil))

(insn 104 103 106 4 (set (reg/f:SI 0 ax [orig:75 D.6502 ] [75])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [230])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:50 64 {*movsi_internal}
     (nil))

(insn 106 104 107 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:76 D.6503 ] [76])) src/gui.c:50 64 {*movsi_internal}
     (nil))

(insn 107 106 108 4 (set (reg/f:SI 0 ax [231])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:50 64 {*movsi_internal}
     (nil))

(insn 108 107 109 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [231])) src/gui.c:50 64 {*movsi_internal}
     (nil))

(call_insn 109 108 110 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:50 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 110 109 117 4 (set (reg/f:SI 1 dx [orig:77 D.6504 ] [77])
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x408fd8a0 *.LC5>)) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 117 110 111 4 (set (reg:SI 0 ax [232])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 111 117 112 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 112 111 113 4 (set (reg:SI 3 bx [235])
        (reg:SI 0 ax [232])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 113 112 804 4 (set (reg:QI 0 ax [237])
        (const_int 0 [0])) src/gui.c:51 66 {*movqi_internal}
     (nil))

(insn 804 113 806 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 806 804 114 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [235])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 114 806 805 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [237])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:51 876 {*strlenqi_1}
     (nil))

(insn 805 114 115 4 (set (reg:SI 0 ax [233])
        (reg:SI 2 cx)) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 115 805 116 4 (set (reg:SI 0 ax [234])
        (not:SI (reg:SI 0 ax [233]))) src/gui.c:51 482 {*one_cmplsi2_1}
     (nil))

(insn 116 115 118 4 (parallel [
            (set (reg:SI 0 ax [orig:78 D.6505 ] [78])
                (plus:SI (reg:SI 0 ax [234])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:51 252 {*addsi_1}
     (nil))

(insn 118 116 119 4 (parallel [
            (set (reg/f:SI 0 ax [orig:79 D.6506 ] [79])
                (plus:SI (reg:SI 0 ax [orig:78 D.6505 ] [78])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:51 252 {*addsi_1}
     (nil))

(insn 119 118 120 4 (set (reg:SI 2 cx [238])
        (mem:SI (reg/f:SI 1 dx [orig:77 D.6504 ] [77]) [0 S4 A8])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 120 119 121 4 (set (mem:SI (reg/f:SI 0 ax [orig:79 D.6506 ] [79]) [0 S4 A8])
        (reg:SI 2 cx [238])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 121 120 122 4 (set (reg:SI 2 cx [239])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:77 D.6504 ] [77])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 122 121 123 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:79 D.6506 ] [79])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [239])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 123 122 124 4 (set (reg:SI 2 cx [240])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:77 D.6504 ] [77])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 124 123 125 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:79 D.6506 ] [79])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [240])) src/gui.c:51 64 {*movsi_internal}
     (nil))

(insn 125 124 126 4 (set (reg:HI 1 dx [241])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:77 D.6504 ] [77])
                (const_int 12 [0xc])) [0 S2 A8])) src/gui.c:51 65 {*movhi_internal}
     (nil))

(insn 126 125 127 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:79 D.6506 ] [79])
                (const_int 12 [0xc])) [0 S2 A8])
        (reg:HI 1 dx [241])) src/gui.c:51 65 {*movhi_internal}
     (nil))

(insn 127 126 128 4 (set (reg/f:SI 0 ax [242])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:52 64 {*movsi_internal}
     (nil))

(insn 128 127 129 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [242])) src/gui.c:52 64 {*movsi_internal}
     (nil))

(call_insn 129 128 131 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:52 927 {*call_value_0}
     (nil)
    (nil))

(insn 131 129 132 4 (set (reg/f:SI 1 dx [243])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:52 64 {*movsi_internal}
     (nil))

(insn 132 131 133 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [243])
                (const_int 24 [0x18])) [0 display_9(D)->gameBoard+0 S4 A32])
        (reg/f:SI 0 ax [orig:80 D.6507 ] [80])) src/gui.c:52 64 {*movsi_internal}
     (nil))

(insn 133 132 134 4 (set (reg/f:SI 0 ax [244])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:53 64 {*movsi_internal}
     (nil))

(insn 134 133 135 4 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [244])
                (const_int 28 [0x1c])) [0 display_9(D)->gameBoard_position.x+0 S2 A32])
        (const_int 0 [0])) src/gui.c:53 65 {*movhi_internal}
     (nil))

(insn 135 134 136 4 (set (reg/f:SI 0 ax [245])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:54 64 {*movsi_internal}
     (nil))

(insn 136 135 137 4 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [245])
                (const_int 30 [0x1e])) [0 display_9(D)->gameBoard_position.y+0 S2 A16])
        (const_int 140 [0x8c])) src/gui.c:54 65 {*movhi_internal}
     (nil))

(insn 137 136 138 4 (set (reg/f:SI 0 ax [246])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:57 64 {*movsi_internal}
     (nil))

(insn 138 137 140 4 (set (reg/f:SI 0 ax [orig:81 D.6508 ] [81])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [246])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:57 64 {*movsi_internal}
     (nil))

(insn 140 138 141 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:82 D.6509 ] [82])) src/gui.c:57 64 {*movsi_internal}
     (nil))

(insn 141 140 142 4 (set (reg/f:SI 0 ax [247])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:57 64 {*movsi_internal}
     (nil))

(insn 142 141 143 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [247])) src/gui.c:57 64 {*movsi_internal}
     (nil))

(call_insn 143 142 144 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:57 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 144 143 151 4 (set (reg/f:SI 1 dx [orig:83 D.6510 ] [83])
        (symbol_ref/f:SI ("*.LC6") [flags 0x2]  <var_decl 0x408fd900 *.LC6>)) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 151 144 145 4 (set (reg:SI 0 ax [248])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 145 151 146 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 146 145 147 4 (set (reg:SI 3 bx [251])
        (reg:SI 0 ax [248])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 147 146 807 4 (set (reg:QI 0 ax [253])
        (const_int 0 [0])) src/gui.c:58 66 {*movqi_internal}
     (nil))

(insn 807 147 809 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 809 807 148 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [251])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 148 809 808 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [253])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:58 876 {*strlenqi_1}
     (nil))

(insn 808 148 149 4 (set (reg:SI 0 ax [249])
        (reg:SI 2 cx)) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 149 808 150 4 (set (reg:SI 0 ax [250])
        (not:SI (reg:SI 0 ax [249]))) src/gui.c:58 482 {*one_cmplsi2_1}
     (nil))

(insn 150 149 152 4 (parallel [
            (set (reg:SI 0 ax [orig:84 D.6511 ] [84])
                (plus:SI (reg:SI 0 ax [250])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:58 252 {*addsi_1}
     (nil))

(insn 152 150 153 4 (parallel [
            (set (reg/f:SI 0 ax [orig:85 D.6512 ] [85])
                (plus:SI (reg:SI 0 ax [orig:84 D.6511 ] [84])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:58 252 {*addsi_1}
     (nil))

(insn 153 152 154 4 (set (reg:SI 2 cx [254])
        (mem:SI (reg/f:SI 1 dx [orig:83 D.6510 ] [83]) [0 S4 A8])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 154 153 155 4 (set (mem:SI (reg/f:SI 0 ax [orig:85 D.6512 ] [85]) [0 S4 A8])
        (reg:SI 2 cx [254])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 155 154 156 4 (set (reg:SI 2 cx [255])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:83 D.6510 ] [83])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 156 155 157 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:85 D.6512 ] [85])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [255])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 157 156 158 4 (set (reg:SI 2 cx [256])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:83 D.6510 ] [83])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 158 157 159 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:85 D.6512 ] [85])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [256])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 159 158 160 4 (set (reg:SI 2 cx [257])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:83 D.6510 ] [83])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 160 159 161 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:85 D.6512 ] [85])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [257])) src/gui.c:58 64 {*movsi_internal}
     (nil))

(insn 161 160 162 4 (set (reg:HI 1 dx [258])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:83 D.6510 ] [83])
                (const_int 16 [0x10])) [0 S2 A8])) src/gui.c:58 65 {*movhi_internal}
     (nil))

(insn 162 161 163 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:85 D.6512 ] [85])
                (const_int 16 [0x10])) [0 S2 A8])
        (reg:HI 1 dx [258])) src/gui.c:58 65 {*movhi_internal}
     (nil))

(insn 163 162 164 4 (set (reg/f:SI 0 ax [259])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:59 64 {*movsi_internal}
     (nil))

(insn 164 163 165 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [259])) src/gui.c:59 64 {*movsi_internal}
     (nil))

(call_insn 165 164 167 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:59 927 {*call_value_0}
     (nil)
    (nil))

(insn 167 165 168 4 (set (reg/f:SI 1 dx [260])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:59 64 {*movsi_internal}
     (nil))

(insn 168 167 169 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [260])
                (const_int 48 [0x30])) [0 display_9(D)->white_checker+0 S4 A32])
        (reg/f:SI 0 ax [orig:86 D.6513 ] [86])) src/gui.c:59 64 {*movsi_internal}
     (nil))

(insn 169 168 170 4 (set (reg/f:SI 0 ax [261])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:62 64 {*movsi_internal}
     (nil))

(insn 170 169 172 4 (set (reg/f:SI 0 ax [orig:87 D.6514 ] [87])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [261])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:62 64 {*movsi_internal}
     (nil))

(insn 172 170 173 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:88 D.6515 ] [88])) src/gui.c:62 64 {*movsi_internal}
     (nil))

(insn 173 172 174 4 (set (reg/f:SI 0 ax [262])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:62 64 {*movsi_internal}
     (nil))

(insn 174 173 175 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [262])) src/gui.c:62 64 {*movsi_internal}
     (nil))

(call_insn 175 174 176 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:62 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 176 175 183 4 (set (reg/f:SI 1 dx [orig:89 D.6516 ] [89])
        (symbol_ref/f:SI ("*.LC7") [flags 0x2]  <var_decl 0x408fd960 *.LC7>)) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 183 176 177 4 (set (reg:SI 0 ax [263])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 177 183 178 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 178 177 179 4 (set (reg:SI 3 bx [266])
        (reg:SI 0 ax [263])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 179 178 810 4 (set (reg:QI 0 ax [268])
        (const_int 0 [0])) src/gui.c:63 66 {*movqi_internal}
     (nil))

(insn 810 179 812 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 812 810 180 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [266])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 180 812 811 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [268])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:63 876 {*strlenqi_1}
     (nil))

(insn 811 180 181 4 (set (reg:SI 0 ax [264])
        (reg:SI 2 cx)) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 181 811 182 4 (set (reg:SI 0 ax [265])
        (not:SI (reg:SI 0 ax [264]))) src/gui.c:63 482 {*one_cmplsi2_1}
     (nil))

(insn 182 181 184 4 (parallel [
            (set (reg:SI 0 ax [orig:90 D.6517 ] [90])
                (plus:SI (reg:SI 0 ax [265])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:63 252 {*addsi_1}
     (nil))

(insn 184 182 185 4 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.6518 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 D.6517 ] [90])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:63 252 {*addsi_1}
     (nil))

(insn 185 184 186 4 (set (reg:SI 2 cx [269])
        (mem:SI (reg/f:SI 1 dx [orig:89 D.6516 ] [89]) [0 S4 A8])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 186 185 187 4 (set (mem:SI (reg/f:SI 0 ax [orig:91 D.6518 ] [91]) [0 S4 A8])
        (reg:SI 2 cx [269])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 187 186 188 4 (set (reg:SI 2 cx [270])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:89 D.6516 ] [89])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 188 187 189 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:91 D.6518 ] [91])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [270])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 189 188 190 4 (set (reg:SI 2 cx [271])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:89 D.6516 ] [89])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 190 189 191 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:91 D.6518 ] [91])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [271])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 191 190 192 4 (set (reg:SI 2 cx [272])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:89 D.6516 ] [89])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 192 191 193 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:91 D.6518 ] [91])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [272])) src/gui.c:63 64 {*movsi_internal}
     (nil))

(insn 193 192 194 4 (set (reg:HI 1 dx [273])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:89 D.6516 ] [89])
                (const_int 16 [0x10])) [0 S2 A8])) src/gui.c:63 65 {*movhi_internal}
     (nil))

(insn 194 193 195 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:91 D.6518 ] [91])
                (const_int 16 [0x10])) [0 S2 A8])
        (reg:HI 1 dx [273])) src/gui.c:63 65 {*movhi_internal}
     (nil))

(insn 195 194 196 4 (set (reg/f:SI 0 ax [274])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:64 64 {*movsi_internal}
     (nil))

(insn 196 195 197 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [274])) src/gui.c:64 64 {*movsi_internal}
     (nil))

(call_insn 197 196 199 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:64 927 {*call_value_0}
     (nil)
    (nil))

(insn 199 197 200 4 (set (reg/f:SI 1 dx [275])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:64 64 {*movsi_internal}
     (nil))

(insn 200 199 201 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [275])
                (const_int 44 [0x2c])) [0 display_9(D)->green_checker+0 S4 A32])
        (reg/f:SI 0 ax [orig:92 D.6519 ] [92])) src/gui.c:64 64 {*movsi_internal}
     (nil))

(insn 201 200 202 4 (set (reg/f:SI 0 ax [276])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:67 64 {*movsi_internal}
     (nil))

(insn 202 201 204 4 (set (reg/f:SI 0 ax [orig:93 D.6520 ] [93])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [276])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:67 64 {*movsi_internal}
     (nil))

(insn 204 202 205 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:94 D.6521 ] [94])) src/gui.c:67 64 {*movsi_internal}
     (nil))

(insn 205 204 206 4 (set (reg/f:SI 0 ax [277])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:67 64 {*movsi_internal}
     (nil))

(insn 206 205 207 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [277])) src/gui.c:67 64 {*movsi_internal}
     (nil))

(call_insn 207 206 208 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:67 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 208 207 215 4 (set (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
        (symbol_ref/f:SI ("*.LC8") [flags 0x2]  <var_decl 0x408fd9c0 *.LC8>)) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 215 208 209 4 (set (reg:SI 0 ax [278])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 209 215 210 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 210 209 211 4 (set (reg:SI 3 bx [281])
        (reg:SI 0 ax [278])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 211 210 813 4 (set (reg:QI 0 ax [283])
        (const_int 0 [0])) src/gui.c:68 66 {*movqi_internal}
     (nil))

(insn 813 211 815 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 815 813 212 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [281])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 212 815 814 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [283])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:68 876 {*strlenqi_1}
     (nil))

(insn 814 212 213 4 (set (reg:SI 0 ax [279])
        (reg:SI 2 cx)) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 213 814 214 4 (set (reg:SI 0 ax [280])
        (not:SI (reg:SI 0 ax [279]))) src/gui.c:68 482 {*one_cmplsi2_1}
     (nil))

(insn 214 213 216 4 (parallel [
            (set (reg:SI 0 ax [orig:96 D.6523 ] [96])
                (plus:SI (reg:SI 0 ax [280])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:68 252 {*addsi_1}
     (nil))

(insn 216 214 217 4 (parallel [
            (set (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (plus:SI (reg:SI 0 ax [orig:96 D.6523 ] [96])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:68 252 {*addsi_1}
     (nil))

(insn 217 216 218 4 (set (reg:SI 2 cx [284])
        (mem:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95]) [0 S4 A8])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 218 217 219 4 (set (mem:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97]) [0 S4 A8])
        (reg:SI 2 cx [284])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 219 218 220 4 (set (reg:SI 2 cx [285])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 220 219 221 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [285])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 221 220 222 4 (set (reg:SI 2 cx [286])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 222 221 223 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [286])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 223 222 224 4 (set (reg:SI 2 cx [287])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 224 223 225 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [287])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 225 224 226 4 (set (reg:SI 2 cx [288])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
                (const_int 16 [0x10])) [0 S4 A8])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 226 225 227 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (const_int 16 [0x10])) [0 S4 A8])
        (reg:SI 2 cx [288])) src/gui.c:68 64 {*movsi_internal}
     (nil))

(insn 227 226 228 4 (set (reg:HI 1 dx [289])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:95 D.6522 ] [95])
                (const_int 20 [0x14])) [0 S2 A8])) src/gui.c:68 65 {*movhi_internal}
     (nil))

(insn 228 227 229 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:97 D.6524 ] [97])
                (const_int 20 [0x14])) [0 S2 A8])
        (reg:HI 1 dx [289])) src/gui.c:68 65 {*movhi_internal}
     (nil))

(insn 229 228 230 4 (set (reg/f:SI 0 ax [290])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:69 64 {*movsi_internal}
     (nil))

(insn 230 229 231 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [290])) src/gui.c:69 64 {*movsi_internal}
     (nil))

(call_insn 231 230 233 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:69 927 {*call_value_0}
     (nil)
    (nil))

(insn 233 231 234 4 (set (reg/f:SI 1 dx [291])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:69 64 {*movsi_internal}
     (nil))

(insn 234 233 235 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [291])
                (const_int 56 [0x38])) [0 display_9(D)->bar_white_checker+0 S4 A32])
        (reg/f:SI 0 ax [orig:98 D.6525 ] [98])) src/gui.c:69 64 {*movsi_internal}
     (nil))

(insn 235 234 236 4 (set (reg/f:SI 0 ax [292])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:72 64 {*movsi_internal}
     (nil))

(insn 236 235 238 4 (set (reg/f:SI 0 ax [orig:99 D.6526 ] [99])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [292])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:72 64 {*movsi_internal}
     (nil))

(insn 238 236 239 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:100 D.6527 ] [100])) src/gui.c:72 64 {*movsi_internal}
     (nil))

(insn 239 238 240 4 (set (reg/f:SI 0 ax [293])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:72 64 {*movsi_internal}
     (nil))

(insn 240 239 241 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [293])) src/gui.c:72 64 {*movsi_internal}
     (nil))

(call_insn 241 240 242 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:72 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 242 241 249 4 (set (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
        (symbol_ref/f:SI ("*.LC9") [flags 0x2]  <var_decl 0x408fda20 *.LC9>)) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 249 242 243 4 (set (reg:SI 0 ax [294])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 243 249 244 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 244 243 245 4 (set (reg:SI 3 bx [297])
        (reg:SI 0 ax [294])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 245 244 816 4 (set (reg:QI 0 ax [299])
        (const_int 0 [0])) src/gui.c:73 66 {*movqi_internal}
     (nil))

(insn 816 245 818 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 818 816 246 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [297])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 246 818 817 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [299])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:73 876 {*strlenqi_1}
     (nil))

(insn 817 246 247 4 (set (reg:SI 0 ax [295])
        (reg:SI 2 cx)) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 247 817 248 4 (set (reg:SI 0 ax [296])
        (not:SI (reg:SI 0 ax [295]))) src/gui.c:73 482 {*one_cmplsi2_1}
     (nil))

(insn 248 247 250 4 (parallel [
            (set (reg:SI 0 ax [orig:102 D.6529 ] [102])
                (plus:SI (reg:SI 0 ax [296])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:73 252 {*addsi_1}
     (nil))

(insn 250 248 251 4 (parallel [
            (set (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.6529 ] [102])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:73 252 {*addsi_1}
     (nil))

(insn 251 250 252 4 (set (reg:SI 2 cx [300])
        (mem:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101]) [0 S4 A8])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 252 251 253 4 (set (mem:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103]) [0 S4 A8])
        (reg:SI 2 cx [300])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 253 252 254 4 (set (reg:SI 2 cx [301])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 254 253 255 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [301])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 255 254 256 4 (set (reg:SI 2 cx [302])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 256 255 257 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [302])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 257 256 258 4 (set (reg:SI 2 cx [303])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 258 257 259 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [303])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 259 258 260 4 (set (reg:SI 2 cx [304])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
                (const_int 16 [0x10])) [0 S4 A8])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 260 259 261 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (const_int 16 [0x10])) [0 S4 A8])
        (reg:SI 2 cx [304])) src/gui.c:73 64 {*movsi_internal}
     (nil))

(insn 261 260 262 4 (set (reg:HI 1 dx [305])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:101 D.6528 ] [101])
                (const_int 20 [0x14])) [0 S2 A8])) src/gui.c:73 65 {*movhi_internal}
     (nil))

(insn 262 261 263 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:103 D.6530 ] [103])
                (const_int 20 [0x14])) [0 S2 A8])
        (reg:HI 1 dx [305])) src/gui.c:73 65 {*movhi_internal}
     (nil))

(insn 263 262 264 4 (set (reg/f:SI 0 ax [306])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:74 64 {*movsi_internal}
     (nil))

(insn 264 263 265 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [306])) src/gui.c:74 64 {*movsi_internal}
     (nil))

(call_insn 265 264 267 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:74 927 {*call_value_0}
     (nil)
    (nil))

(insn 267 265 268 4 (set (reg/f:SI 1 dx [307])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:74 64 {*movsi_internal}
     (nil))

(insn 268 267 269 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [307])
                (const_int 52 [0x34])) [0 display_9(D)->bar_green_checker+0 S4 A32])
        (reg/f:SI 0 ax [orig:104 D.6531 ] [104])) src/gui.c:74 64 {*movsi_internal}
     (nil))

(insn 269 268 270 4 (set (reg/f:SI 0 ax [308])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:77 64 {*movsi_internal}
     (nil))

(insn 270 269 272 4 (set (reg/f:SI 0 ax [orig:105 D.6532 ] [105])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [308])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:77 64 {*movsi_internal}
     (nil))

(insn 272 270 273 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:106 D.6533 ] [106])) src/gui.c:77 64 {*movsi_internal}
     (nil))

(insn 273 272 274 4 (set (reg/f:SI 0 ax [309])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:77 64 {*movsi_internal}
     (nil))

(insn 274 273 275 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [309])) src/gui.c:77 64 {*movsi_internal}
     (nil))

(call_insn 275 274 276 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:77 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 276 275 283 4 (set (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
        (symbol_ref/f:SI ("*.LC10") [flags 0x2]  <var_decl 0x408fda80 *.LC10>)) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 283 276 277 4 (set (reg:SI 0 ax [310])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 277 283 278 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 278 277 279 4 (set (reg:SI 3 bx [313])
        (reg:SI 0 ax [310])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 279 278 819 4 (set (reg:QI 0 ax [315])
        (const_int 0 [0])) src/gui.c:78 66 {*movqi_internal}
     (nil))

(insn 819 279 821 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 821 819 280 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [313])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 280 821 820 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [315])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:78 876 {*strlenqi_1}
     (nil))

(insn 820 280 281 4 (set (reg:SI 0 ax [311])
        (reg:SI 2 cx)) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 281 820 282 4 (set (reg:SI 0 ax [312])
        (not:SI (reg:SI 0 ax [311]))) src/gui.c:78 482 {*one_cmplsi2_1}
     (nil))

(insn 282 281 284 4 (parallel [
            (set (reg:SI 0 ax [orig:108 D.6535 ] [108])
                (plus:SI (reg:SI 0 ax [312])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:78 252 {*addsi_1}
     (nil))

(insn 284 282 285 4 (parallel [
            (set (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (plus:SI (reg:SI 0 ax [orig:108 D.6535 ] [108])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:78 252 {*addsi_1}
     (nil))

(insn 285 284 286 4 (set (reg:SI 2 cx [316])
        (mem:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107]) [0 S4 A8])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 286 285 287 4 (set (mem:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109]) [0 S4 A8])
        (reg:SI 2 cx [316])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 287 286 288 4 (set (reg:SI 2 cx [317])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 288 287 289 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [317])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 289 288 290 4 (set (reg:SI 2 cx [318])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 290 289 291 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [318])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 291 290 292 4 (set (reg:SI 2 cx [319])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 292 291 293 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [319])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 293 292 294 4 (set (reg:SI 2 cx [320])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
                (const_int 16 [0x10])) [0 S4 A8])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 294 293 295 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (const_int 16 [0x10])) [0 S4 A8])
        (reg:SI 2 cx [320])) src/gui.c:78 64 {*movsi_internal}
     (nil))

(insn 295 294 296 4 (set (reg:QI 1 dx [321])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:107 D.6534 ] [107])
                (const_int 20 [0x14])) [0 S1 A8])) src/gui.c:78 66 {*movqi_internal}
     (nil))

(insn 296 295 297 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:109 D.6536 ] [109])
                (const_int 20 [0x14])) [0 S1 A8])
        (reg:QI 1 dx [321])) src/gui.c:78 66 {*movqi_internal}
     (nil))

(insn 297 296 298 4 (set (reg/f:SI 0 ax [322])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:79 64 {*movsi_internal}
     (nil))

(insn 298 297 299 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [322])) src/gui.c:79 64 {*movsi_internal}
     (nil))

(call_insn 299 298 301 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:79 927 {*call_value_0}
     (nil)
    (nil))

(insn 301 299 302 4 (set (reg/f:SI 1 dx [323])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:79 64 {*movsi_internal}
     (nil))

(insn 302 301 303 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [323])
                (const_int 60 [0x3c])) [0 display_9(D)->selected_checker+0 S4 A32])
        (reg/f:SI 0 ax [orig:110 D.6537 ] [110])) src/gui.c:79 64 {*movsi_internal}
     (nil))

(insn 303 302 304 4 (set (reg/f:SI 0 ax [324])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:82 64 {*movsi_internal}
     (nil))

(insn 304 303 306 4 (set (reg/f:SI 0 ax [orig:111 D.6538 ] [111])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [324])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:82 64 {*movsi_internal}
     (nil))

(insn 306 304 307 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:112 D.6539 ] [112])) src/gui.c:82 64 {*movsi_internal}
     (nil))

(insn 307 306 308 4 (set (reg/f:SI 0 ax [325])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:82 64 {*movsi_internal}
     (nil))

(insn 308 307 309 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [325])) src/gui.c:82 64 {*movsi_internal}
     (nil))

(call_insn 309 308 310 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:82 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 310 309 317 4 (set (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
        (symbol_ref/f:SI ("*.LC11") [flags 0x2]  <var_decl 0x408fdae0 *.LC11>)) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 317 310 311 4 (set (reg:SI 0 ax [326])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 311 317 312 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 312 311 313 4 (set (reg:SI 3 bx [329])
        (reg:SI 0 ax [326])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 313 312 822 4 (set (reg:QI 0 ax [331])
        (const_int 0 [0])) src/gui.c:83 66 {*movqi_internal}
     (nil))

(insn 822 313 824 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 824 822 314 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [329])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 314 824 823 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [331])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:83 876 {*strlenqi_1}
     (nil))

(insn 823 314 315 4 (set (reg:SI 0 ax [327])
        (reg:SI 2 cx)) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 315 823 316 4 (set (reg:SI 0 ax [328])
        (not:SI (reg:SI 0 ax [327]))) src/gui.c:83 482 {*one_cmplsi2_1}
     (nil))

(insn 316 315 318 4 (parallel [
            (set (reg:SI 0 ax [orig:114 D.6541 ] [114])
                (plus:SI (reg:SI 0 ax [328])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:83 252 {*addsi_1}
     (nil))

(insn 318 316 319 4 (parallel [
            (set (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (plus:SI (reg:SI 0 ax [orig:114 D.6541 ] [114])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:83 252 {*addsi_1}
     (nil))

(insn 319 318 320 4 (set (reg:SI 2 cx [332])
        (mem:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113]) [0 S4 A8])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 320 319 321 4 (set (mem:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115]) [0 S4 A8])
        (reg:SI 2 cx [332])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 321 320 322 4 (set (reg:SI 2 cx [333])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 322 321 323 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [333])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 323 322 324 4 (set (reg:SI 2 cx [334])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 324 323 325 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [334])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 325 324 326 4 (set (reg:SI 2 cx [335])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 326 325 327 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [335])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 327 326 328 4 (set (reg:SI 2 cx [336])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 16 [0x10])) [0 S4 A8])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 328 327 329 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 16 [0x10])) [0 S4 A8])
        (reg:SI 2 cx [336])) src/gui.c:83 64 {*movsi_internal}
     (nil))

(insn 329 328 330 4 (set (reg:HI 2 cx [337])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 20 [0x14])) [0 S2 A8])) src/gui.c:83 65 {*movhi_internal}
     (nil))

(insn 330 329 331 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 20 [0x14])) [0 S2 A8])
        (reg:HI 2 cx [337])) src/gui.c:83 65 {*movhi_internal}
     (nil))

(insn 331 330 332 4 (set (reg:QI 1 dx [338])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:113 D.6540 ] [113])
                (const_int 22 [0x16])) [0 S1 A8])) src/gui.c:83 66 {*movqi_internal}
     (nil))

(insn 332 331 333 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:115 D.6542 ] [115])
                (const_int 22 [0x16])) [0 S1 A8])
        (reg:QI 1 dx [338])) src/gui.c:83 66 {*movqi_internal}
     (nil))

(insn 333 332 334 4 (set (reg/f:SI 0 ax [339])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:84 64 {*movsi_internal}
     (nil))

(insn 334 333 335 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [339])) src/gui.c:84 64 {*movsi_internal}
     (nil))

(call_insn 335 334 337 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:84 927 {*call_value_0}
     (nil)
    (nil))

(insn 337 335 338 4 (set (reg/f:SI 1 dx [340])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:84 64 {*movsi_internal}
     (nil))

(insn 338 337 339 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [340])
                (const_int 104 [0x68])) [0 display_9(D)->possibility1_12+0 S4 A32])
        (reg/f:SI 0 ax [orig:116 D.6543 ] [116])) src/gui.c:84 64 {*movsi_internal}
     (nil))

(insn 339 338 340 4 (set (reg/f:SI 0 ax [341])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:87 64 {*movsi_internal}
     (nil))

(insn 340 339 342 4 (set (reg/f:SI 0 ax [orig:117 D.6544 ] [117])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [341])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:87 64 {*movsi_internal}
     (nil))

(insn 342 340 343 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:118 D.6545 ] [118])) src/gui.c:87 64 {*movsi_internal}
     (nil))

(insn 343 342 344 4 (set (reg/f:SI 0 ax [342])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:87 64 {*movsi_internal}
     (nil))

(insn 344 343 345 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [342])) src/gui.c:87 64 {*movsi_internal}
     (nil))

(call_insn 345 344 346 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:87 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 346 345 353 4 (set (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
        (symbol_ref/f:SI ("*.LC12") [flags 0x2]  <var_decl 0x408fdb40 *.LC12>)) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 353 346 347 4 (set (reg:SI 0 ax [343])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 347 353 348 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 348 347 349 4 (set (reg:SI 3 bx [346])
        (reg:SI 0 ax [343])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 349 348 825 4 (set (reg:QI 0 ax [348])
        (const_int 0 [0])) src/gui.c:88 66 {*movqi_internal}
     (nil))

(insn 825 349 827 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 827 825 350 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [346])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 350 827 826 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [348])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:88 876 {*strlenqi_1}
     (nil))

(insn 826 350 351 4 (set (reg:SI 0 ax [344])
        (reg:SI 2 cx)) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 351 826 352 4 (set (reg:SI 0 ax [345])
        (not:SI (reg:SI 0 ax [344]))) src/gui.c:88 482 {*one_cmplsi2_1}
     (nil))

(insn 352 351 354 4 (parallel [
            (set (reg:SI 0 ax [orig:120 D.6547 ] [120])
                (plus:SI (reg:SI 0 ax [345])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:88 252 {*addsi_1}
     (nil))

(insn 354 352 355 4 (parallel [
            (set (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (plus:SI (reg:SI 0 ax [orig:120 D.6547 ] [120])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:88 252 {*addsi_1}
     (nil))

(insn 355 354 356 4 (set (reg:SI 2 cx [349])
        (mem:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119]) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 356 355 357 4 (set (mem:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121]) [0 S4 A8])
        (reg:SI 2 cx [349])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 357 356 358 4 (set (reg:SI 2 cx [350])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 358 357 359 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [350])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 359 358 360 4 (set (reg:SI 2 cx [351])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 360 359 361 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [351])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 361 360 362 4 (set (reg:SI 2 cx [352])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 362 361 363 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [352])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 363 362 364 4 (set (reg:SI 2 cx [353])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
                (const_int 16 [0x10])) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 364 363 365 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (const_int 16 [0x10])) [0 S4 A8])
        (reg:SI 2 cx [353])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 365 364 366 4 (set (reg:SI 1 dx [354])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:119 D.6546 ] [119])
                (const_int 20 [0x14])) [0 S4 A8])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 366 365 367 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:121 D.6548 ] [121])
                (const_int 20 [0x14])) [0 S4 A8])
        (reg:SI 1 dx [354])) src/gui.c:88 64 {*movsi_internal}
     (nil))

(insn 367 366 368 4 (set (reg/f:SI 0 ax [355])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:89 64 {*movsi_internal}
     (nil))

(insn 368 367 369 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [355])) src/gui.c:89 64 {*movsi_internal}
     (nil))

(call_insn 369 368 371 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:89 927 {*call_value_0}
     (nil)
    (nil))

(insn 371 369 372 4 (set (reg/f:SI 1 dx [356])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:89 64 {*movsi_internal}
     (nil))

(insn 372 371 373 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [356])
                (const_int 108 [0x6c])) [0 display_9(D)->possibility13_24+0 S4 A32])
        (reg/f:SI 0 ax [orig:122 D.6549 ] [122])) src/gui.c:89 64 {*movsi_internal}
     (nil))

(insn 373 372 374 4 (set (reg/f:SI 0 ax [357])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:92 64 {*movsi_internal}
     (nil))

(insn 374 373 376 4 (set (reg/f:SI 0 ax [orig:123 D.6550 ] [123])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [357])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:92 64 {*movsi_internal}
     (nil))

(insn 376 374 377 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:124 D.6551 ] [124])) src/gui.c:92 64 {*movsi_internal}
     (nil))

(insn 377 376 378 4 (set (reg/f:SI 0 ax [358])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:92 64 {*movsi_internal}
     (nil))

(insn 378 377 379 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [358])) src/gui.c:92 64 {*movsi_internal}
     (nil))

(call_insn 379 378 380 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:92 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 380 379 387 4 (set (reg/f:SI 1 dx [orig:125 D.6552 ] [125])
        (symbol_ref/f:SI ("*.LC13") [flags 0x2]  <var_decl 0x408fdba0 *.LC13>)) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 387 380 381 4 (set (reg:SI 0 ax [359])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 381 387 382 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 382 381 383 4 (set (reg:SI 3 bx [362])
        (reg:SI 0 ax [359])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 383 382 828 4 (set (reg:QI 0 ax [364])
        (const_int 0 [0])) src/gui.c:93 66 {*movqi_internal}
     (nil))

(insn 828 383 830 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 830 828 384 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [362])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 384 830 829 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [364])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:93 876 {*strlenqi_1}
     (nil))

(insn 829 384 385 4 (set (reg:SI 0 ax [360])
        (reg:SI 2 cx)) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 385 829 386 4 (set (reg:SI 0 ax [361])
        (not:SI (reg:SI 0 ax [360]))) src/gui.c:93 482 {*one_cmplsi2_1}
     (nil))

(insn 386 385 388 4 (parallel [
            (set (reg:SI 0 ax [orig:126 D.6553 ] [126])
                (plus:SI (reg:SI 0 ax [361])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:93 252 {*addsi_1}
     (nil))

(insn 388 386 389 4 (parallel [
            (set (reg/f:SI 0 ax [orig:127 D.6554 ] [127])
                (plus:SI (reg:SI 0 ax [orig:126 D.6553 ] [126])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:93 252 {*addsi_1}
     (nil))

(insn 389 388 390 4 (set (reg:SI 2 cx [365])
        (mem:SI (reg/f:SI 1 dx [orig:125 D.6552 ] [125]) [0 S4 A8])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 390 389 391 4 (set (mem:SI (reg/f:SI 0 ax [orig:127 D.6554 ] [127]) [0 S4 A8])
        (reg:SI 2 cx [365])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 391 390 392 4 (set (reg:SI 2 cx [366])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:125 D.6552 ] [125])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 392 391 393 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:127 D.6554 ] [127])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [366])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 393 392 394 4 (set (reg:SI 2 cx [367])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:125 D.6552 ] [125])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 394 393 395 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:127 D.6554 ] [127])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [367])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 395 394 396 4 (set (reg:SI 2 cx [368])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:125 D.6552 ] [125])
                (const_int 12 [0xc])) [0 S4 A8])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 396 395 397 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:127 D.6554 ] [127])
                (const_int 12 [0xc])) [0 S4 A8])
        (reg:SI 2 cx [368])) src/gui.c:93 64 {*movsi_internal}
     (nil))

(insn 397 396 398 4 (set (reg:QI 1 dx [369])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:125 D.6552 ] [125])
                (const_int 16 [0x10])) [0 S1 A8])) src/gui.c:93 66 {*movqi_internal}
     (nil))

(insn 398 397 399 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:127 D.6554 ] [127])
                (const_int 16 [0x10])) [0 S1 A8])
        (reg:QI 1 dx [369])) src/gui.c:93 66 {*movqi_internal}
     (nil))

(insn 399 398 400 4 (set (reg/f:SI 0 ax [370])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:94 64 {*movsi_internal}
     (nil))

(insn 400 399 401 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [370])) src/gui.c:94 64 {*movsi_internal}
     (nil))

(call_insn 401 400 403 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:94 927 {*call_value_0}
     (nil)
    (nil))

(insn 403 401 404 4 (set (reg/f:SI 1 dx [371])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:94 64 {*movsi_internal}
     (nil))

(insn 404 403 405 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [371])
                (const_int 112 [0x70])) [0 display_9(D)->possibility_out+0 S4 A32])
        (reg/f:SI 0 ax [orig:128 D.6555 ] [128])) src/gui.c:94 64 {*movsi_internal}
     (nil))

(insn 405 404 406 4 (set (reg/f:SI 0 ax [372])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:97 64 {*movsi_internal}
     (nil))

(insn 406 405 408 4 (set (reg/f:SI 0 ax [orig:129 D.6556 ] [129])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [372])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:97 64 {*movsi_internal}
     (nil))

(insn 408 406 409 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:130 D.6557 ] [130])) src/gui.c:97 64 {*movsi_internal}
     (nil))

(insn 409 408 410 4 (set (reg/f:SI 0 ax [373])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:97 64 {*movsi_internal}
     (nil))

(insn 410 409 411 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [373])) src/gui.c:97 64 {*movsi_internal}
     (nil))

(call_insn 411 410 412 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:97 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 412 411 419 4 (set (reg/f:SI 1 dx [orig:131 D.6558 ] [131])
        (symbol_ref/f:SI ("*.LC14") [flags 0x2]  <var_decl 0x408fdc00 *.LC14>)) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 419 412 413 4 (set (reg:SI 0 ax [374])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 413 419 414 4 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 414 413 415 4 (set (reg:SI 3 bx [377])
        (reg:SI 0 ax [374])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 415 414 831 4 (set (reg:QI 0 ax [379])
        (const_int 0 [0])) src/gui.c:98 66 {*movqi_internal}
     (nil))

(insn 831 415 833 4 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 833 831 416 4 (set (reg:SI 5 di)
        (reg:SI 3 bx [377])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 416 833 832 4 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [379])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:98 876 {*strlenqi_1}
     (nil))

(insn 832 416 417 4 (set (reg:SI 0 ax [375])
        (reg:SI 2 cx)) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 417 832 418 4 (set (reg:SI 0 ax [376])
        (not:SI (reg:SI 0 ax [375]))) src/gui.c:98 482 {*one_cmplsi2_1}
     (nil))

(insn 418 417 420 4 (parallel [
            (set (reg:SI 0 ax [orig:132 D.6559 ] [132])
                (plus:SI (reg:SI 0 ax [376])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:98 252 {*addsi_1}
     (nil))

(insn 420 418 421 4 (parallel [
            (set (reg/f:SI 0 ax [orig:133 D.6560 ] [133])
                (plus:SI (reg:SI 0 ax [orig:132 D.6559 ] [132])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:98 252 {*addsi_1}
     (nil))

(insn 421 420 422 4 (set (reg:SI 2 cx [380])
        (mem:SI (reg/f:SI 1 dx [orig:131 D.6558 ] [131]) [0 S4 A8])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 422 421 423 4 (set (mem:SI (reg/f:SI 0 ax [orig:133 D.6560 ] [133]) [0 S4 A8])
        (reg:SI 2 cx [380])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 423 422 424 4 (set (reg:SI 2 cx [381])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:131 D.6558 ] [131])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 424 423 425 4 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:133 D.6560 ] [133])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [381])) src/gui.c:98 64 {*movsi_internal}
     (nil))

(insn 425 424 426 4 (set (reg:HI 2 cx [382])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:131 D.6558 ] [131])
                (const_int 8 [0x8])) [0 S2 A8])) src/gui.c:98 65 {*movhi_internal}
     (nil))

(insn 426 425 427 4 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:133 D.6560 ] [133])
                (const_int 8 [0x8])) [0 S2 A8])
        (reg:HI 2 cx [382])) src/gui.c:98 65 {*movhi_internal}
     (nil))

(insn 427 426 428 4 (set (reg:QI 1 dx [383])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:131 D.6558 ] [131])
                (const_int 10 [0xa])) [0 S1 A8])) src/gui.c:98 66 {*movqi_internal}
     (nil))

(insn 428 427 429 4 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:133 D.6560 ] [133])
                (const_int 10 [0xa])) [0 S1 A8])
        (reg:QI 1 dx [383])) src/gui.c:98 66 {*movqi_internal}
     (nil))

(insn 429 428 430 4 (set (reg/f:SI 0 ax [384])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:99 64 {*movsi_internal}
     (nil))

(insn 430 429 431 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [384])) src/gui.c:99 64 {*movsi_internal}
     (nil))

(call_insn 431 430 433 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:99 927 {*call_value_0}
     (nil)
    (nil))

(insn 433 431 434 4 (set (reg/f:SI 1 dx [385])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:99 64 {*movsi_internal}
     (nil))

(insn 434 433 435 4 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [385])
                (const_int 40 [0x28])) [0 display_9(D)->msg_box+0 S4 A32])
        (reg/f:SI 0 ax [orig:134 D.6561 ] [134])) src/gui.c:99 64 {*movsi_internal}
     (nil))

(insn 435 434 436 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 100 [0x64])) src/gui.c:102 64 {*movsi_internal}
     (nil))

(call_insn 436 435 438 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:102 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 438 436 439 4 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])
        (reg/f:SI 0 ax [386])) src/gui.c:102 64 {*movsi_internal}
     (nil))

(insn 439 438 781 4 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:104 64 {*movsi_internal}
     (nil))

(jump_insn 781 439 782 4 (set (pc)
        (label_ref 472)) src/gui.c:104 606 {jump}
     (nil)
 -> 472)
;; End of basic block 4 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 782 781 474)

;; Start of basic block ( 6) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 135 136 137 138 139 140 387 388 389 390 391 392 393 394 395

;; Pred edge  6
(code_label 474 782 442 5 4 "" [1 uses])

(note 442 474 443 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 443 442 444 5 (set (reg/f:SI 0 ax [387])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:106 64 {*movsi_internal}
     (nil))

(insn 444 443 446 5 (set (reg/f:SI 0 ax [orig:135 D.6562 ] [135])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [387])
                (const_int 120 [0x78])) [0 display_9(D)->img_path+0 S4 A32])) src/gui.c:106 64 {*movsi_internal}
     (nil))

(insn 446 444 447 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:136 D.6563 ] [136])) src/gui.c:106 64 {*movsi_internal}
     (nil))

(insn 447 446 448 5 (set (reg/f:SI 0 ax [388])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:106 64 {*movsi_internal}
     (nil))

(insn 448 447 449 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [388])) src/gui.c:106 64 {*movsi_internal}
     (nil))

(call_insn 449 448 450 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:106 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 450 449 451 5 (set (reg/f:SI 0 ax [orig:137 D.6564 ] [137])
        (symbol_ref/f:SI ("*.LC15") [flags 0x2]  <var_decl 0x408fdc60 *.LC15>)) src/gui.c:107 64 {*movsi_internal}
     (nil))

(insn 451 450 452 5 (set (reg:SI 1 dx [389])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:107 64 {*movsi_internal}
     (nil))

(insn 452 451 453 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [389])) src/gui.c:107 64 {*movsi_internal}
     (nil))

(insn 453 452 454 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:137 D.6564 ] [137])) src/gui.c:107 64 {*movsi_internal}
     (nil))

(insn 454 453 455 5 (set (reg/f:SI 0 ax [390])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:107 64 {*movsi_internal}
     (nil))

(insn 455 454 456 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [390])) src/gui.c:107 64 {*movsi_internal}
     (nil))

(call_insn 456 455 457 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sprintf") [flags 0x41]  <function_decl 0x406b4200 sprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:107 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 457 456 458 5 (set (reg/f:SI 0 ax [orig:138 temp_name.52 ] [138])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:108 64 {*movsi_internal}
     (nil))

(insn 458 457 459 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:138 temp_name.52 ] [138])) src/gui.c:108 64 {*movsi_internal}
     (nil))

(insn 459 458 460 5 (set (reg/f:SI 0 ax [391])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:108 64 {*movsi_internal}
     (nil))

(insn 460 459 461 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [391])) src/gui.c:108 64 {*movsi_internal}
     (nil))

(call_insn 461 460 462 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcat") [flags 0x41]  <function_decl 0x406ae480 strcat>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:108 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 462 461 463 5 (set (reg:SI 0 ax [392])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:109 64 {*movsi_internal}
     (nil))

(insn 463 462 464 5 (parallel [
            (set (reg:SI 3 bx [orig:139 D.6566 ] [139])
                (plus:SI (reg:SI 0 ax [392])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:109 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 464 463 465 5 (set (reg/f:SI 0 ax [393])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:109 64 {*movsi_internal}
     (nil))

(insn 465 464 466 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [393])) src/gui.c:109 64 {*movsi_internal}
     (nil))

(call_insn 466 465 468 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:109 927 {*call_value_0}
     (nil)
    (nil))

(insn 468 466 469 5 (set (reg/f:SI 1 dx [394])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:109 64 {*movsi_internal}
     (nil))

(insn 469 468 470 5 (parallel [
            (set (reg:SI 2 cx [395])
                (plus:SI (reg:SI 3 bx [orig:139 D.6566 ] [139])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:109 252 {*addsi_1}
     (nil))

(insn 470 469 471 5 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [395])
                    (const_int 4 [0x4]))
                (reg/f:SI 1 dx [394])) [0 display_9(D)->die S4 A32])
        (reg/f:SI 0 ax [orig:140 D.6567 ] [140])) src/gui.c:109 64 {*movsi_internal}
     (nil))

(insn 471 470 472 5 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:104 252 {*addsi_1}
     (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 472 471 473 6 3 "" [1 uses])

(note 473 472 475 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 475 473 476 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:104 6 {*cmpsi_1}
     (nil))

(jump_insn 476 475 477 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 474)
            (pc))) src/gui.c:104 591 {*jcc_1}
     (nil)
 -> 474)
;; End of basic block 6 -> ( 5 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5
;; Succ edge  7 (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 396 397 398 399 400 401 402 403

;; Pred edge  6 (fallthru)
(note 477 476 478 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 478 477 479 7 (set (reg/f:SI 0 ax [396])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:112 64 {*movsi_internal}
     (nil))

(insn 479 478 480 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [396])
                (const_int 88 [0x58])) [0 display_9(D)->die1_position.x+0 S2 A32])
        (const_int 410 [0x19a])) src/gui.c:112 65 {*movhi_internal}
     (nil))

(insn 480 479 481 7 (set (reg/f:SI 0 ax [397])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:113 64 {*movsi_internal}
     (nil))

(insn 481 480 482 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [397])
                (const_int 90 [0x5a])) [0 display_9(D)->die1_position.y+0 S2 A16])
        (const_int 340 [0x154])) src/gui.c:113 65 {*movhi_internal}
     (nil))

(insn 482 481 483 7 (set (reg/f:SI 0 ax [398])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:115 64 {*movsi_internal}
     (nil))

(insn 483 482 484 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [398])
                (const_int 96 [0x60])) [0 display_9(D)->die2_position.x+0 S2 A32])
        (const_int 450 [0x1c2])) src/gui.c:115 65 {*movhi_internal}
     (nil))

(insn 484 483 485 7 (set (reg/f:SI 0 ax [399])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:116 64 {*movsi_internal}
     (nil))

(insn 485 484 486 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [399])
                (const_int 98 [0x62])) [0 display_9(D)->die2_position.y+0 S2 A16])
        (const_int 340 [0x154])) src/gui.c:116 65 {*movhi_internal}
     (nil))

(insn 486 485 487 7 (set (reg/f:SI 0 ax [400])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:119 64 {*movsi_internal}
     (nil))

(insn 487 486 488 7 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [400])
                (const_int 124 [0x7c])) [0 display_9(D)->window_width+0 S4 A32])
        (const_int 800 [0x320])) src/gui.c:119 64 {*movsi_internal}
     (nil))

(insn 488 487 489 7 (set (reg/f:SI 0 ax [401])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:120 64 {*movsi_internal}
     (nil))

(insn 489 488 490 7 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [401])
                (const_int 128 [0x80])) [0 display_9(D)->window_height+0 S4 A32])
        (const_int 600 [0x258])) src/gui.c:120 64 {*movsi_internal}
     (nil))

(insn 490 489 491 7 (set (reg/f:SI 0 ax [402])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:123 64 {*movsi_internal}
     (nil))

(insn 491 490 492 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [402])
                (const_int 132 [0x84])) [0 display_9(D)->positions[0].x+0 S2 A32])
        (const_int 520 [0x208])) src/gui.c:123 65 {*movhi_internal}
     (nil))

(insn 492 491 493 7 (set (reg/f:SI 0 ax [403])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:124 64 {*movsi_internal}
     (nil))

(insn 493 492 494 7 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [403])
                (const_int 134 [0x86])) [0 display_9(D)->positions[0].y+0 S2 A16])
        (const_int 562 [0x232])) src/gui.c:124 65 {*movhi_internal}
     (nil))

(insn 494 493 783 7 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:126 64 {*movsi_internal}
     (nil))

(jump_insn 783 494 784 7 (set (pc)
        (label_ref 637)) src/gui.c:126 606 {jump}
     (nil)
 -> 637)
;; End of basic block 7 -> ( 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 [100.0%] 

(barrier 784 783 639)

;; Start of basic block ( 22) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 141 142 404 405 406 407 408 409

;; Pred edge  22
(code_label 639 784 497 8 13 "" [1 uses])

(note 497 639 498 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 498 497 499 8 (set (reg:SI 0 ax [404])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:128 64 {*movsi_internal}
     (nil))

(insn 499 498 500 8 (parallel [
            (set (reg:SI 1 dx [orig:141 D.6568 ] [141])
                (plus:SI (reg:SI 0 ax [404])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:128 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 500 499 501 8 (set (reg/f:SI 0 ax [405])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:128 64 {*movsi_internal}
     (nil))

(insn 501 500 502 8 (parallel [
            (set (reg:SI 1 dx [406])
                (plus:SI (reg:SI 1 dx [orig:141 D.6568 ] [141])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:128 252 {*addsi_1}
     (nil))

(insn 502 501 503 8 (set (reg:HI 1 dx [orig:142 D.6569 ] [142])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [406])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [405]))
                (const_int 6 [0x6])) [0 display_9(D)->positions[D.6568_93].y+0 S2 A16])) src/gui.c:128 65 {*movhi_internal}
     (nil))

(insn 503 502 504 8 (set (reg/f:SI 0 ax [407])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:128 64 {*movsi_internal}
     (nil))

(insn 504 503 505 8 (set (reg:SI 2 cx [409])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:128 64 {*movsi_internal}
     (nil))

(insn 505 504 506 8 (parallel [
            (set (reg:SI 2 cx [408])
                (plus:SI (reg:SI 2 cx [409])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:128 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 506 505 507 8 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [408])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [407]))
                (const_int 6 [0x6])) [0 display_9(D)->positions[i_2].y+0 S2 A16])
        (reg:HI 1 dx [orig:142 D.6569 ] [142])) src/gui.c:128 65 {*movhi_internal}
     (nil))

(insn 507 506 508 8 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 5 [0x5]))) src/gui.c:129 6 {*cmpsi_1}
     (nil))

(jump_insn 508 507 509 8 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 524)
            (pc))) src/gui.c:129 591 {*jcc_1}
     (nil)
 -> 524)
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  10

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 143 144 145 146 147 410 411 412 413 414 415

;; Pred edge  8 (fallthru)
(note 509 508 510 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 510 509 511 9 (set (reg:SI 0 ax [410])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:130 64 {*movsi_internal}
     (nil))

(insn 511 510 512 9 (parallel [
            (set (reg:SI 1 dx [orig:143 D.6572 ] [143])
                (plus:SI (reg:SI 0 ax [410])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:130 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 512 511 513 9 (set (reg/f:SI 0 ax [411])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:130 64 {*movsi_internal}
     (nil))

(insn 513 512 514 9 (parallel [
            (set (reg:SI 1 dx [412])
                (plus:SI (reg:SI 1 dx [orig:143 D.6572 ] [143])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:130 252 {*addsi_1}
     (nil))

(insn 514 513 516 9 (set (reg:HI 0 ax [orig:144 D.6573 ] [144])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [412])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [411]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6572_95].x+0 S2 A32])) src/gui.c:130 65 {*movhi_internal}
     (nil))

(insn 516 514 517 9 (parallel [
            (set (reg:HI 0 ax [orig:146 D.6575 ] [146])
                (plus:HI (reg:HI 0 ax [orig:145 D.6574 ] [145])
                    (const_int -38 [0xffffffffffffffda])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:130 256 {*addhi_1_lea}
     (nil))

(insn 517 516 518 9 (set (reg:HI 1 dx [orig:147 D.6576 ] [147])
        (reg:HI 0 ax [orig:146 D.6575 ] [146])) src/gui.c:130 65 {*movhi_internal}
     (nil))

(insn 518 517 519 9 (set (reg/f:SI 0 ax [413])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:130 64 {*movsi_internal}
     (nil))

(insn 519 518 520 9 (set (reg:SI 2 cx [415])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:130 64 {*movsi_internal}
     (nil))

(insn 520 519 521 9 (parallel [
            (set (reg:SI 2 cx [414])
                (plus:SI (reg:SI 2 cx [415])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:130 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 521 520 785 9 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [414])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [413]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:147 D.6576 ] [147])) src/gui.c:130 65 {*movhi_internal}
     (nil))

(jump_insn 785 521 786 9 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 9 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 786 785 524)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  8
(code_label 524 786 525 10 6 "" [1 uses])

(note 525 524 526 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 526 525 527 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:131 6 {*cmpsi_1}
     (nil))

(jump_insn 527 526 528 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 543)
            (pc))) src/gui.c:131 591 {*jcc_1}
     (nil)
 -> 543)
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)
;; Succ edge  12

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 148 149 150 151 152 416 417 418 419 420 421

;; Pred edge  10 (fallthru)
(note 528 527 529 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 529 528 530 11 (set (reg:SI 0 ax [416])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:132 64 {*movsi_internal}
     (nil))

(insn 530 529 531 11 (parallel [
            (set (reg:SI 1 dx [orig:148 D.6580 ] [148])
                (plus:SI (reg:SI 0 ax [416])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:132 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 531 530 532 11 (set (reg/f:SI 0 ax [417])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:132 64 {*movsi_internal}
     (nil))

(insn 532 531 533 11 (parallel [
            (set (reg:SI 1 dx [418])
                (plus:SI (reg:SI 1 dx [orig:148 D.6580 ] [148])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:132 252 {*addsi_1}
     (nil))

(insn 533 532 535 11 (set (reg:HI 0 ax [orig:149 D.6581 ] [149])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [418])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [417]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6580_100].x+0 S2 A32])) src/gui.c:132 65 {*movhi_internal}
     (nil))

(insn 535 533 536 11 (parallel [
            (set (reg:HI 0 ax [orig:151 D.6583 ] [151])
                (plus:HI (reg:HI 0 ax [orig:150 D.6582 ] [150])
                    (const_int -74 [0xffffffffffffffb6])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:132 256 {*addhi_1_lea}
     (nil))

(insn 536 535 537 11 (set (reg:HI 1 dx [orig:152 D.6584 ] [152])
        (reg:HI 0 ax [orig:151 D.6583 ] [151])) src/gui.c:132 65 {*movhi_internal}
     (nil))

(insn 537 536 538 11 (set (reg/f:SI 0 ax [419])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:132 64 {*movsi_internal}
     (nil))

(insn 538 537 539 11 (set (reg:SI 2 cx [421])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:132 64 {*movsi_internal}
     (nil))

(insn 539 538 540 11 (parallel [
            (set (reg:SI 2 cx [420])
                (plus:SI (reg:SI 2 cx [421])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:132 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 540 539 787 11 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [420])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [419]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:152 D.6584 ] [152])) src/gui.c:132 65 {*movhi_internal}
     (nil))

(jump_insn 787 540 788 11 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 11 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 788 787 543)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  10
(code_label 543 788 544 12 8 "" [1 uses])

(note 544 543 545 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 545 544 546 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 11 [0xb]))) src/gui.c:133 6 {*cmpsi_1}
     (nil))

(jump_insn 546 545 547 12 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 562)
            (pc))) src/gui.c:133 591 {*jcc_1}
     (nil)
 -> 562)
;; End of basic block 12 -> ( 13 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)
;; Succ edge  14

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 156 157 422 423 424 425 426 427

;; Pred edge  12 (fallthru)
(note 547 546 548 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 548 547 549 13 (set (reg:SI 0 ax [422])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:134 64 {*movsi_internal}
     (nil))

(insn 549 548 550 13 (parallel [
            (set (reg:SI 1 dx [orig:153 D.6588 ] [153])
                (plus:SI (reg:SI 0 ax [422])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:134 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 550 549 551 13 (set (reg/f:SI 0 ax [423])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:134 64 {*movsi_internal}
     (nil))

(insn 551 550 552 13 (parallel [
            (set (reg:SI 1 dx [424])
                (plus:SI (reg:SI 1 dx [orig:153 D.6588 ] [153])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:134 252 {*addsi_1}
     (nil))

(insn 552 551 554 13 (set (reg:HI 0 ax [orig:154 D.6589 ] [154])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [424])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [423]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6588_105].x+0 S2 A32])) src/gui.c:134 65 {*movhi_internal}
     (nil))

(insn 554 552 555 13 (parallel [
            (set (reg:HI 0 ax [orig:156 D.6591 ] [156])
                (plus:HI (reg:HI 0 ax [orig:155 D.6590 ] [155])
                    (const_int -38 [0xffffffffffffffda])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:134 256 {*addhi_1_lea}
     (nil))

(insn 555 554 556 13 (set (reg:HI 1 dx [orig:157 D.6592 ] [157])
        (reg:HI 0 ax [orig:156 D.6591 ] [156])) src/gui.c:134 65 {*movhi_internal}
     (nil))

(insn 556 555 557 13 (set (reg/f:SI 0 ax [425])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:134 64 {*movsi_internal}
     (nil))

(insn 557 556 558 13 (set (reg:SI 2 cx [427])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:134 64 {*movsi_internal}
     (nil))

(insn 558 557 559 13 (parallel [
            (set (reg:SI 2 cx [426])
                (plus:SI (reg:SI 2 cx [427])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:134 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 559 558 789 13 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [426])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [425]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:157 D.6592 ] [157])) src/gui.c:134 65 {*movhi_internal}
     (nil))

(jump_insn 789 559 790 13 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 13 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 790 789 562)

;; Start of basic block ( 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  12
(code_label 562 790 563 14 9 "" [1 uses])

(note 563 562 564 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 564 563 565 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 12 [0xc]))) src/gui.c:135 6 {*cmpsi_1}
     (nil))

(jump_insn 565 564 566 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 582)
            (pc))) src/gui.c:135 591 {*jcc_1}
     (nil)
 -> 582)
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)
;; Succ edge  16

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 428 429 430 431 432 433 434 435 436

;; Pred edge  14 (fallthru)
(note 566 565 567 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 567 566 568 15 (set (reg:SI 0 ax [428])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:137 64 {*movsi_internal}
     (nil))

(insn 568 567 569 15 (parallel [
            (set (reg:SI 1 dx [orig:158 D.6596 ] [158])
                (plus:SI (reg:SI 0 ax [428])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:137 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 569 568 570 15 (set (reg/f:SI 0 ax [429])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:137 64 {*movsi_internal}
     (nil))

(insn 570 569 571 15 (parallel [
            (set (reg:SI 1 dx [430])
                (plus:SI (reg:SI 1 dx [orig:158 D.6596 ] [158])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:137 252 {*addsi_1}
     (nil))

(insn 571 570 572 15 (set (reg:HI 1 dx [orig:159 D.6597 ] [159])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [430])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [429]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6596_110].x+0 S2 A32])) src/gui.c:137 65 {*movhi_internal}
     (nil))

(insn 572 571 573 15 (set (reg/f:SI 0 ax [431])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:137 64 {*movsi_internal}
     (nil))

(insn 573 572 574 15 (set (reg:SI 2 cx [433])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:137 64 {*movsi_internal}
     (nil))

(insn 574 573 575 15 (parallel [
            (set (reg:SI 2 cx [432])
                (plus:SI (reg:SI 2 cx [433])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:137 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 575 574 576 15 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [432])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [431]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:159 D.6597 ] [159])) src/gui.c:137 65 {*movhi_internal}
     (nil))

(insn 576 575 577 15 (set (reg/f:SI 0 ax [434])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:138 64 {*movsi_internal}
     (nil))

(insn 577 576 578 15 (set (reg:SI 1 dx [436])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:138 64 {*movsi_internal}
     (nil))

(insn 578 577 579 15 (parallel [
            (set (reg:SI 1 dx [435])
                (plus:SI (reg:SI 1 dx [436])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:138 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 579 578 791 15 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [435])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [434]))
                (const_int 6 [0x6])) [0 display_9(D)->positions[i_2].y+0 S2 A16])
        (const_int 145 [0x91])) src/gui.c:138 65 {*movhi_internal}
     (nil))

(jump_insn 791 579 792 15 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 15 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 792 791 582)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  14
(code_label 582 792 583 16 10 "" [1 uses])

(note 583 582 584 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 584 583 585 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 17 [0x11]))) src/gui.c:140 6 {*cmpsi_1}
     (nil))

(jump_insn 585 584 586 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 601)
            (pc))) src/gui.c:140 591 {*jcc_1}
     (nil)
 -> 601)
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)
;; Succ edge  18

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 160 161 162 163 164 437 438 439 440 441 442

;; Pred edge  16 (fallthru)
(note 586 585 587 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 587 586 588 17 (set (reg:SI 0 ax [437])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:141 64 {*movsi_internal}
     (nil))

(insn 588 587 589 17 (parallel [
            (set (reg:SI 1 dx [orig:160 D.6601 ] [160])
                (plus:SI (reg:SI 0 ax [437])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:141 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 589 588 590 17 (set (reg/f:SI 0 ax [438])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:141 64 {*movsi_internal}
     (nil))

(insn 590 589 591 17 (parallel [
            (set (reg:SI 1 dx [439])
                (plus:SI (reg:SI 1 dx [orig:160 D.6601 ] [160])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:141 252 {*addsi_1}
     (nil))

(insn 591 590 593 17 (set (reg:HI 0 ax [orig:161 D.6602 ] [161])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [439])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [438]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6601_112].x+0 S2 A32])) src/gui.c:141 65 {*movhi_internal}
     (nil))

(insn 593 591 594 17 (parallel [
            (set (reg:HI 0 ax [orig:163 D.6604 ] [163])
                (plus:HI (reg:HI 0 ax [orig:162 D.6603 ] [162])
                    (const_int 38 [0x26])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:141 256 {*addhi_1_lea}
     (nil))

(insn 594 593 595 17 (set (reg:HI 1 dx [orig:164 D.6605 ] [164])
        (reg:HI 0 ax [orig:163 D.6604 ] [163])) src/gui.c:141 65 {*movhi_internal}
     (nil))

(insn 595 594 596 17 (set (reg/f:SI 0 ax [440])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:141 64 {*movsi_internal}
     (nil))

(insn 596 595 597 17 (set (reg:SI 2 cx [442])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:141 64 {*movsi_internal}
     (nil))

(insn 597 596 598 17 (parallel [
            (set (reg:SI 2 cx [441])
                (plus:SI (reg:SI 2 cx [442])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:141 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 598 597 793 17 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [441])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [440]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:164 D.6605 ] [164])) src/gui.c:141 65 {*movhi_internal}
     (nil))

(jump_insn 793 598 794 17 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 17 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 794 793 601)

;; Start of basic block ( 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  16
(code_label 601 794 602 18 11 "" [1 uses])

(note 602 601 603 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 603 602 604 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 18 [0x12]))) src/gui.c:142 6 {*cmpsi_1}
     (nil))

(jump_insn 604 603 605 18 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 620)
            (pc))) src/gui.c:142 591 {*jcc_1}
     (nil)
 -> 620)
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)
;; Succ edge  20

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 165 166 167 168 169 443 444 445 446 447 448

;; Pred edge  18 (fallthru)
(note 605 604 606 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 606 605 607 19 (set (reg:SI 0 ax [443])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:143 64 {*movsi_internal}
     (nil))

(insn 607 606 608 19 (parallel [
            (set (reg:SI 1 dx [orig:165 D.6609 ] [165])
                (plus:SI (reg:SI 0 ax [443])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:143 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 608 607 609 19 (set (reg/f:SI 0 ax [444])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:143 64 {*movsi_internal}
     (nil))

(insn 609 608 610 19 (parallel [
            (set (reg:SI 1 dx [445])
                (plus:SI (reg:SI 1 dx [orig:165 D.6609 ] [165])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:143 252 {*addsi_1}
     (nil))

(insn 610 609 612 19 (set (reg:HI 0 ax [orig:166 D.6610 ] [166])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [445])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [444]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6609_117].x+0 S2 A32])) src/gui.c:143 65 {*movhi_internal}
     (nil))

(insn 612 610 613 19 (parallel [
            (set (reg:HI 0 ax [orig:168 D.6612 ] [168])
                (plus:HI (reg:HI 0 ax [orig:167 D.6611 ] [167])
                    (const_int 74 [0x4a])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:143 256 {*addhi_1_lea}
     (nil))

(insn 613 612 614 19 (set (reg:HI 1 dx [orig:169 D.6613 ] [169])
        (reg:HI 0 ax [orig:168 D.6612 ] [168])) src/gui.c:143 65 {*movhi_internal}
     (nil))

(insn 614 613 615 19 (set (reg/f:SI 0 ax [446])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:143 64 {*movsi_internal}
     (nil))

(insn 615 614 616 19 (set (reg:SI 2 cx [448])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:143 64 {*movsi_internal}
     (nil))

(insn 616 615 617 19 (parallel [
            (set (reg:SI 2 cx [447])
                (plus:SI (reg:SI 2 cx [448])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:143 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 617 616 795 19 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [447])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [446]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:169 D.6613 ] [169])) src/gui.c:143 65 {*movhi_internal}
     (nil))

(jump_insn 795 617 796 19 (set (pc)
        (label_ref 634)) 606 {jump}
     (nil)
 -> 634)
;; End of basic block 19 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 [100.0%] 

(barrier 796 795 620)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 170 171 172 173 174 449 450 451 452 453 454

;; Pred edge  18
(code_label 620 796 621 20 12 "" [1 uses])

(note 621 620 622 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 622 621 623 20 (set (reg:SI 0 ax [449])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:145 64 {*movsi_internal}
     (nil))

(insn 623 622 624 20 (parallel [
            (set (reg:SI 1 dx [orig:170 D.6615 ] [170])
                (plus:SI (reg:SI 0 ax [449])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:145 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 624 623 625 20 (set (reg/f:SI 0 ax [450])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:145 64 {*movsi_internal}
     (nil))

(insn 625 624 626 20 (parallel [
            (set (reg:SI 1 dx [451])
                (plus:SI (reg:SI 1 dx [orig:170 D.6615 ] [170])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:145 252 {*addsi_1}
     (nil))

(insn 626 625 628 20 (set (reg:HI 0 ax [orig:171 D.6616 ] [171])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [451])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [450]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[D.6615_122].x+0 S2 A32])) src/gui.c:145 65 {*movhi_internal}
     (nil))

(insn 628 626 629 20 (parallel [
            (set (reg:HI 0 ax [orig:173 D.6618 ] [173])
                (plus:HI (reg:HI 0 ax [orig:172 D.6617 ] [172])
                    (const_int 38 [0x26])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:145 256 {*addhi_1_lea}
     (nil))

(insn 629 628 630 20 (set (reg:HI 1 dx [orig:174 D.6619 ] [174])
        (reg:HI 0 ax [orig:173 D.6618 ] [173])) src/gui.c:145 65 {*movhi_internal}
     (nil))

(insn 630 629 631 20 (set (reg/f:SI 0 ax [452])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:145 64 {*movsi_internal}
     (nil))

(insn 631 630 632 20 (set (reg:SI 2 cx [454])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:145 64 {*movsi_internal}
     (nil))

(insn 632 631 633 20 (parallel [
            (set (reg:SI 2 cx [453])
                (plus:SI (reg:SI 2 cx [454])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:145 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 633 632 634 20 (set (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 2 cx [453])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [452]))
                (const_int 4 [0x4])) [0 display_9(D)->positions[i_2].x+0 S2 A32])
        (reg:HI 1 dx [orig:174 D.6619 ] [174])) src/gui.c:145 65 {*movhi_internal}
     (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 (fallthru)

;; Start of basic block ( 20 9 11 13 15 17 19) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  20 (fallthru)
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [100.0%] 
;; Pred edge  13 [100.0%] 
;; Pred edge  15 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  19 [100.0%] 
(code_label 634 633 635 21 7 "" [6 uses])

(note 635 634 636 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 636 635 637 21 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:126 252 {*addsi_1}
     (nil))
;; End of basic block 21 -> ( 22)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)

;; Start of basic block ( 21 7) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  21 (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 637 636 638 22 5 "" [1 uses])

(note 638 637 640 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 640 638 641 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 23 [0x17]))) src/gui.c:126 6 {*cmpsi_1}
     (nil))

(jump_insn 641 640 642 22 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 639)
            (pc))) src/gui.c:126 591 {*jcc_1}
     (nil)
 -> 639)
;; End of basic block 22 -> ( 8 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8
;; Succ edge  23 (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 175 176 177 178 455 456 457 458 459 460 461 462 463 464 465 466

;; Pred edge  22 (fallthru)
(note 642 641 643 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 643 642 644 23 (set (reg/f:SI 0 ax [455])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:148 64 {*movsi_internal}
     (nil))

(insn 644 643 645 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [455])
                (const_int 324 [0x144])) [0 display_9(D)->positions[24].x+0 S2 A32])
        (const_int 300 [0x12c])) src/gui.c:148 65 {*movhi_internal}
     (nil))

(insn 645 644 646 23 (set (reg/f:SI 0 ax [456])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:149 64 {*movsi_internal}
     (nil))

(insn 646 645 647 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [456])
                (const_int 326 [0x146])) [0 display_9(D)->positions[24].y+0 S2 A16])
        (const_int 480 [0x1e0])) src/gui.c:149 65 {*movhi_internal}
     (nil))

(insn 647 646 648 23 (set (reg/f:SI 0 ax [457])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:151 64 {*movsi_internal}
     (nil))

(insn 648 647 649 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [457])
                (const_int 332 [0x14c])) [0 display_9(D)->positions[25].x+0 S2 A32])
        (const_int 568 [0x238])) src/gui.c:151 65 {*movhi_internal}
     (nil))

(insn 649 648 650 23 (set (reg/f:SI 0 ax [458])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:152 64 {*movsi_internal}
     (nil))

(insn 650 649 651 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [458])
                (const_int 334 [0x14e])) [0 display_9(D)->positions[25].y+0 S2 A16])
        (const_int 140 [0x8c])) src/gui.c:152 65 {*movhi_internal}
     (nil))

(insn 651 650 652 23 (set (reg/f:SI 0 ax [459])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:154 64 {*movsi_internal}
     (nil))

(insn 652 651 653 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [459])
                (const_int 340 [0x154])) [0 display_9(D)->positions[26].x+0 S2 A32])
        (const_int 300 [0x12c])) src/gui.c:154 65 {*movhi_internal}
     (nil))

(insn 653 652 654 23 (set (reg/f:SI 0 ax [460])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:155 64 {*movsi_internal}
     (nil))

(insn 654 653 655 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [460])
                (const_int 342 [0x156])) [0 display_9(D)->positions[26].y+0 S2 A16])
        (const_int 220 [0xdc])) src/gui.c:155 65 {*movhi_internal}
     (nil))

(insn 655 654 656 23 (set (reg/f:SI 0 ax [461])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:157 64 {*movsi_internal}
     (nil))

(insn 656 655 657 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [461])
                (const_int 348 [0x15c])) [0 display_9(D)->positions[27].x+0 S2 A32])
        (const_int 568 [0x238])) src/gui.c:157 65 {*movhi_internal}
     (nil))

(insn 657 656 658 23 (set (reg/f:SI 0 ax [462])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:158 64 {*movsi_internal}
     (nil))

(insn 658 657 659 23 (set (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [462])
                (const_int 350 [0x15e])) [0 display_9(D)->positions[27].y+0 S2 A16])
        (const_int 590 [0x24e])) src/gui.c:158 65 {*movhi_internal}
     (nil))

(insn 659 658 660 23 (set (reg/f:SI 0 ax [463])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 660 659 661 23 (set (reg:SI 1 dx [orig:175 D.6620 ] [175])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [463])
                (const_int 128 [0x80])) [0 display_9(D)->window_height+0 S4 A32])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 661 660 662 23 (set (reg/f:SI 0 ax [464])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 662 661 663 23 (set (reg:SI 0 ax [orig:176 D.6621 ] [176])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [464])
                (const_int 124 [0x7c])) [0 display_9(D)->window_width+0 S4 A32])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 663 662 664 23 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (const_int 1073741825 [0x40000001])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 664 663 665 23 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (const_int 32 [0x20])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 665 664 666 23 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:175 D.6620 ] [175])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 666 665 667 23 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:176 D.6621 ] [176])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(call_insn 667 666 669 23 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_SetVideoMode") [flags 0x41]  <function_decl 0x4079f880 SDL_SetVideoMode>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:161 927 {*call_value_0}
     (nil)
    (nil))

(insn 669 667 670 23 (set (reg/f:SI 1 dx [465])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 670 669 671 23 (set (mem/s/f/j:SI (reg/f:SI 1 dx [465]) [0 display_9(D)->screen+0 S4 A32])
        (reg/f:SI 0 ax [orig:177 D.6622 ] [177])) src/gui.c:161 64 {*movsi_internal}
     (nil))

(insn 671 670 672 23 (set (reg/f:SI 0 ax [466])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:163 64 {*movsi_internal}
     (nil))

(insn 672 671 673 23 (set (reg/f:SI 0 ax [orig:178 D.6623 ] [178])
        (mem/s/f/j:SI (reg/f:SI 0 ax [466]) [0 display_9(D)->screen+0 S4 A32])) src/gui.c:163 64 {*movsi_internal}
     (nil))

(insn 673 672 674 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:SI 0 ax [orig:178 D.6623 ] [178])
            (const_int 0 [0]))) src/gui.c:163 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 674 673 675 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 694)
            (pc))) src/gui.c:163 591 {*jcc_1}
     (nil)
 -> 694)
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)
;; Succ edge  25

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 179 180 181 182 467 468

;; Pred edge  23 (fallthru)
(note 675 674 676 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(call_insn 676 675 678 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_GetError") [flags 0x41]  <function_decl 0x40773880 SDL_GetError>) [0 S1 A8])
            (const_int 0 [0]))) src/gui.c:165 927 {*call_value_0}
     (nil)
    (nil))

(insn 678 676 679 24 (set (reg/f:SI 2 cx [orig:180 D.6627 ] [180])
        (symbol_ref/f:SI ("*.LC16") [flags 0x2]  <var_decl 0x408fdcc0 *.LC16>)) src/gui.c:165 64 {*movsi_internal}
     (nil))

(insn 679 678 681 24 (set (reg/f:SI 1 dx [orig:181 stderr.53 ] [181])
        (mem/f/c/i:SI (symbol_ref:SI ("stderr") [flags 0x40]  <var_decl 0x40711120 stderr>) [0 stderr+0 S4 A32])) src/gui.c:165 64 {*movsi_internal}
     (nil))

(insn 681 679 682 24 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:179 D.6626 ] [179])) src/gui.c:165 64 {*movsi_internal}
     (nil))

(insn 682 681 683 24 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:180 D.6627 ] [180])) src/gui.c:165 64 {*movsi_internal}
     (nil))

(insn 683 682 684 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 1 dx [orig:182 stderr.54 ] [182])) src/gui.c:165 64 {*movsi_internal}
     (nil))

(call_insn 684 683 685 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fprintf") [flags 0x41]  <function_decl 0x406b1300 fprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:165 927 {*call_value_0}
     (nil)
    (nil))

(insn 685 684 686 24 (set (reg/f:SI 0 ax [467])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:166 64 {*movsi_internal}
     (nil))

(insn 686 685 687 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [467])) src/gui.c:166 64 {*movsi_internal}
     (nil))

(call_insn 687 686 688 24 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:166 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 688 687 689 24 (set (reg/f:SI 0 ax [468])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:167 64 {*movsi_internal}
     (nil))

(insn 689 688 690 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [468])) src/gui.c:167 64 {*movsi_internal}
     (nil))

(call_insn 690 689 691 24 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:167 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 691 690 692 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:168 64 {*movsi_internal}
     (nil))

(call_insn 692 691 693 24 (call (mem:QI (symbol_ref:SI ("exit") [flags 0x41]  <function_decl 0x406bd980 exit>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:168 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;; End of basic block 24 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 693 692 694)

;; Start of basic block ( 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 183

;; Pred edge  23
(code_label 694 693 695 25 14 "" [1 uses])

(note 695 694 696 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 696 695 697 25 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:171 64 {*movsi_internal}
     (nil))

(insn 697 696 698 25 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC17") [flags 0x2]  <var_decl 0x408fdd20 *.LC17>)) src/gui.c:171 64 {*movsi_internal}
     (nil))

(call_insn 698 697 699 25 (call (mem:QI (symbol_ref:SI ("SDL_WM_SetCaption") [flags 0x41]  <function_decl 0x407d1e00 SDL_WM_SetCaption>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:171 618 {*call_0}
     (nil)
    (nil))

(call_insn 699 698 701 25 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("TTF_Init") [flags 0x41]  <function_decl 0x407fac00 TTF_Init>) [0 S1 A8])
            (const_int 0 [0]))) src/gui.c:174 927 {*call_value_0}
     (nil)
    (nil))

(insn 701 699 702 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:183 D.6630 ] [183])
            (const_int -1 [0xffffffffffffffff]))) src/gui.c:174 6 {*cmpsi_1}
     (nil))

(jump_insn 702 701 703 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 722)
            (pc))) src/gui.c:174 591 {*jcc_1}
     (nil)
 -> 722)
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26 (fallthru)
;; Succ edge  27

;; Start of basic block ( 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 184 185 186 187 469 470

;; Pred edge  25 (fallthru)
(note 703 702 704 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(call_insn 704 703 706 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_GetError") [flags 0x41]  <function_decl 0x40773880 SDL_GetError>) [0 S1 A8])
            (const_int 0 [0]))) src/gui.c:176 927 {*call_value_0}
     (nil)
    (nil))

(insn 706 704 707 26 (set (reg/f:SI 2 cx [orig:185 D.6634 ] [185])
        (symbol_ref/f:SI ("*.LC18") [flags 0x2]  <var_decl 0x408fdd80 *.LC18>)) src/gui.c:176 64 {*movsi_internal}
     (nil))

(insn 707 706 709 26 (set (reg/f:SI 1 dx [orig:186 stderr.55 ] [186])
        (mem/f/c/i:SI (symbol_ref:SI ("stderr") [flags 0x40]  <var_decl 0x40711120 stderr>) [0 stderr+0 S4 A32])) src/gui.c:176 64 {*movsi_internal}
     (nil))

(insn 709 707 710 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:184 D.6633 ] [184])) src/gui.c:176 64 {*movsi_internal}
     (nil))

(insn 710 709 711 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:185 D.6634 ] [185])) src/gui.c:176 64 {*movsi_internal}
     (nil))

(insn 711 710 712 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 1 dx [orig:187 stderr.56 ] [187])) src/gui.c:176 64 {*movsi_internal}
     (nil))

(call_insn 712 711 713 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("fprintf") [flags 0x41]  <function_decl 0x406b1300 fprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:176 927 {*call_value_0}
     (nil)
    (nil))

(insn 713 712 714 26 (set (reg/f:SI 0 ax [469])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:177 64 {*movsi_internal}
     (nil))

(insn 714 713 715 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [469])) src/gui.c:177 64 {*movsi_internal}
     (nil))

(call_insn 715 714 716 26 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:177 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 716 715 717 26 (set (reg/f:SI 0 ax [470])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:178 64 {*movsi_internal}
     (nil))

(insn 717 716 718 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [470])) src/gui.c:178 64 {*movsi_internal}
     (nil))

(call_insn 718 717 719 26 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:178 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 719 718 720 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:179 64 {*movsi_internal}
     (nil))

(call_insn 720 719 721 26 (call (mem:QI (symbol_ref:SI ("exit") [flags 0x41]  <function_decl 0x406bd980 exit>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:179 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (nil))
;; End of basic block 26 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 721 720 722)

;; Start of basic block ( 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 188 189 190 191 192 193 194 195 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493

;; Pred edge  25
(code_label 722 721 723 27 15 "" [1 uses])

(note 723 722 724 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 724 723 725 27 (set (reg/f:SI 0 ax [471])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:183 64 {*movsi_internal}
     (nil))

(insn 725 724 727 27 (set (reg/f:SI 0 ax [orig:188 D.6637 ] [188])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [471])
                (const_int 116 [0x74])) [0 display_9(D)->font_path+0 S4 A32])) src/gui.c:183 64 {*movsi_internal}
     (nil))

(insn 727 725 728 27 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:189 D.6638 ] [189])) src/gui.c:183 64 {*movsi_internal}
     (nil))

(insn 728 727 729 27 (set (reg/f:SI 0 ax [472])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:183 64 {*movsi_internal}
     (nil))

(insn 729 728 730 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [472])) src/gui.c:183 64 {*movsi_internal}
     (nil))

(call_insn 730 729 731 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:183 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 731 730 738 27 (set (reg/f:SI 1 dx [orig:190 D.6639 ] [190])
        (symbol_ref/f:SI ("*.LC19") [flags 0x2]  <var_decl 0x408fdde0 *.LC19>)) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 738 731 732 27 (set (reg:SI 0 ax [473])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 732 738 733 27 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 733 732 734 27 (set (reg:SI 3 bx [476])
        (reg:SI 0 ax [473])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 734 733 834 27 (set (reg:QI 0 ax [478])
        (const_int 0 [0])) src/gui.c:184 66 {*movqi_internal}
     (nil))

(insn 834 734 836 27 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 836 834 735 27 (set (reg:SI 5 di)
        (reg:SI 3 bx [476])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 735 836 835 27 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [478])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:184 876 {*strlenqi_1}
     (nil))

(insn 835 735 736 27 (set (reg:SI 0 ax [474])
        (reg:SI 2 cx)) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 736 835 737 27 (set (reg:SI 0 ax [475])
        (not:SI (reg:SI 0 ax [474]))) src/gui.c:184 482 {*one_cmplsi2_1}
     (nil))

(insn 737 736 739 27 (parallel [
            (set (reg:SI 0 ax [orig:191 D.6640 ] [191])
                (plus:SI (reg:SI 0 ax [475])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:184 252 {*addsi_1}
     (nil))

(insn 739 737 740 27 (parallel [
            (set (reg/f:SI 0 ax [orig:192 D.6641 ] [192])
                (plus:SI (reg:SI 0 ax [orig:191 D.6640 ] [191])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:184 252 {*addsi_1}
     (nil))

(insn 740 739 741 27 (set (reg:SI 2 cx [479])
        (mem:SI (reg/f:SI 1 dx [orig:190 D.6639 ] [190]) [0 S4 A8])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 741 740 742 27 (set (mem:SI (reg/f:SI 0 ax [orig:192 D.6641 ] [192]) [0 S4 A8])
        (reg:SI 2 cx [479])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 742 741 743 27 (set (reg:SI 2 cx [480])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:190 D.6639 ] [190])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 743 742 744 27 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:192 D.6641 ] [192])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [480])) src/gui.c:184 64 {*movsi_internal}
     (nil))

(insn 744 743 745 27 (set (reg:HI 1 dx [481])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:190 D.6639 ] [190])
                (const_int 8 [0x8])) [0 S2 A8])) src/gui.c:184 65 {*movhi_internal}
     (nil))

(insn 745 744 746 27 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:192 D.6641 ] [192])
                (const_int 8 [0x8])) [0 S2 A8])
        (reg:HI 1 dx [481])) src/gui.c:184 65 {*movhi_internal}
     (nil))

(insn 746 745 747 27 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 22 [0x16])) src/gui.c:185 64 {*movsi_internal}
     (nil))

(insn 747 746 748 27 (set (reg/f:SI 0 ax [482])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:185 64 {*movsi_internal}
     (nil))

(insn 748 747 749 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [482])) src/gui.c:185 64 {*movsi_internal}
     (nil))

(call_insn 749 748 751 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("TTF_OpenFont") [flags 0x41]  <function_decl 0x407fac80 TTF_OpenFont>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:185 927 {*call_value_0}
     (nil)
    (nil))

(insn 751 749 752 27 (set (reg/f:SI 1 dx [483])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:185 64 {*movsi_internal}
     (nil))

(insn 752 751 753 27 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [483])
                (const_int 36 [0x24])) [0 display_9(D)->font+0 S4 A32])
        (reg/f:SI 0 ax [orig:193 D.6642 ] [193])) src/gui.c:185 64 {*movsi_internal}
     (nil))

(insn 753 752 754 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 12 [0xc])) src/gui.c:188 64 {*movsi_internal}
     (nil))

(call_insn 754 753 756 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:188 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 756 754 757 27 (set (reg/f:SI 1 dx [orig:194 D.6643 ] [194])
        (reg/f:SI 0 ax [484])) src/gui.c:188 64 {*movsi_internal}
     (nil))

(insn 757 756 758 27 (set (reg/f:SI 0 ax [485])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:188 64 {*movsi_internal}
     (nil))

(insn 758 757 759 27 (set (mem/s/f/j:SI (reg/f:SI 0 ax [485]) [0 game_148(D)->player1_name+0 S4 A32])
        (reg/f:SI 1 dx [orig:194 D.6643 ] [194])) src/gui.c:188 64 {*movsi_internal}
     (nil))

(insn 759 758 760 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 12 [0xc])) src/gui.c:189 64 {*movsi_internal}
     (nil))

(call_insn 760 759 762 27 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:189 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 762 760 763 27 (set (reg/f:SI 1 dx [orig:195 D.6644 ] [195])
        (reg/f:SI 0 ax [486])) src/gui.c:189 64 {*movsi_internal}
     (nil))

(insn 763 762 764 27 (set (reg/f:SI 0 ax [487])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:189 64 {*movsi_internal}
     (nil))

(insn 764 763 765 27 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [487])
                (const_int 4 [0x4])) [0 game_148(D)->player2_name+0 S4 A32])
        (reg/f:SI 1 dx [orig:195 D.6644 ] [195])) src/gui.c:189 64 {*movsi_internal}
     (nil))

(insn 765 764 766 27 (set (reg/f:SI 0 ax [488])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:190 64 {*movsi_internal}
     (nil))

(insn 766 765 767 27 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [488])
                (const_int 8 [0x8])) [0 game_148(D)->player1_checker+0 S4 A32])
        (const_int 0 [0])) src/gui.c:190 64 {*movsi_internal}
     (nil))

(insn 767 766 768 27 (set (reg/f:SI 0 ax [489])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:191 64 {*movsi_internal}
     (nil))

(insn 768 767 769 27 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [489])
                (const_int 12 [0xc])) [0 game_148(D)->player2_checker+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:191 64 {*movsi_internal}
     (nil))

(insn 769 768 770 27 (set (reg/f:SI 0 ax [490])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:192 64 {*movsi_internal}
     (nil))

(insn 770 769 771 27 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [490])
                (const_int 16 [0x10])) [0 game_148(D)->withDouble+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:192 64 {*movsi_internal}
     (nil))

(insn 771 770 772 27 (set (reg/f:SI 0 ax [491])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:193 64 {*movsi_internal}
     (nil))

(insn 772 771 773 27 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [491])
                (const_int 20 [0x14])) [0 game_148(D)->scoreLimit+0 S4 A32])
        (const_int 5 [0x5])) src/gui.c:193 64 {*movsi_internal}
     (nil))

(insn 773 772 774 27 (set (reg/f:SI 0 ax [492])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 temp_path+0 S4 A32])) src/gui.c:195 64 {*movsi_internal}
     (nil))

(insn 774 773 775 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [492])) src/gui.c:195 64 {*movsi_internal}
     (nil))

(call_insn 775 774 776 27 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:195 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 776 775 777 27 (set (reg/f:SI 0 ax [493])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_name+0 S4 A32])) src/gui.c:196 64 {*movsi_internal}
     (nil))

(insn 777 776 778 27 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [493])) src/gui.c:196 64 {*movsi_internal}
     (nil))

(call_insn 778 777 797 27 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:196 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;; End of basic block 27 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 797 778 0 NOTE_INSN_DELETED)


;; Function Display_Message (Display_Message)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a5 (r94,l0) best AREG, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a37 (r81,l0) best AREG, cover GENERAL_REGS
    r80: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a38 (r80,l0) best CREG, cover GENERAL_REGS
    r79: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a36 (r79,l0) best DIREG, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a35 (r77,l0) best CREG, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r94,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a12(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a13(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a14(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a16(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a17(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a18(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a21(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a22(r64,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:12
  a23(r88,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a24(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a25(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a26(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a27(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a28(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a34(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a35(r77,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a36(r79,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a37(r81,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a38(r80,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a39(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7

   Insn 72(l0): point = 0
   Insn 71(l0): point = 2
   Insn 70(l0): point = 4
   Insn 69(l0): point = 6
   Insn 68(l0): point = 8
   Insn 67(l0): point = 10
   Insn 66(l0): point = 12
   Insn 65(l0): point = 14
   Insn 64(l0): point = 16
   Insn 63(l0): point = 18
   Insn 62(l0): point = 20
   Insn 61(l0): point = 22
   Insn 60(l0): point = 24
   Insn 59(l0): point = 26
   Insn 58(l0): point = 28
   Insn 57(l0): point = 30
   Insn 56(l0): point = 32
   Insn 55(l0): point = 34
   Insn 54(l0): point = 36
   Insn 53(l0): point = 38
   Insn 52(l0): point = 40
   Insn 51(l0): point = 42
   Insn 48(l0): point = 45
   Insn 47(l0): point = 47
   Insn 46(l0): point = 49
   Insn 45(l0): point = 51
   Insn 44(l0): point = 53
   Insn 43(l0): point = 55
   Insn 42(l0): point = 57
   Insn 41(l0): point = 59
   Insn 40(l0): point = 61
   Insn 39(l0): point = 63
   Insn 38(l0): point = 65
   Insn 37(l0): point = 67
   Insn 36(l0): point = 69
   Insn 35(l0): point = 71
   Insn 34(l0): point = 73
   Insn 33(l0): point = 75
   Insn 32(l0): point = 77
   Insn 31(l0): point = 79
   Insn 30(l0): point = 81
   Insn 29(l0): point = 83
   Insn 28(l0): point = 85
   Insn 27(l0): point = 87
   Insn 26(l0): point = 89
   Insn 25(l0): point = 91
   Insn 24(l0): point = 93
   Insn 23(l0): point = 95
   Insn 22(l0): point = 97
   Insn 21(l0): point = 99
   Insn 20(l0): point = 101
   Insn 19(l0): point = 103
   Insn 18(l0): point = 105
   Insn 17(l0): point = 107
   Insn 16(l0): point = 109
   Insn 14(l0): point = 112
   Insn 13(l0): point = 114
   Insn 12(l0): point = 116
   Insn 10(l0): point = 118
   Insn 9(l0): point = 120
   Insn 8(l0): point = 122
   Insn 7(l0): point = 124
   Insn 6(l0): point = 126
   Insn 5(l0): point = 128
   Insn 11(l0): point = 130
 a0(r98): [3..4]
 a1(r97): [9..10]
 a2(r75): [15..20]
 a3(r96): [17..18]
 a4(r95): [21..22]
 a5(r94): [25..26]
 a6(r74): [31..40]
 a7(r93): [33..34]
 a8(r92): [37..38]
 a9(r91): [41..42]
 a10(r73): [46..47]
 a11(r72): [48..49]
 a12(r71): [50..51]
 a13(r70): [52..53]
 a14(r69): [56..57]
 a15(r68): [58..59]
 a16(r67): [60..61]
 a17(r66): [62..63]
 a18(r63): [62..87]
 a19(r65): [64..65]
 a20(r90): [66..67]
 a21(r89): [68..69]
 a22(r64): [70..73]
 a23(r88): [70..71]
 a24(r86): [78..83] [74..75]
 a25(r87): [76..77]
 a26(r85): [80..85]
 a27(r62): [88..89]
 a28(r61): [94..103]
 a29(r60): [98..107]
 a30(r84): [100..101]
 a31(r83): [104..105]
 a32(r82): [108..109]
 a33(r59): [117..118]
 a34(r78): [119..120]
 a35(r77): [121..122]
 a36(r79): [122..126]
 a37(r81): [123..124]
 a38(r80): [123..128]
 a39(r76): [127..130]
Compressing live ranges: from 133 to 64 - 48%
Ranges after the compression:
 a0(r98): [0..1]
 a1(r97): [2..3]
 a2(r75): [4..5]
 a3(r96): [4..5]
 a4(r95): [6..7]
 a5(r94): [8..9]
 a6(r74): [10..13]
 a7(r93): [10..11]
 a8(r92): [12..13]
 a9(r91): [14..15]
 a10(r73): [16..17]
 a11(r72): [18..19]
 a12(r71): [20..21]
 a13(r70): [22..23]
 a14(r69): [24..25]
 a15(r68): [26..27]
 a16(r67): [28..29]
 a17(r66): [30..31]
 a18(r63): [30..45]
 a19(r65): [32..33]
 a20(r90): [34..35]
 a21(r89): [36..37]
 a22(r64): [38..39]
 a23(r88): [38..39]
 a24(r86): [44..45] [40..41]
 a25(r87): [42..43]
 a26(r85): [44..45]
 a27(r62): [46..47]
 a28(r61): [48..49]
 a29(r60): [48..51]
 a30(r84): [48..49]
 a31(r83): [50..51]
 a32(r82): [52..53]
 a33(r59): [54..55]
 a34(r78): [56..57]
 a35(r77): [58..59]
 a36(r79): [59..61]
 a37(r81): [60..61]
 a38(r80): [60..63]
 a39(r76): [62..63]
  regions=1, blocks=5, points=64
    allocnos=40 (big 0), copies=0, conflicts=0, ranges=41
Disposition:
   33:r59  l0     0   29:r60  l0     1   28:r61  l0     0   27:r62  l0     0
   18:r63  l0     2   22:r64  l0     0   19:r65  l0     0   17:r66  l0     0
   16:r67  l0     0   15:r68  l0     0   14:r69  l0     0   13:r70  l0     0
   12:r71  l0     0   11:r72  l0     0   10:r73  l0     0    6:r74  l0     0
    2:r75  l0     0   39:r76  l0     0   35:r77  l0     0   34:r78  l0     0
   36:r79  l0     1   38:r80  l0     2   37:r81  l0     0   32:r82  l0     0
   31:r83  l0     0   30:r84  l0     2   26:r85  l0     1   24:r86  l0     0
   25:r87  l0     0   23:r88  l0     1   21:r89  l0     0   20:r90  l0     0
    9:r91  l0     0    8:r92  l0     1    7:r93  l0     1    5:r94  l0     0
    4:r95  l0     0    3:r96  l0     1    1:r97  l0     0    0:r98  l0     0
+++Costs: overall 3, reg 3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 7, dead_or_set: 76
insn=5, live_throughout: 7, 76, dead_or_set: 80
insn=6, live_throughout: 7, 80, dead_or_set: 76, 79
insn=7, live_throughout: 7, 79, 80, dead_or_set: 81
insn=8, live_throughout: 7, dead_or_set: 77, 79, 80, 81
insn=9, live_throughout: 7, dead_or_set: 77, 78
insn=10, live_throughout: 7, dead_or_set: 59, 78
insn=12, live_throughout: 7, dead_or_set: 59
insn=13, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 82
insn=17, live_throughout: 7, dead_or_set: 60, 82
insn=18, live_throughout: 7, 60, dead_or_set: 83
insn=19, live_throughout: 7, 60, dead_or_set: 61, 83
insn=20, live_throughout: 7, 60, 61, dead_or_set: 84
insn=21, live_throughout: 7, 60, 61, dead_or_set: 84
insn=22, live_throughout: 7, 61, dead_or_set: 60
insn=23, live_throughout: 7, 61, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 61
insn=25, live_throughout: 7, dead_or_set: 0
insn=26, live_throughout: 7, dead_or_set: 62
insn=27, live_throughout: 7, dead_or_set: 62, 63
insn=28, live_throughout: 7, 63, dead_or_set: 85
insn=29, live_throughout: 7, 63, 85, dead_or_set: 86
insn=30, live_throughout: 7, 63, 85, dead_or_set: 86
insn=31, live_throughout: 7, 63, dead_or_set: 85, 86
insn=32, live_throughout: 7, 63, dead_or_set: 86, 87
insn=33, live_throughout: 7, 63, dead_or_set: 86, 87
insn=34, live_throughout: 7, 63, dead_or_set: 64, 86
insn=35, live_throughout: 7, 63, 64, dead_or_set: 88
insn=36, live_throughout: 7, 63, dead_or_set: 64, 88, 89
insn=37, live_throughout: 7, 63, dead_or_set: 89, 90
insn=38, live_throughout: 7, 63, dead_or_set: 65, 90
insn=39, live_throughout: 7, 63, dead_or_set: 65, 66
insn=40, live_throughout: 7, dead_or_set: 63, 66, 67
insn=41, live_throughout: 7, dead_or_set: 67, 68
insn=42, live_throughout: 7, dead_or_set: 68, 69
insn=43, live_throughout: 7, dead_or_set: 69
insn=44, live_throughout: 7, dead_or_set: 70
insn=45, live_throughout: 7, dead_or_set: 70, 71
insn=46, live_throughout: 7, dead_or_set: 71, 72
insn=47, live_throughout: 7, dead_or_set: 72, 73
insn=48, live_throughout: 7, dead_or_set: 73
insn=49, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 91
insn=52, live_throughout: 7, dead_or_set: 74, 91
insn=53, live_throughout: 7, 74, dead_or_set: 92
insn=54, live_throughout: 7, 74, dead_or_set: 92
insn=55, live_throughout: 7, 74, dead_or_set: 93
insn=56, live_throughout: 7, 74, dead_or_set: 93
insn=57, live_throughout: 7, dead_or_set: 74
insn=58, live_throughout: 7, dead_or_set: 0
insn=59, live_throughout: 7, dead_or_set: 0, 94
insn=60, live_throughout: 7, dead_or_set: 94
insn=61, live_throughout: 7, dead_or_set: 95
insn=62, live_throughout: 7, dead_or_set: 75, 95
insn=63, live_throughout: 7, 75, dead_or_set: 96
insn=64, live_throughout: 7, 75, dead_or_set: 96
insn=65, live_throughout: 7, dead_or_set: 75
insn=66, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 97
insn=68, live_throughout: 7, dead_or_set: 97
insn=69, live_throughout: 7, dead_or_set: 0
insn=70, live_throughout: 7, dead_or_set: 98
insn=71, live_throughout: 7, dead_or_set: 98
insn=72, live_throughout: 7, dead_or_set: 
changing reg in insn 10
changing reg in insn 12
changing reg in insn 17
changing reg in insn 22
changing reg in insn 19
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 40
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 57
changing reg in insn 62
changing reg in insn 65
changing reg in insn 11
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 8
changing reg in insn 6
changing reg in insn 8
changing reg in insn 5
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
Spilling for insn 8.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 35.
Spilling for insn 40.
Using reg 1 for reload 0
changing reg in insn 5
changing reg in insn 8
 Register 80 now on stack.

Spilling for insn 8.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 35.
Spilling for insn 40.
Using reg 1 for reload 0

Reloads for insn # 8
Reload 0: reload_in (SI) = (reg:SI 80)
	reload_out (SI) = (reg:SI 0 ax [77])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 80)
	reload_out_reg: (reg:SI 0 ax [77])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 1 dx [79])
	reload_out (SI) = (reg:SI 1 dx [79])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 1 dx [79])
	reload_out_reg: (reg:SI 1 dx [79])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 35
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:64 D.6472 ] [64])
	reload_out (SI) = (reg:SI 1 dx [88])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:64 D.6472 ] [64])
	reload_out_reg: (reg:SI 1 dx [88])
	reload_reg_rtx: (reg:SI 1 dx [88])

Reloads for insn # 40
Reload 0: reload_in (HI) = (reg:HI 2 cx [orig:63 D.6471 ] [63])
	reload_out (HI) = (reg:HI 0 ax [orig:67 D.6475 ] [67])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:HI 2 cx [orig:63 D.6471 ] [63])
	reload_out_reg: (reg:HI 0 ax [orig:67 D.6475 ] [67])
	reload_reg_rtx: (reg:HI 1 dx)
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 45.
deleting insn with uid = 47.
deleting insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 72.


Display_Message

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={31d,28u,1e} r1={15d,11u,1e} r2={9d,4u} r5={2d,1u} r6={1d,25u} r7={1d,20u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={2e} r17={18d,1u} r18={4d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 341{246d,91u,4e} in 64{60 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 76 77 78 79 80 81

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 2 5 2 (set (reg:SI 0 ax [76])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 message+0 S4 A32])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 5 11 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 1 dx [79])
        (reg:SI 0 ax [76])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 7 6 76 2 (set (reg:QI 0 ax [81])
        (const_int 0 [0])) src/gui.c:202 66 {*movqi_internal}
     (nil))

(insn 76 7 78 2 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 78 76 8 2 (set (reg:SI 5 di)
        (reg:SI 1 dx [79])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 8 78 77 2 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [81])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:202 876 {*strlenqi_1}
     (nil))

(insn 77 8 9 2 (set (reg:SI 0 ax [77])
        (reg:SI 2 cx)) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 9 77 10 2 (set (reg:SI 0 ax [78])
        (not:SI (reg:SI 0 ax [77]))) src/gui.c:202 482 {*one_cmplsi2_1}
     (nil))

(insn 10 9 12 2 (parallel [
            (set (reg:SI 0 ax [orig:59 D.6465 ] [59])
                (plus:SI (reg:SI 0 ax [78])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:202 252 {*addsi_1}
     (nil))

(insn 12 10 13 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 leng+0 S4 A32])
        (reg:SI 0 ax [orig:59 D.6465 ] [59])) src/gui.c:202 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 28 [0x1c])) [0 box+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:203 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) src/gui.c:203 591 {*jcc_1}
     (nil)
 -> 49)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 60 61 62 63 64 65 66 67 68 69 70 71 72 73 82 83 84 85 86 87 88 89 90

;; Pred edge  2 (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 3 (set (reg/f:SI 0 ax [82])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 17 16 18 3 (set (reg/f:SI 1 dx [orig:60 D.6468 ] [60])
        (mem/s/f/j:SI (reg/f:SI 0 ax [82]) [0 display_5(D)->screen+0 S4 A32])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 18 17 19 3 (set (reg/f:SI 0 ax [83])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 19 18 20 3 (set (reg/f:SI 0 ax [orig:61 D.6469 ] [61])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [83])
                (const_int 40 [0x28])) [0 display_5(D)->msg_box+0 S4 A32])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 20 19 21 3 (parallel [
            (set (reg:SI 2 cx [84])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:205 252 {*addsi_1}
     (nil))

(insn 21 20 22 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [84])) src/gui.c:205 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 8 [0x8]))
        (nil)))

(insn 22 21 23 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:60 D.6468 ] [60])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(insn 24 23 25 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:61 D.6469 ] [61])) src/gui.c:205 64 {*movsi_internal}
     (nil))

(call_insn 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:205 927 {*call_value_0}
     (nil)
    (nil))

(insn 26 25 27 3 (set (reg:HI 0 ax [orig:62 D.6470 ] [62])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 position.x+0 S2 A32])) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 27 26 28 3 (set (reg:HI 2 cx [orig:63 D.6471 ] [63])
        (reg:HI 0 ax [orig:62 D.6470 ] [62])) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 28 27 29 3 (set (reg:SI 1 dx [85])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 leng+0 S4 A32])) src/gui.c:207 64 {*movsi_internal}
     (nil))

(insn 29 28 30 3 (set (reg:SI 0 ax [86])
        (reg:SI 1 dx [85])) src/gui.c:207 64 {*movsi_internal}
     (nil))

(insn 30 29 31 3 (parallel [
            (set (reg:SI 0 ax [86])
                (ashift:SI (reg:SI 0 ax [86])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 497 {*ashlsi3_1}
     (nil))

(insn 31 30 32 3 (parallel [
            (set (reg:SI 0 ax [86])
                (plus:SI (reg:SI 0 ax [86])
                    (reg:SI 1 dx [85])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [85])
            (const_int 3 [0x3]))
        (nil)))

(insn 32 31 79 3 (parallel [
            (set (reg:SI 0 ax [87])
                (ashift:SI (reg:SI 0 ax [86])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 497 {*ashlsi3_1}
     (nil))

(insn 79 32 35 3 (set (reg:SI 1 dx [88])
        (reg:SI 0 ax [orig:64 D.6472 ] [64])) src/gui.c:207 64 {*movsi_internal}
     (nil))

(insn 35 79 36 3 (parallel [
            (set (reg:SI 1 dx [88])
                (lshiftrt:SI (reg:SI 1 dx [88])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 531 {*lshrsi3_1}
     (nil))

(insn 36 35 37 3 (parallel [
            (set (reg:SI 0 ax [89])
                (plus:SI (reg:SI 1 dx [88])
                    (reg:SI 0 ax [orig:64 D.6472 ] [64])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 252 {*addsi_1}
     (nil))

(insn 37 36 39 3 (parallel [
            (set (reg:SI 0 ax [90])
                (ashiftrt:SI (reg:SI 0 ax [89])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 532 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:64 D.6472 ] [64])
            (const_int 2 [0x2]))
        (nil)))

(insn 39 37 80 3 (set (reg:HI 0 ax [orig:66 D.6474 ] [66])
        (reg:HI 0 ax [orig:65 D.6473 ] [65])) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 80 39 40 3 (set (reg:HI 1 dx)
        (reg:HI 2 cx [orig:63 D.6471 ] [63])) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 40 80 81 3 (parallel [
            (set (reg:HI 1 dx)
                (minus:HI (reg:HI 1 dx)
                    (reg:HI 0 ax [orig:66 D.6474 ] [66])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 290 {*subhi_1}
     (nil))

(insn 81 40 41 3 (set (reg:HI 0 ax [orig:67 D.6475 ] [67])
        (reg:HI 1 dx)) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 41 81 43 3 (parallel [
            (set (reg:HI 0 ax [orig:68 D.6476 ] [68])
                (plus:HI (reg:HI 0 ax [orig:67 D.6475 ] [67])
                    (const_int 260 [0x104])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:207 256 {*addhi_1_lea}
     (nil))

(insn 43 41 44 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 position.x+0 S2 A32])
        (reg:HI 0 ax [orig:69 D.6477 ] [69])) src/gui.c:207 65 {*movhi_internal}
     (nil))

(insn 44 43 46 3 (set (reg:HI 0 ax [orig:70 D.6478 ] [70])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 18 [0x12])) [0 position.y+0 S2 A16])) src/gui.c:208 65 {*movhi_internal}
     (nil))

(insn 46 44 48 3 (parallel [
            (set (reg:HI 0 ax [orig:72 D.6480 ] [72])
                (plus:HI (reg:HI 0 ax [orig:71 D.6479 ] [71])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:208 256 {*addhi_1_lea}
     (nil))

(insn 48 46 49 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 18 [0x12])) [0 position.y+0 S2 A16])
        (reg:HI 0 ax [orig:73 D.6481 ] [73])) src/gui.c:208 65 {*movhi_internal}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 74 75 91 92 93 94 95 96 97 98

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 49 48 50 4 17 "" [1 uses])

(note 50 49 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 4 (set (reg/f:SI 0 ax [91])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 52 51 53 4 (set (reg/f:SI 0 ax [orig:74 D.6482 ] [74])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [91])
                (const_int 36 [0x24])) [0 display_5(D)->font+0 S4 A32])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 53 52 54 4 (set (reg:SI 1 dx [92])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 color+0 S4 A32])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 54 53 55 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [92])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 55 54 56 4 (set (reg/f:SI 1 dx [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 message+0 S4 A32])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 56 55 57 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 1 dx [93])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 57 56 58 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:74 D.6482 ] [74])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(call_insn 58 57 60 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("TTF_RenderText_Blended") [flags 0x41]  <function_decl 0x40801980 TTF_RenderText_Blended>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:210 927 {*call_value_0}
     (nil)
    (nil))

(insn 60 58 61 4 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])
        (reg:SI 0 ax [94])) src/gui.c:210 64 {*movsi_internal}
     (nil))

(insn 61 60 62 4 (set (reg/f:SI 0 ax [95])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(insn 62 61 63 4 (set (reg/f:SI 0 ax [orig:75 D.6483 ] [75])
        (mem/s/f/j:SI (reg/f:SI 0 ax [95]) [0 display_5(D)->screen+0 S4 A32])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(insn 63 62 64 4 (parallel [
            (set (reg:SI 1 dx [96])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:211 252 {*addsi_1}
     (nil))

(insn 64 63 65 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 1 dx [96])) src/gui.c:211 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 8 [0x8]))
        (nil)))

(insn 65 64 66 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:75 D.6483 ] [75])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(insn 66 65 67 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(insn 67 66 68 4 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(insn 68 67 69 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [97])) src/gui.c:211 64 {*movsi_internal}
     (nil))

(call_insn 69 68 70 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:211 927 {*call_value_0}
     (nil)
    (nil))

(insn 70 69 71 4 (set (reg/f:SI 0 ax [98])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])) src/gui.c:212 64 {*movsi_internal}
     (nil))

(insn 71 70 72 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [98])) src/gui.c:212 64 {*movsi_internal}
     (nil))

(call_insn 72 71 75 4 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:212 618 {*call_0}
     (nil)
    (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 75 72 0 NOTE_INSN_DELETED)


;; Function Display_Message_Click (Display_Message_Click)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 24 count 17 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a17 (r104,l0) best AREG, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a49 (r91,l0) best AREG, cover GENERAL_REGS
    r90: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a50 (r90,l0) best CREG, cover GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a48 (r89,l0) best DIREG, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a47 (r87,l0) best CREG, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r85,l0) best AREG, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a6 (r80,l0) best Q_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a8 (r78,l0) best Q_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r85,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11
  a2(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a3(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a4(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a5(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a6(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:7
  a7(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a8(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:2,2 DIREG:2,2 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a9(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r104,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a24(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a26(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a28(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a29(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a30(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a31(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a32(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a33(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a34(r65,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:12
  a35(r98,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a36(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a37(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a38(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a39(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a44(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a45(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a46(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a47(r87,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a48(r89,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a49(r91,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a50(r90,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a51(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7

   Insn 135(l0): point = 0
   Insn 132(l0): point = 2
   Insn 128(l0): point = 4
   Insn 144(l0): point = 7
   Insn 148(l0): point = 10
   Insn 142(l0): point = 13
   Insn 116(l0): point = 15
   Insn 114(l0): point = 18
   Insn 113(l0): point = 20
   Insn 112(l0): point = 22
   Insn 110(l0): point = 25
   Insn 109(l0): point = 27
   Insn 108(l0): point = 29
   Insn 106(l0): point = 32
   Insn 105(l0): point = 34
   Insn 104(l0): point = 36
   Insn 102(l0): point = 39
   Insn 101(l0): point = 41
   Insn 100(l0): point = 43
   Insn 98(l0): point = 46
   Insn 97(l0): point = 48
   Insn 96(l0): point = 50
   Insn 140(l0): point = 53
   Insn 91(l0): point = 55
   Insn 86(l0): point = 58
   Insn 85(l0): point = 60
   Insn 84(l0): point = 63
   Insn 83(l0): point = 65
   Insn 82(l0): point = 67
   Insn 81(l0): point = 69
   Insn 80(l0): point = 71
   Insn 79(l0): point = 73
   Insn 78(l0): point = 75
   Insn 76(l0): point = 78
   Insn 75(l0): point = 80
   Insn 74(l0): point = 82
   Insn 73(l0): point = 84
   Insn 72(l0): point = 86
   Insn 71(l0): point = 88
   Insn 70(l0): point = 90
   Insn 69(l0): point = 92
   Insn 68(l0): point = 94
   Insn 67(l0): point = 96
   Insn 66(l0): point = 98
   Insn 65(l0): point = 100
   Insn 64(l0): point = 102
   Insn 63(l0): point = 104
   Insn 62(l0): point = 106
   Insn 61(l0): point = 108
   Insn 60(l0): point = 110
   Insn 59(l0): point = 112
   Insn 58(l0): point = 114
   Insn 57(l0): point = 116
   Insn 56(l0): point = 118
   Insn 55(l0): point = 120
   Insn 54(l0): point = 122
   Insn 53(l0): point = 124
   Insn 52(l0): point = 126
   Insn 51(l0): point = 128
   Insn 48(l0): point = 131
   Insn 47(l0): point = 133
   Insn 46(l0): point = 135
   Insn 45(l0): point = 137
   Insn 44(l0): point = 139
   Insn 43(l0): point = 141
   Insn 42(l0): point = 143
   Insn 41(l0): point = 145
   Insn 40(l0): point = 147
   Insn 39(l0): point = 149
   Insn 38(l0): point = 151
   Insn 37(l0): point = 153
   Insn 36(l0): point = 155
   Insn 35(l0): point = 157
   Insn 34(l0): point = 159
   Insn 33(l0): point = 161
   Insn 32(l0): point = 163
   Insn 31(l0): point = 165
   Insn 30(l0): point = 167
   Insn 29(l0): point = 169
   Insn 28(l0): point = 171
   Insn 27(l0): point = 173
   Insn 26(l0): point = 175
   Insn 25(l0): point = 177
   Insn 24(l0): point = 179
   Insn 23(l0): point = 181
   Insn 22(l0): point = 183
   Insn 21(l0): point = 185
   Insn 20(l0): point = 187
   Insn 19(l0): point = 189
   Insn 18(l0): point = 191
   Insn 17(l0): point = 193
   Insn 16(l0): point = 195
   Insn 14(l0): point = 198
   Insn 13(l0): point = 200
   Insn 12(l0): point = 202
   Insn 10(l0): point = 204
   Insn 9(l0): point = 206
   Insn 8(l0): point = 208
   Insn 7(l0): point = 210
   Insn 6(l0): point = 212
   Insn 5(l0): point = 214
   Insn 11(l0): point = 216
 a0(r85): [3..4]
 a1(r59): [53..55] [13..15] [5..6]
 a2(r84): [21..22]
 a3(r83): [28..29]
 a4(r82): [35..36]
 a5(r81): [42..43]
 a6(r80): [49..50]
 a7(r79): [61..67]
 a8(r78): [68..69]
 a9(r110): [74..75]
 a10(r77): [81..82]
 a11(r109): [83..84]
 a12(r108): [89..90]
 a13(r107): [95..96]
 a14(r76): [101..106]
 a15(r106): [103..104]
 a16(r105): [107..108]
 a17(r104): [111..112]
 a18(r75): [117..126]
 a19(r103): [119..120]
 a20(r102): [123..124]
 a21(r101): [127..128]
 a22(r74): [132..133]
 a23(r73): [134..135]
 a24(r72): [136..137]
 a25(r71): [138..139]
 a26(r70): [142..143]
 a27(r69): [144..145]
 a28(r68): [146..147]
 a29(r67): [148..149]
 a30(r64): [148..173]
 a31(r66): [150..151]
 a32(r100): [152..153]
 a33(r99): [154..155]
 a34(r65): [156..159]
 a35(r98): [156..157]
 a36(r96): [164..169] [160..161]
 a37(r97): [162..163]
 a38(r95): [166..171]
 a39(r63): [174..175]
 a40(r62): [180..189]
 a41(r61): [184..193]
 a42(r94): [186..187]
 a43(r93): [190..191]
 a44(r92): [194..195]
 a45(r60): [203..204]
 a46(r88): [205..206]
 a47(r87): [207..208]
 a48(r89): [208..212]
 a49(r91): [209..210]
 a50(r90): [209..214]
 a51(r86): [213..216]
Compressing live ranges: from 219 to 92 - 42%
Ranges after the compression:
 a0(r85): [0..1]
 a1(r59): [16..17] [4..5] [2..3]
 a2(r84): [6..7]
 a3(r83): [8..9]
 a4(r82): [10..11]
 a5(r81): [12..13]
 a6(r80): [14..15]
 a7(r79): [18..19]
 a8(r78): [20..21]
 a9(r110): [22..23]
 a10(r77): [24..25]
 a11(r109): [26..27]
 a12(r108): [28..29]
 a13(r107): [30..31]
 a14(r76): [32..33]
 a15(r106): [32..33]
 a16(r105): [34..35]
 a17(r104): [36..37]
 a18(r75): [38..41]
 a19(r103): [38..39]
 a20(r102): [40..41]
 a21(r101): [42..43]
 a22(r74): [44..45]
 a23(r73): [46..47]
 a24(r72): [48..49]
 a25(r71): [50..51]
 a26(r70): [52..53]
 a27(r69): [54..55]
 a28(r68): [56..57]
 a29(r67): [58..59]
 a30(r64): [58..73]
 a31(r66): [60..61]
 a32(r100): [62..63]
 a33(r99): [64..65]
 a34(r65): [66..67]
 a35(r98): [66..67]
 a36(r96): [72..73] [68..69]
 a37(r97): [70..71]
 a38(r95): [72..73]
 a39(r63): [74..75]
 a40(r62): [76..77]
 a41(r61): [76..79]
 a42(r94): [76..77]
 a43(r93): [78..79]
 a44(r92): [80..81]
 a45(r60): [82..83]
 a46(r88): [84..85]
 a47(r87): [86..87]
 a48(r89): [87..89]
 a49(r91): [88..89]
 a50(r90): [88..91]
 a51(r86): [90..91]
  regions=2, blocks=17, points=92
    allocnos=52 (big 0), copies=0, conflicts=0, ranges=55
Disposition:
    1:r59  l0     0   45:r60  l0     0   41:r61  l0     1   40:r62  l0     0
   39:r63  l0     0   30:r64  l0     2   34:r65  l0     0   31:r66  l0     0
   29:r67  l0     0   28:r68  l0     0   27:r69  l0     0   26:r70  l0     0
   25:r71  l0     0   24:r72  l0     0   23:r73  l0     0   22:r74  l0     0
   18:r75  l0     0   14:r76  l0     0   10:r77  l0     0    8:r78  l0     0
    7:r79  l0     0    6:r80  l0     0    5:r81  l0     0    4:r82  l0     0
    3:r83  l0     0    2:r84  l0     0    0:r85  l0     0   51:r86  l0     0
   47:r87  l0     0   46:r88  l0     0   48:r89  l0     1   50:r90  l0     2
   49:r91  l0     0   44:r92  l0     0   43:r93  l0     0   42:r94  l0     2
   38:r95  l0     1   36:r96  l0     0   37:r97  l0     0   35:r98  l0     1
   33:r99  l0     0   32:r100 l0     0   21:r101 l0     0   20:r102 l0     1
   19:r103 l0     1   17:r104 l0     0   16:r105 l0     0   15:r106 l0     1
   13:r107 l0     0   12:r108 l0     0   11:r109 l0     0    9:r110 l0     0
+++Costs: overall 2, reg 2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 7, dead_or_set: 86
insn=5, live_throughout: 7, 86, dead_or_set: 90
insn=6, live_throughout: 7, 90, dead_or_set: 86, 89
insn=7, live_throughout: 7, 89, 90, dead_or_set: 91
insn=8, live_throughout: 7, dead_or_set: 87, 89, 90, 91
insn=9, live_throughout: 7, dead_or_set: 87, 88
insn=10, live_throughout: 7, dead_or_set: 60, 88
insn=12, live_throughout: 7, dead_or_set: 60
insn=13, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 92
insn=17, live_throughout: 7, dead_or_set: 61, 92
insn=18, live_throughout: 7, 61, dead_or_set: 93
insn=19, live_throughout: 7, 61, dead_or_set: 62, 93
insn=20, live_throughout: 7, 61, 62, dead_or_set: 94
insn=21, live_throughout: 7, 61, 62, dead_or_set: 94
insn=22, live_throughout: 7, 62, dead_or_set: 61
insn=23, live_throughout: 7, 62, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 62
insn=25, live_throughout: 7, dead_or_set: 0
insn=26, live_throughout: 7, dead_or_set: 63
insn=27, live_throughout: 7, dead_or_set: 63, 64
insn=28, live_throughout: 7, 64, dead_or_set: 95
insn=29, live_throughout: 7, 64, 95, dead_or_set: 96
insn=30, live_throughout: 7, 64, 95, dead_or_set: 96
insn=31, live_throughout: 7, 64, dead_or_set: 95, 96
insn=32, live_throughout: 7, 64, dead_or_set: 96, 97
insn=33, live_throughout: 7, 64, dead_or_set: 96, 97
insn=34, live_throughout: 7, 64, dead_or_set: 65, 96
insn=35, live_throughout: 7, 64, 65, dead_or_set: 98
insn=36, live_throughout: 7, 64, dead_or_set: 65, 98, 99
insn=37, live_throughout: 7, 64, dead_or_set: 99, 100
insn=38, live_throughout: 7, 64, dead_or_set: 66, 100
insn=39, live_throughout: 7, 64, dead_or_set: 66, 67
insn=40, live_throughout: 7, dead_or_set: 64, 67, 68
insn=41, live_throughout: 7, dead_or_set: 68, 69
insn=42, live_throughout: 7, dead_or_set: 69, 70
insn=43, live_throughout: 7, dead_or_set: 70
insn=44, live_throughout: 7, dead_or_set: 71
insn=45, live_throughout: 7, dead_or_set: 71, 72
insn=46, live_throughout: 7, dead_or_set: 72, 73
insn=47, live_throughout: 7, dead_or_set: 73, 74
insn=48, live_throughout: 7, dead_or_set: 74
insn=49, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 101
insn=52, live_throughout: 7, dead_or_set: 75, 101
insn=53, live_throughout: 7, 75, dead_or_set: 102
insn=54, live_throughout: 7, 75, dead_or_set: 102
insn=55, live_throughout: 7, 75, dead_or_set: 103
insn=56, live_throughout: 7, 75, dead_or_set: 103
insn=57, live_throughout: 7, dead_or_set: 75
insn=58, live_throughout: 7, dead_or_set: 0
insn=59, live_throughout: 7, dead_or_set: 0, 104
insn=60, live_throughout: 7, dead_or_set: 104
insn=61, live_throughout: 7, dead_or_set: 105
insn=62, live_throughout: 7, dead_or_set: 76, 105
insn=63, live_throughout: 7, 76, dead_or_set: 106
insn=64, live_throughout: 7, 76, dead_or_set: 106
insn=65, live_throughout: 7, dead_or_set: 76
insn=66, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 107
insn=68, live_throughout: 7, dead_or_set: 107
insn=69, live_throughout: 7, dead_or_set: 0
insn=70, live_throughout: 7, dead_or_set: 108
insn=71, live_throughout: 7, dead_or_set: 108
insn=72, live_throughout: 7, dead_or_set: 
insn=73, live_throughout: 7, dead_or_set: 109
insn=74, live_throughout: 7, dead_or_set: 77, 109
insn=75, live_throughout: 7, dead_or_set: 77
insn=76, live_throughout: 7, dead_or_set: 0
insn=123, live_throughout: 7, dead_or_set: 
insn=78, live_throughout: 7, dead_or_set: 110
insn=79, live_throughout: 7, dead_or_set: 110
insn=80, live_throughout: 7, dead_or_set: 0
insn=81, live_throughout: 7, dead_or_set: 78
insn=82, live_throughout: 7, dead_or_set: 78, 79
insn=83, live_throughout: 7, 79, dead_or_set: 
insn=84, live_throughout: 7, 79, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 79
insn=86, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=91, live_throughout: 7, dead_or_set: 59
insn=140, live_throughout: 7, 59, dead_or_set: 
insn=94, live_throughout: 7, dead_or_set: 
insn=96, live_throughout: 7, dead_or_set: 80
insn=97, live_throughout: 7, dead_or_set: 80
insn=98, live_throughout: 7, dead_or_set: 
insn=100, live_throughout: 7, dead_or_set: 81
insn=101, live_throughout: 7, dead_or_set: 81
insn=102, live_throughout: 7, dead_or_set: 
insn=104, live_throughout: 7, dead_or_set: 82
insn=105, live_throughout: 7, dead_or_set: 82
insn=106, live_throughout: 7, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 83
insn=109, live_throughout: 7, dead_or_set: 83
insn=110, live_throughout: 7, dead_or_set: 
insn=112, live_throughout: 7, dead_or_set: 84
insn=113, live_throughout: 7, dead_or_set: 84
insn=114, live_throughout: 7, dead_or_set: 
insn=116, live_throughout: 7, dead_or_set: 59
insn=142, live_throughout: 7, 59, dead_or_set: 
insn=147, live_throughout: 7, dead_or_set: 
insn=148, live_throughout: 7, dead_or_set: 
insn=121, live_throughout: 7, dead_or_set: 
insn=144, live_throughout: 7, dead_or_set: 
insn=126, live_throughout: 7, 59, dead_or_set: 
insn=128, live_throughout: 7, dead_or_set: 59, 85
insn=132, live_throughout: 7, dead_or_set: 0, 85
insn=135, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 116
changing reg in insn 91
changing reg in insn 128
changing reg in insn 10
changing reg in insn 12
changing reg in insn 17
changing reg in insn 22
changing reg in insn 19
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 40
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 57
changing reg in insn 62
changing reg in insn 65
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 85
changing reg in insn 83
changing reg in insn 96
changing reg in insn 97
changing reg in insn 100
changing reg in insn 101
changing reg in insn 104
changing reg in insn 105
changing reg in insn 108
changing reg in insn 109
changing reg in insn 112
changing reg in insn 113
changing reg in insn 128
changing reg in insn 132
changing reg in insn 11
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 8
changing reg in insn 6
changing reg in insn 8
changing reg in insn 5
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 21
changing reg in insn 28
changing reg in insn 31
changing reg in insn 29
changing reg in insn 33
changing reg in insn 31
changing reg in insn 33
changing reg in insn 31
changing reg in insn 30
changing reg in insn 29
changing reg in insn 34
changing reg in insn 32
changing reg in insn 31
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 73
changing reg in insn 74
changing reg in insn 78
changing reg in insn 79
Spilling for insn 8.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 35.
Spilling for insn 40.
Using reg 1 for reload 0
changing reg in insn 5
changing reg in insn 8
 Register 90 now on stack.

Spilling for insn 8.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 35.
Spilling for insn 40.
Using reg 1 for reload 0

Reloads for insn # 8
Reload 0: reload_in (SI) = (reg:SI 90)
	reload_out (SI) = (reg:SI 0 ax [87])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 90)
	reload_out_reg: (reg:SI 0 ax [87])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 1 dx [89])
	reload_out (SI) = (reg:SI 1 dx [89])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 1 dx [89])
	reload_out_reg: (reg:SI 1 dx [89])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 35
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:65 D.6432 ] [65])
	reload_out (SI) = (reg:SI 1 dx [98])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:65 D.6432 ] [65])
	reload_out_reg: (reg:SI 1 dx [98])
	reload_reg_rtx: (reg:SI 1 dx [98])

Reloads for insn # 40
Reload 0: reload_in (HI) = (reg:HI 2 cx [orig:64 D.6431 ] [64])
	reload_out (HI) = (reg:HI 0 ax [orig:68 D.6435 ] [68])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:HI 2 cx [orig:64 D.6431 ] [64])
	reload_out_reg: (reg:HI 0 ax [orig:68 D.6435 ] [68])
	reload_reg_rtx: (reg:HI 1 dx)
deleting insn with uid = 33.
deleting insn with uid = 34.
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 45.
deleting insn with uid = 47.
deleting insn with uid = 59.
deleting insn with uid = 128.
deleting insn with uid = 132.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 72.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 80.


Display_Message_Click

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={45d,41u,1e} r1={17d,11u,1e} r2={11d,4u} r5={2d,1u} r6={1d,45u} r7={1d,36u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={2e} r17={29d,8u} r18={6d} r19={6d} r20={1d,1u,1e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 511{359d,147u,5e} in 99{93 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 86 87 88 89 90 91

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 11 2 NOTE_INSN_FUNCTION_BEG)

(insn 11 2 5 2 (set (reg:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 message+0 S4 A32])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 5 11 6 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 %sfp+-36 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 1 dx [89])
        (reg:SI 0 ax [86])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 7 6 150 2 (set (reg:QI 0 ax [91])
        (const_int 0 [0])) src/gui.c:217 66 {*movqi_internal}
     (nil))

(insn 150 7 152 2 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 %sfp+-36 S4 A32])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 152 150 8 2 (set (reg:SI 5 di)
        (reg:SI 1 dx [89])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 8 152 151 2 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [91])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:217 876 {*strlenqi_1}
     (nil))

(insn 151 8 9 2 (set (reg:SI 0 ax [87])
        (reg:SI 2 cx)) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 9 151 10 2 (set (reg:SI 0 ax [88])
        (not:SI (reg:SI 0 ax [87]))) src/gui.c:217 482 {*one_cmplsi2_1}
     (nil))

(insn 10 9 12 2 (parallel [
            (set (reg:SI 0 ax [orig:60 D.6425 ] [60])
                (plus:SI (reg:SI 0 ax [88])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:217 252 {*addsi_1}
     (nil))

(insn 12 10 13 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 leng+0 S4 A32])
        (reg:SI 0 ax [orig:60 D.6425 ] [60])) src/gui.c:217 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 28 [0x1c])) [0 box+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:218 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 14 13 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) src/gui.c:218 591 {*jcc_1}
     (nil)
 -> 49)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 61 62 63 64 65 66 67 68 69 70 71 72 73 74 92 93 94 95 96 97 98 99 100

;; Pred edge  2 (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 3 (set (reg/f:SI 0 ax [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 17 16 18 3 (set (reg/f:SI 1 dx [orig:61 D.6428 ] [61])
        (mem/s/f/j:SI (reg/f:SI 0 ax [92]) [0 display_6(D)->screen+0 S4 A32])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 18 17 19 3 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 19 18 20 3 (set (reg/f:SI 0 ax [orig:62 D.6429 ] [62])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 40 [0x28])) [0 display_6(D)->msg_box+0 S4 A32])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 20 19 21 3 (parallel [
            (set (reg:SI 2 cx [94])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:220 252 {*addsi_1}
     (nil))

(insn 21 20 22 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [94])) src/gui.c:220 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 8 [0x8]))
        (nil)))

(insn 22 21 23 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:61 D.6428 ] [61])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(insn 24 23 25 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:62 D.6429 ] [62])) src/gui.c:220 64 {*movsi_internal}
     (nil))

(call_insn 25 24 26 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:220 927 {*call_value_0}
     (nil)
    (nil))

(insn 26 25 27 3 (set (reg:HI 0 ax [orig:63 D.6430 ] [63])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 position.x+0 S2 A32])) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 27 26 28 3 (set (reg:HI 2 cx [orig:64 D.6431 ] [64])
        (reg:HI 0 ax [orig:63 D.6430 ] [63])) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 28 27 29 3 (set (reg:SI 1 dx [95])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 leng+0 S4 A32])) src/gui.c:222 64 {*movsi_internal}
     (nil))

(insn 29 28 30 3 (set (reg:SI 0 ax [96])
        (reg:SI 1 dx [95])) src/gui.c:222 64 {*movsi_internal}
     (nil))

(insn 30 29 31 3 (parallel [
            (set (reg:SI 0 ax [96])
                (ashift:SI (reg:SI 0 ax [96])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 497 {*ashlsi3_1}
     (nil))

(insn 31 30 32 3 (parallel [
            (set (reg:SI 0 ax [96])
                (plus:SI (reg:SI 0 ax [96])
                    (reg:SI 1 dx [95])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [95])
            (const_int 3 [0x3]))
        (nil)))

(insn 32 31 153 3 (parallel [
            (set (reg:SI 0 ax [97])
                (ashift:SI (reg:SI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 497 {*ashlsi3_1}
     (nil))

(insn 153 32 35 3 (set (reg:SI 1 dx [98])
        (reg:SI 0 ax [orig:65 D.6432 ] [65])) src/gui.c:222 64 {*movsi_internal}
     (nil))

(insn 35 153 36 3 (parallel [
            (set (reg:SI 1 dx [98])
                (lshiftrt:SI (reg:SI 1 dx [98])
                    (const_int 31 [0x1f])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 531 {*lshrsi3_1}
     (nil))

(insn 36 35 37 3 (parallel [
            (set (reg:SI 0 ax [99])
                (plus:SI (reg:SI 1 dx [98])
                    (reg:SI 0 ax [orig:65 D.6432 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 252 {*addsi_1}
     (nil))

(insn 37 36 39 3 (parallel [
            (set (reg:SI 0 ax [100])
                (ashiftrt:SI (reg:SI 0 ax [99])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 532 {*ashrsi3_1}
     (expr_list:REG_EQUAL (div:SI (reg:SI 0 ax [orig:65 D.6432 ] [65])
            (const_int 2 [0x2]))
        (nil)))

(insn 39 37 154 3 (set (reg:HI 0 ax [orig:67 D.6434 ] [67])
        (reg:HI 0 ax [orig:66 D.6433 ] [66])) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 154 39 40 3 (set (reg:HI 1 dx)
        (reg:HI 2 cx [orig:64 D.6431 ] [64])) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 40 154 155 3 (parallel [
            (set (reg:HI 1 dx)
                (minus:HI (reg:HI 1 dx)
                    (reg:HI 0 ax [orig:67 D.6434 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 290 {*subhi_1}
     (nil))

(insn 155 40 41 3 (set (reg:HI 0 ax [orig:68 D.6435 ] [68])
        (reg:HI 1 dx)) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 41 155 43 3 (parallel [
            (set (reg:HI 0 ax [orig:69 D.6436 ] [69])
                (plus:HI (reg:HI 0 ax [orig:68 D.6435 ] [68])
                    (const_int 260 [0x104])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:222 256 {*addhi_1_lea}
     (nil))

(insn 43 41 44 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 position.x+0 S2 A32])
        (reg:HI 0 ax [orig:70 D.6437 ] [70])) src/gui.c:222 65 {*movhi_internal}
     (nil))

(insn 44 43 46 3 (set (reg:HI 0 ax [orig:71 D.6438 ] [71])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 18 [0x12])) [0 position.y+0 S2 A16])) src/gui.c:223 65 {*movhi_internal}
     (nil))

(insn 46 44 48 3 (parallel [
            (set (reg:HI 0 ax [orig:73 D.6440 ] [73])
                (plus:HI (reg:HI 0 ax [orig:72 D.6439 ] [72])
                    (const_int 25 [0x19])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:223 256 {*addhi_1_lea}
     (nil))

(insn 48 46 49 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int 18 [0x12])) [0 position.y+0 S2 A16])
        (reg:HI 0 ax [orig:74 D.6441 ] [74])) src/gui.c:223 65 {*movhi_internal}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 75 76 77 101 102 103 104 105 106 107 108 109

;; Pred edge  2
;; Pred edge  3 (fallthru)
(code_label 49 48 50 4 19 "" [1 uses])

(note 50 49 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 4 (set (reg/f:SI 0 ax [101])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 52 51 53 4 (set (reg/f:SI 0 ax [orig:75 D.6442 ] [75])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 36 [0x24])) [0 display_6(D)->font+0 S4 A32])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 53 52 54 4 (set (reg:SI 1 dx [102])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 color+0 S4 A32])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 54 53 55 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [102])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 55 54 56 4 (set (reg/f:SI 1 dx [103])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 message+0 S4 A32])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 56 55 57 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 1 dx [103])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 57 56 58 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:75 D.6442 ] [75])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(call_insn 58 57 60 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("TTF_RenderText_Blended") [flags 0x41]  <function_decl 0x40801980 TTF_RenderText_Blended>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:225 927 {*call_value_0}
     (nil)
    (nil))

(insn 60 58 61 4 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])
        (reg:SI 0 ax [104])) src/gui.c:225 64 {*movsi_internal}
     (nil))

(insn 61 60 62 4 (set (reg/f:SI 0 ax [105])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(insn 62 61 63 4 (set (reg/f:SI 0 ax [orig:76 D.6443 ] [76])
        (mem/s/f/j:SI (reg/f:SI 0 ax [105]) [0 display_6(D)->screen+0 S4 A32])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(insn 63 62 64 4 (parallel [
            (set (reg:SI 1 dx [106])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:226 252 {*addsi_1}
     (nil))

(insn 64 63 65 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 1 dx [106])) src/gui.c:226 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 8 [0x8]))
        (nil)))

(insn 65 64 66 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:76 D.6443 ] [76])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(insn 66 65 67 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(insn 67 66 68 4 (set (reg/f:SI 0 ax [107])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(insn 68 67 69 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [107])) src/gui.c:226 64 {*movsi_internal}
     (nil))

(call_insn 69 68 70 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:226 927 {*call_value_0}
     (nil)
    (nil))

(insn 70 69 71 4 (set (reg/f:SI 0 ax [108])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 msg+0 S4 A32])) src/gui.c:227 64 {*movsi_internal}
     (nil))

(insn 71 70 72 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [108])) src/gui.c:227 64 {*movsi_internal}
     (nil))

(call_insn 72 71 73 4 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:227 618 {*call_0}
     (nil)
    (nil))

(insn 73 72 74 4 (set (reg/f:SI 0 ax [109])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:228 64 {*movsi_internal}
     (nil))

(insn 74 73 75 4 (set (reg/f:SI 0 ax [orig:77 D.6444 ] [77])
        (mem/s/f/j:SI (reg/f:SI 0 ax [109]) [0 display_6(D)->screen+0 S4 A32])) src/gui.c:228 64 {*movsi_internal}
     (nil))

(insn 75 74 76 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:77 D.6444 ] [77])) src/gui.c:228 64 {*movsi_internal}
     (nil))

(call_insn 76 75 123 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Flip") [flags 0x41]  <function_decl 0x4079fa00 SDL_Flip>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:228 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 14) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 78 79 110

;; Pred edge  4 (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 123 76 77 5 25 "" [1 uses])

(note 77 123 78 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 79 5 (parallel [
            (set (reg:SI 0 ax [110])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:232 252 {*addsi_1}
     (nil))

(insn 79 78 80 5 (set (mem/f/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [110])) src/gui.c:232 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))

(call_insn 80 79 81 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_WaitEvent") [flags 0x41]  <function_decl 0x407d8f80 SDL_WaitEvent>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:232 927 {*call_value_0}
     (nil)
    (nil))

(insn 81 80 82 5 (set (reg:QI 0 ax [orig:78 D.6445 ] [78])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 event.type+0 S1 A32])) src/gui.c:233 66 {*movqi_internal}
     (nil))

(insn 82 81 83 5 (parallel [
            (set (reg:SI 0 ax [orig:79 D.6446 ] [79])
                (zero_extend:SI (reg:QI 0 ax [orig:78 D.6445 ] [78])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:233 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 83 82 84 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:79 D.6446 ] [79])
            (const_int 6 [0x6]))) src/gui.c:233 6 {*cmpsi_1}
     (nil))

(jump_insn 84 83 137 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) src/gui.c:233 591 {*jcc_1}
     (nil)
 -> 94)
;; End of basic block 5 -> ( 8 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79


;; Succ edge  8
;; Succ edge  6 (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 79
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
(note 137 84 85 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 85 137 86 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:79 D.6446 ] [79])
            (const_int 12 [0xc]))) src/gui.c:233 6 {*cmpsi_1}
     (nil))

(jump_insn 86 85 89 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 121)
            (pc))) src/gui.c:233 591 {*jcc_1}
     (nil)
 -> 121)
;; End of basic block 6 -> ( 7 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  14

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  6 (fallthru)
(code_label 89 86 90 7 22 "" [0 uses])

(note 90 89 91 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 140 7 (set (reg:SI 0 ax [orig:59 D.6447 ] [59])
        (const_int 1 [0x1])) src/gui.c:236 64 {*movsi_internal}
     (nil))

(jump_insn 140 91 141 7 (set (pc)
        (label_ref 126)) src/gui.c:236 606 {jump}
     (nil)
 -> 126)
;; End of basic block 7 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  15 [100.0%] 

(barrier 141 140 94)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 80

;; Pred edge  5
(code_label 94 141 95 8 21 "" [1 uses])

(note 95 94 96 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 97 8 (set (reg:QI 0 ax [orig:80 D.6448 ] [80])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -34 [0xffffffffffffffde])) [0 event.button.button+0 S1 A16])) src/gui.c:239 66 {*movqi_internal}
     (nil))

(insn 97 96 98 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:80 D.6448 ] [80])
            (const_int 1 [0x1]))) src/gui.c:239 4 {*cmpqi_1}
     (nil))

(jump_insn 98 97 99 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 147)
            (pc))) src/gui.c:239 591 {*jcc_1}
     (nil)
 -> 147)
;; End of basic block 8 -> ( 9 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  16

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81

;; Pred edge  8 (fallthru)
(note 99 98 100 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 101 9 (set (reg:HI 0 ax [orig:81 D.6451 ] [81])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 event.button.x+0 S2 A32])) src/gui.c:241 65 {*movhi_internal}
     (nil))

(insn 101 100 102 9 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:81 D.6451 ] [81])
            (const_int 79 [0x4f]))) src/gui.c:241 5 {*cmphi_1}
     (nil))

(jump_insn 102 101 103 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 147)
            (pc))) src/gui.c:241 591 {*jcc_1}
     (nil)
 -> 147)
;; End of basic block 9 -> ( 10 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  16

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82

;; Pred edge  9 (fallthru)
(note 103 102 104 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 10 (set (reg:HI 0 ax [orig:82 D.6454 ] [82])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 event.button.x+0 S2 A32])) src/gui.c:241 65 {*movhi_internal}
     (nil))

(insn 105 104 106 10 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:82 D.6454 ] [82])
            (const_int 548 [0x224]))) src/gui.c:241 5 {*cmphi_1}
     (nil))

(jump_insn 106 105 107 10 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 147)
            (pc))) src/gui.c:241 591 {*jcc_1}
     (nil)
 -> 147)
;; End of basic block 10 -> ( 11 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)
;; Succ edge  16

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 83

;; Pred edge  10 (fallthru)
(note 107 106 108 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 109 11 (set (reg:HI 0 ax [orig:83 D.6457 ] [83])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -30 [0xffffffffffffffe2])) [0 event.button.y+0 S2 A16])) src/gui.c:241 65 {*movhi_internal}
     (nil))

(insn 109 108 110 11 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:83 D.6457 ] [83])
            (const_int 324 [0x144]))) src/gui.c:241 5 {*cmphi_1}
     (nil))

(jump_insn 110 109 111 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 147)
            (pc))) src/gui.c:241 591 {*jcc_1}
     (nil)
 -> 147)
;; End of basic block 11 -> ( 12 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  16

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 84

;; Pred edge  11 (fallthru)
(note 111 110 112 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 112 111 113 12 (set (reg:HI 0 ax [orig:84 D.6460 ] [84])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -30 [0xffffffffffffffe2])) [0 event.button.y+0 S2 A16])) src/gui.c:241 65 {*movhi_internal}
     (nil))

(insn 113 112 114 12 (set (reg:CC 17 flags)
        (compare:CC (reg:HI 0 ax [orig:84 D.6460 ] [84])
            (const_int 415 [0x19f]))) src/gui.c:241 5 {*cmphi_1}
     (nil))

(jump_insn 114 113 115 12 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 147)
            (pc))) src/gui.c:241 591 {*jcc_1}
     (nil)
 -> 147)
;; End of basic block 12 -> ( 13 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)
;; Succ edge  16

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  12 (fallthru)
(note 115 114 116 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 116 115 142 13 (set (reg:SI 0 ax [orig:59 D.6447 ] [59])
        (const_int 0 [0])) src/gui.c:242 64 {*movsi_internal}
     (nil))

(jump_insn 142 116 143 13 (set (pc)
        (label_ref 126)) src/gui.c:242 606 {jump}
     (nil)
 -> 126)
;; End of basic block 13 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  15 [100.0%] 

(barrier 143 142 147)

;; Start of basic block ( 8 12 11 10 9) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  8
;; Pred edge  12
;; Pred edge  11
;; Pred edge  10
;; Pred edge  9
(code_label 147 143 146 16 26 "" [5 uses])

(note 146 147 148 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 148 146 121 16 (const_int 0 [0]) src/gui.c:244 638 {nop}
     (nil))
;; End of basic block 16 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 6 16) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  6
;; Pred edge  16 [100.0%]  (fallthru)
(code_label 121 148 122 14 20 "" [1 uses])

(note 122 121 144 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 144 122 145 14 (set (pc)
        (label_ref 123)) src/gui.c:247 606 {jump}
     (nil)
 -> 123)
;; End of basic block 14 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 [100.0%] 

(barrier 145 144 126)

;; Start of basic block ( 7 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 85

;; Pred edge  7 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 126 145 127 15 23 "" [2 uses])

(note 127 126 135 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 135 127 149 15 (use (reg/i:SI 0 ax)) src/gui.c:248 -1
     (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 149 135 0 NOTE_INSN_DELETED)


;; Function Display_Exit (Display_Exit)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a7(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a8(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 71(l0): point = 0
   Insn 70(l0): point = 2
   Insn 69(l0): point = 4
   Insn 68(l0): point = 6
   Insn 67(l0): point = 8
   Insn 66(l0): point = 10
   Insn 65(l0): point = 12
   Insn 64(l0): point = 14
   Insn 63(l0): point = 16
   Insn 62(l0): point = 18
   Insn 60(l0): point = 21
   Insn 59(l0): point = 23
   Insn 55(l0): point = 26
   Insn 54(l0): point = 28
   Insn 53(l0): point = 30
   Insn 52(l0): point = 32
   Insn 51(l0): point = 34
   Insn 50(l0): point = 36
   Insn 49(l0): point = 38
   Insn 74(l0): point = 41
   Insn 45(l0): point = 43
   Insn 44(l0): point = 45
   Insn 43(l0): point = 47
   Insn 42(l0): point = 49
   Insn 41(l0): point = 51
   Insn 40(l0): point = 53
   Insn 39(l0): point = 55
   Insn 38(l0): point = 57
   Insn 37(l0): point = 59
   Insn 36(l0): point = 61
   Insn 35(l0): point = 63
   Insn 34(l0): point = 65
   Insn 33(l0): point = 67
   Insn 32(l0): point = 69
   Insn 31(l0): point = 71
   Insn 30(l0): point = 73
   Insn 29(l0): point = 75
   Insn 28(l0): point = 77
   Insn 27(l0): point = 79
   Insn 26(l0): point = 81
   Insn 25(l0): point = 83
   Insn 24(l0): point = 85
   Insn 23(l0): point = 87
   Insn 22(l0): point = 89
   Insn 21(l0): point = 91
   Insn 20(l0): point = 93
   Insn 19(l0): point = 95
   Insn 18(l0): point = 97
   Insn 17(l0): point = 99
   Insn 16(l0): point = 101
   Insn 15(l0): point = 103
   Insn 14(l0): point = 105
   Insn 13(l0): point = 107
   Insn 12(l0): point = 109
   Insn 11(l0): point = 111
   Insn 10(l0): point = 113
   Insn 9(l0): point = 115
   Insn 8(l0): point = 117
   Insn 7(l0): point = 119
   Insn 6(l0): point = 121
   Insn 5(l0): point = 123
 a0(r71): [7..8]
 a1(r86): [9..10]
 a2(r70): [15..16]
 a3(r85): [17..18]
 a4(r69): [31..32]
 a5(r82): [33..38]
 a6(r83): [33..34]
 a7(r84): [35..36]
 a8(r68): [48..49]
 a9(r81): [50..51]
 a10(r67): [56..57]
 a11(r80): [58..59]
 a12(r66): [64..65]
 a13(r79): [66..67]
 a14(r65): [72..73]
 a15(r78): [74..75]
 a16(r64): [80..81]
 a17(r77): [82..83]
 a18(r63): [88..89]
 a19(r76): [90..91]
 a20(r62): [96..97]
 a21(r75): [98..99]
 a22(r61): [104..105]
 a23(r74): [106..107]
 a24(r60): [112..113]
 a25(r73): [114..115]
 a26(r59): [120..121]
 a27(r72): [122..123]
Compressing live ranges: from 126 to 54 - 42%
Ranges after the compression:
 a0(r71): [0..1]
 a1(r86): [2..3]
 a2(r70): [4..5]
 a3(r85): [6..7]
 a4(r69): [8..9]
 a5(r82): [10..13]
 a6(r83): [10..11]
 a7(r84): [12..13]
 a8(r68): [14..15]
 a9(r81): [16..17]
 a10(r67): [18..19]
 a11(r80): [20..21]
 a12(r66): [22..23]
 a13(r79): [24..25]
 a14(r65): [26..27]
 a15(r78): [28..29]
 a16(r64): [30..31]
 a17(r77): [32..33]
 a18(r63): [34..35]
 a19(r76): [36..37]
 a20(r62): [38..39]
 a21(r75): [40..41]
 a22(r61): [42..43]
 a23(r74): [44..45]
 a24(r60): [46..47]
 a25(r73): [48..49]
 a26(r59): [50..51]
 a27(r72): [52..53]
  regions=2, blocks=6, points=54
    allocnos=28 (big 0), copies=0, conflicts=0, ranges=28
Disposition:
   26:r59  l0     0   24:r60  l0     0   22:r61  l0     0   20:r62  l0     0
   18:r63  l0     0   16:r64  l0     0   14:r65  l0     0   12:r66  l0     0
   10:r67  l0     0    8:r68  l0     0    4:r69  l0     0    2:r70  l0     0
    0:r71  l0     0   27:r72  l0     0   25:r73  l0     0   23:r74  l0     0
   21:r75  l0     0   19:r76  l0     0   17:r77  l0     0   15:r78  l0     0
   13:r79  l0     0   11:r80  l0     0    9:r81  l0     0    5:r82  l0     0
    6:r83  l0     1    7:r84  l0     1    3:r85  l0     0    1:r86  l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 72
insn=6, live_throughout: 7, dead_or_set: 59, 72
insn=7, live_throughout: 7, dead_or_set: 59
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 73
insn=10, live_throughout: 7, dead_or_set: 60, 73
insn=11, live_throughout: 7, dead_or_set: 60
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 74
insn=14, live_throughout: 7, dead_or_set: 61, 74
insn=15, live_throughout: 7, dead_or_set: 61
insn=16, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 75
insn=18, live_throughout: 7, dead_or_set: 62, 75
insn=19, live_throughout: 7, dead_or_set: 62
insn=20, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 76
insn=22, live_throughout: 7, dead_or_set: 63, 76
insn=23, live_throughout: 7, dead_or_set: 63
insn=24, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 77
insn=26, live_throughout: 7, dead_or_set: 64, 77
insn=27, live_throughout: 7, dead_or_set: 64
insn=28, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 78
insn=30, live_throughout: 7, dead_or_set: 65, 78
insn=31, live_throughout: 7, dead_or_set: 65
insn=32, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 79
insn=34, live_throughout: 7, dead_or_set: 66, 79
insn=35, live_throughout: 7, dead_or_set: 66
insn=36, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 80
insn=38, live_throughout: 7, dead_or_set: 67, 80
insn=39, live_throughout: 7, dead_or_set: 67
insn=40, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 81
insn=42, live_throughout: 7, dead_or_set: 68, 81
insn=43, live_throughout: 7, dead_or_set: 68
insn=44, live_throughout: 7, dead_or_set: 
insn=45, live_throughout: 7, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 82
insn=50, live_throughout: 7, 82, dead_or_set: 84
insn=51, live_throughout: 7, 82, dead_or_set: 83, 84
insn=52, live_throughout: 7, dead_or_set: 69, 82, 83
insn=53, live_throughout: 7, dead_or_set: 69
insn=54, live_throughout: 7, dead_or_set: 
insn=55, live_throughout: 7, dead_or_set: 
insn=56, live_throughout: 7, dead_or_set: 
insn=59, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 
insn=62, live_throughout: 7, dead_or_set: 85
insn=63, live_throughout: 7, dead_or_set: 70, 85
insn=64, live_throughout: 7, dead_or_set: 70
insn=65, live_throughout: 7, dead_or_set: 
insn=66, live_throughout: 7, dead_or_set: 86
insn=67, live_throughout: 7, dead_or_set: 71, 86
insn=68, live_throughout: 7, dead_or_set: 71
insn=69, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 7
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 18
changing reg in insn 19
changing reg in insn 22
changing reg in insn 23
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
changing reg in insn 35
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 52
changing reg in insn 53
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 25
changing reg in insn 26
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 41
changing reg in insn 42
changing reg in insn 49
changing reg in insn 52
changing reg in insn 51
changing reg in insn 52
changing reg in insn 50
changing reg in insn 51
changing reg in insn 62
changing reg in insn 63
changing reg in insn 66
changing reg in insn 67
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 71.


Display_Exit

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={42d,26u} r1={18d,2u} r2={16d} r6={1d,23u} r7={1d,33u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={18d,1u} r18={15d} r19={15d} r20={1d,1u,1e} r21={15d} r22={15d} r23={15d} r24={15d} r25={15d} r26={15d} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} 
;;    total ref usage 814{727d,86u,1e} in 61{46 regular + 15 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 60 61 62 63 64 65 66 67 68 72 73 74 75 76 77 78 79 80 81

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [72])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:254 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg/f:SI 0 ax [orig:59 D.6412 ] [59])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [72])
                (const_int 12 [0xc])) [0 display_2(D)->background+0 S4 A32])) src/gui.c:254 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:59 D.6412 ] [59])) src/gui.c:254 64 {*movsi_internal}
     (nil))

(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:254 618 {*call_0}
     (nil)
    (nil))

(insn 9 8 10 2 (set (reg/f:SI 0 ax [73])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:255 64 {*movsi_internal}
     (nil))

(insn 10 9 11 2 (set (reg/f:SI 0 ax [orig:60 D.6413 ] [60])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [73])
                (const_int 4 [0x4])) [0 display_2(D)->background_menu+0 S4 A32])) src/gui.c:255 64 {*movsi_internal}
     (nil))

(insn 11 10 12 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:60 D.6413 ] [60])) src/gui.c:255 64 {*movsi_internal}
     (nil))

(call_insn 12 11 13 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:255 618 {*call_0}
     (nil)
    (nil))

(insn 13 12 14 2 (set (reg/f:SI 0 ax [74])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:256 64 {*movsi_internal}
     (nil))

(insn 14 13 15 2 (set (reg/f:SI 0 ax [orig:61 D.6414 ] [61])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [74])
                (const_int 24 [0x18])) [0 display_2(D)->gameBoard+0 S4 A32])) src/gui.c:256 64 {*movsi_internal}
     (nil))

(insn 15 14 16 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:61 D.6414 ] [61])) src/gui.c:256 64 {*movsi_internal}
     (nil))

(call_insn 16 15 17 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:256 618 {*call_0}
     (nil)
    (nil))

(insn 17 16 18 2 (set (reg/f:SI 0 ax [75])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:257 64 {*movsi_internal}
     (nil))

(insn 18 17 19 2 (set (reg/f:SI 0 ax [orig:62 D.6415 ] [62])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [75])
                (const_int 8 [0x8])) [0 display_2(D)->checked+0 S4 A32])) src/gui.c:257 64 {*movsi_internal}
     (nil))

(insn 19 18 20 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:62 D.6415 ] [62])) src/gui.c:257 64 {*movsi_internal}
     (nil))

(call_insn 20 19 21 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:257 618 {*call_0}
     (nil)
    (nil))

(insn 21 20 22 2 (set (reg/f:SI 0 ax [76])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:258 64 {*movsi_internal}
     (nil))

(insn 22 21 23 2 (set (reg/f:SI 0 ax [orig:63 D.6416 ] [63])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [76])
                (const_int 48 [0x30])) [0 display_2(D)->white_checker+0 S4 A32])) src/gui.c:258 64 {*movsi_internal}
     (nil))

(insn 23 22 24 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:63 D.6416 ] [63])) src/gui.c:258 64 {*movsi_internal}
     (nil))

(call_insn 24 23 25 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:258 618 {*call_0}
     (nil)
    (nil))

(insn 25 24 26 2 (set (reg/f:SI 0 ax [77])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:259 64 {*movsi_internal}
     (nil))

(insn 26 25 27 2 (set (reg/f:SI 0 ax [orig:64 D.6417 ] [64])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [77])
                (const_int 44 [0x2c])) [0 display_2(D)->green_checker+0 S4 A32])) src/gui.c:259 64 {*movsi_internal}
     (nil))

(insn 27 26 28 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:64 D.6417 ] [64])) src/gui.c:259 64 {*movsi_internal}
     (nil))

(call_insn 28 27 29 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:259 618 {*call_0}
     (nil)
    (nil))

(insn 29 28 30 2 (set (reg/f:SI 0 ax [78])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:260 64 {*movsi_internal}
     (nil))

(insn 30 29 31 2 (set (reg/f:SI 0 ax [orig:65 D.6418 ] [65])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [78])
                (const_int 60 [0x3c])) [0 display_2(D)->selected_checker+0 S4 A32])) src/gui.c:260 64 {*movsi_internal}
     (nil))

(insn 31 30 32 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:65 D.6418 ] [65])) src/gui.c:260 64 {*movsi_internal}
     (nil))

(call_insn 32 31 33 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:260 618 {*call_0}
     (nil)
    (nil))

(insn 33 32 34 2 (set (reg/f:SI 0 ax [79])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:261 64 {*movsi_internal}
     (nil))

(insn 34 33 35 2 (set (reg/f:SI 0 ax [orig:66 D.6419 ] [66])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [79])
                (const_int 40 [0x28])) [0 display_2(D)->msg_box+0 S4 A32])) src/gui.c:261 64 {*movsi_internal}
     (nil))

(insn 35 34 36 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:66 D.6419 ] [66])) src/gui.c:261 64 {*movsi_internal}
     (nil))

(call_insn 36 35 37 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:261 618 {*call_0}
     (nil)
    (nil))

(insn 37 36 38 2 (set (reg/f:SI 0 ax [80])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:262 64 {*movsi_internal}
     (nil))

(insn 38 37 39 2 (set (reg/f:SI 0 ax [orig:67 D.6420 ] [67])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [80])
                (const_int 104 [0x68])) [0 display_2(D)->possibility1_12+0 S4 A32])) src/gui.c:262 64 {*movsi_internal}
     (nil))

(insn 39 38 40 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.6420 ] [67])) src/gui.c:262 64 {*movsi_internal}
     (nil))

(call_insn 40 39 41 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:262 618 {*call_0}
     (nil)
    (nil))

(insn 41 40 42 2 (set (reg/f:SI 0 ax [81])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:263 64 {*movsi_internal}
     (nil))

(insn 42 41 43 2 (set (reg/f:SI 0 ax [orig:68 D.6421 ] [68])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [81])
                (const_int 108 [0x6c])) [0 display_2(D)->possibility13_24+0 S4 A32])) src/gui.c:263 64 {*movsi_internal}
     (nil))

(insn 43 42 44 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6421 ] [68])) src/gui.c:263 64 {*movsi_internal}
     (nil))

(call_insn 44 43 45 2 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:263 618 {*call_0}
     (nil)
    (nil))

(insn 45 44 74 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:265 64 {*movsi_internal}
     (nil))

(jump_insn 74 45 75 2 (set (pc)
        (label_ref 56)) src/gui.c:265 606 {jump}
     (nil)
 -> 56)
;; End of basic block 2 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 [100.0%] 

(barrier 75 74 58)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 69 82 83 84

;; Pred edge  4
(code_label 58 75 48 3 29 "" [1 uses])

(note 48 58 49 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 3 (set (reg/f:SI 0 ax [82])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:267 64 {*movsi_internal}
     (nil))

(insn 50 49 51 3 (set (reg:SI 1 dx [84])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) src/gui.c:267 64 {*movsi_internal}
     (nil))

(insn 51 50 52 3 (parallel [
            (set (reg:SI 1 dx [83])
                (plus:SI (reg:SI 1 dx [84])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:267 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 52 51 53 3 (set (reg/f:SI 0 ax [orig:69 D.6422 ] [69])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 1 dx [83])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [82])) [0 display_2(D)->die S4 A32])) src/gui.c:267 64 {*movsi_internal}
     (nil))

(insn 53 52 54 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:69 D.6422 ] [69])) src/gui.c:267 64 {*movsi_internal}
     (nil))

(call_insn 54 53 55 3 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:267 618 {*call_0}
     (nil)
    (nil))

(insn 55 54 56 3 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:265 252 {*addsi_1}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 56 55 57 4 28 "" [1 uses])

(note 57 56 59 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 59 57 60 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 5 [0x5]))) src/gui.c:265 6 {*cmpsi_1}
     (nil))

(jump_insn 60 59 61 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) src/gui.c:265 591 {*jcc_1}
     (nil)
 -> 58)
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  5 (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 70 71 85 86

;; Pred edge  4 (fallthru)
(note 61 60 62 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 63 5 (set (reg/f:SI 0 ax [85])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:269 64 {*movsi_internal}
     (nil))

(insn 63 62 64 5 (set (reg/f:SI 0 ax [orig:70 D.6423 ] [70])
        (mem/s/f/j:SI (reg/f:SI 0 ax [85]) [0 display_2(D)->screen+0 S4 A32])) src/gui.c:269 64 {*movsi_internal}
     (nil))

(insn 64 63 65 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:70 D.6423 ] [70])) src/gui.c:269 64 {*movsi_internal}
     (nil))

(call_insn 65 64 66 5 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:269 618 {*call_0}
     (nil)
    (nil))

(insn 66 65 67 5 (set (reg/f:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:271 64 {*movsi_internal}
     (nil))

(insn 67 66 68 5 (set (reg/f:SI 0 ax [orig:71 D.6424 ] [71])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [86])
                (const_int 36 [0x24])) [0 display_2(D)->font+0 S4 A32])) src/gui.c:271 64 {*movsi_internal}
     (nil))

(insn 68 67 69 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:71 D.6424 ] [71])) src/gui.c:271 64 {*movsi_internal}
     (nil))

(call_insn 69 68 70 5 (call (mem:QI (symbol_ref:SI ("TTF_CloseFont") [flags 0x41]  <function_decl 0x40801b80 TTF_CloseFont>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:271 618 {*call_0}
     (nil)
    (nil))

(call_insn 70 69 71 5 (call (mem:QI (symbol_ref:SI ("TTF_Quit") [flags 0x41]  <function_decl 0x40801c00 TTF_Quit>) [0 S1 A8])
        (const_int 0 [0])) src/gui.c:273 618 {*call_0}
     (nil)
    (nil))

(call_insn 71 70 76 5 (call (mem:QI (symbol_ref:SI ("SDL_Quit") [flags 0x41]  <function_decl 0x407f0900 SDL_Quit>) [0 S1 A8])
        (const_int 0 [0])) src/gui.c:274 618 {*call_0}
     (nil)
    (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 76 71 0 NOTE_INSN_DELETED)


;; Function Display_Clear (Display_Clear)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a20 (r103,l0) best AREG, cover GENERAL_REGS
    r102: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a21 (r102,l0) best CREG, cover GENERAL_REGS
    r101: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a19 (r101,l0) best DIREG, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a18 (r99,l0) best CREG, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a37 (r90,l0) best Q_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a47 (r85,l0) best AREG, cover GENERAL_REGS
    r84: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a48 (r84,l0) best CREG, cover GENERAL_REGS
    r83: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a46 (r83,l0) best DIREG, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a45 (r81,l0) best CREG, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a54 (r77,l0) best AREG, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a8 (r73,l0) best AREG, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a34 (r64,l0) best AREG, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a4(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a7(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r73,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a11(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a13(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a17(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a18(r99,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a19(r101,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a20(r103,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a21(r102,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a22(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a23(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a26(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a30(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a33(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r64,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a37(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:8
  a38(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:24
  a39(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a40(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a44(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a45(r81,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a46(r83,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a47(r85,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a48(r84,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a49(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a50(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a53(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a54(r77,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 95(l0): point = 0
   Insn 94(l0): point = 2
   Insn 93(l0): point = 4
   Insn 92(l0): point = 6
   Insn 91(l0): point = 8
   Insn 90(l0): point = 10
   Insn 89(l0): point = 12
   Insn 88(l0): point = 14
   Insn 87(l0): point = 16
   Insn 86(l0): point = 18
   Insn 85(l0): point = 20
   Insn 84(l0): point = 22
   Insn 83(l0): point = 24
   Insn 82(l0): point = 26
   Insn 81(l0): point = 28
   Insn 80(l0): point = 30
   Insn 79(l0): point = 32
   Insn 78(l0): point = 34
   Insn 77(l0): point = 36
   Insn 76(l0): point = 38
   Insn 75(l0): point = 40
   Insn 74(l0): point = 42
   Insn 73(l0): point = 44
   Insn 72(l0): point = 46
   Insn 71(l0): point = 48
   Insn 70(l0): point = 50
   Insn 69(l0): point = 52
   Insn 68(l0): point = 54
   Insn 67(l0): point = 56
   Insn 65(l0): point = 58
   Insn 64(l0): point = 60
   Insn 63(l0): point = 62
   Insn 62(l0): point = 64
   Insn 61(l0): point = 66
   Insn 60(l0): point = 68
   Insn 66(l0): point = 70
   Insn 59(l0): point = 72
   Insn 58(l0): point = 74
   Insn 57(l0): point = 76
   Insn 56(l0): point = 78
   Insn 55(l0): point = 80
   Insn 54(l0): point = 82
   Insn 53(l0): point = 84
   Insn 52(l0): point = 86
   Insn 51(l0): point = 88
   Insn 50(l0): point = 90
   Insn 49(l0): point = 92
   Insn 48(l0): point = 94
   Insn 47(l0): point = 96
   Insn 46(l0): point = 98
   Insn 45(l0): point = 100
   Insn 44(l0): point = 102
   Insn 43(l0): point = 104
   Insn 42(l0): point = 106
   Insn 41(l0): point = 108
   Insn 40(l0): point = 110
   Insn 39(l0): point = 112
   Insn 38(l0): point = 114
   Insn 37(l0): point = 116
   Insn 36(l0): point = 118
   Insn 35(l0): point = 120
   Insn 34(l0): point = 122
   Insn 33(l0): point = 124
   Insn 32(l0): point = 126
   Insn 31(l0): point = 128
   Insn 30(l0): point = 130
   Insn 29(l0): point = 132
   Insn 28(l0): point = 134
   Insn 27(l0): point = 136
   Insn 26(l0): point = 138
   Insn 25(l0): point = 140
   Insn 24(l0): point = 142
   Insn 22(l0): point = 144
   Insn 21(l0): point = 146
   Insn 20(l0): point = 148
   Insn 19(l0): point = 150
   Insn 18(l0): point = 152
   Insn 17(l0): point = 154
   Insn 23(l0): point = 156
   Insn 16(l0): point = 158
   Insn 15(l0): point = 160
   Insn 14(l0): point = 162
   Insn 13(l0): point = 164
   Insn 12(l0): point = 166
   Insn 11(l0): point = 168
   Insn 10(l0): point = 170
   Insn 9(l0): point = 172
   Insn 8(l0): point = 174
   Insn 7(l0): point = 176
   Insn 6(l0): point = 178
   Insn 5(l0): point = 180
 a0(r113): [3..4]
 a1(r76): [9..16]
 a2(r75): [13..20]
 a3(r74): [15..24]
 a4(r112): [17..18]
 a5(r111): [21..22]
 a6(r110): [25..26]
 a7(r109): [29..30]
 a8(r73): [29..32]
 a9(r108): [37..38]
 a10(r72): [41..56]
 a11(r107): [41..42]
 a12(r70): [43..72]
 a13(r106): [45..46]
 a14(r105): [49..50]
 a15(r104): [53..54]
 a16(r71): [57..58]
 a17(r100): [59..60]
 a18(r99): [61..62]
 a19(r101): [62..66]
 a20(r103): [63..64]
 a21(r102): [63..68]
 a22(r98): [67..70]
 a23(r97): [77..78]
 a24(r69): [81..82]
 a25(r68): [83..84]
 a26(r96): [85..86]
 a27(r67): [91..98]
 a28(r66): [95..102]
 a29(r65): [97..106]
 a30(r95): [99..100]
 a31(r94): [103..104]
 a32(r93): [107..108]
 a33(r92): [111..112]
 a34(r64): [111..114]
 a35(r91): [119..120]
 a36(r63): [123..142]
 a37(r90): [123..124]
 a38(r61): [125..158]
 a39(r89): [127..128]
 a40(r88): [131..132]
 a41(r87): [135..136]
 a42(r86): [139..140]
 a43(r62): [143..144]
 a44(r82): [145..146]
 a45(r81): [147..148]
 a46(r83): [148..152]
 a47(r85): [149..150]
 a48(r84): [149..154]
 a49(r80): [153..156]
 a50(r79): [163..164]
 a51(r60): [167..168]
 a52(r59): [169..170]
 a53(r78): [171..172]
 a54(r77): [175..176]
Compressing live ranges: from 183 to 82 - 44%
Ranges after the compression:
 a0(r113): [0..1]
 a1(r76): [2..3]
 a2(r75): [2..5]
 a3(r74): [2..7]
 a4(r112): [4..5]
 a5(r111): [6..7]
 a6(r110): [8..9]
 a7(r109): [10..11]
 a8(r73): [10..11]
 a9(r108): [12..13]
 a10(r72): [14..21]
 a11(r107): [14..15]
 a12(r70): [16..31]
 a13(r106): [16..17]
 a14(r105): [18..19]
 a15(r104): [20..21]
 a16(r71): [22..23]
 a17(r100): [24..25]
 a18(r99): [26..27]
 a19(r101): [27..29]
 a20(r103): [28..29]
 a21(r102): [28..31]
 a22(r98): [30..31]
 a23(r97): [32..33]
 a24(r69): [34..35]
 a25(r68): [36..37]
 a26(r96): [38..39]
 a27(r67): [40..41]
 a28(r66): [40..43]
 a29(r65): [40..45]
 a30(r95): [42..43]
 a31(r94): [44..45]
 a32(r93): [46..47]
 a33(r92): [48..49]
 a34(r64): [48..49]
 a35(r91): [50..51]
 a36(r63): [52..61]
 a37(r90): [52..53]
 a38(r61): [54..71]
 a39(r89): [54..55]
 a40(r88): [56..57]
 a41(r87): [58..59]
 a42(r86): [60..61]
 a43(r62): [62..63]
 a44(r82): [64..65]
 a45(r81): [66..67]
 a46(r83): [67..69]
 a47(r85): [68..69]
 a48(r84): [68..71]
 a49(r80): [70..71]
 a50(r79): [72..73]
 a51(r60): [74..75]
 a52(r59): [76..77]
 a53(r78): [78..79]
 a54(r77): [80..81]
  regions=1, blocks=3, points=82
    allocnos=55 (big 0), copies=0, conflicts=0, ranges=55
Disposition:
   52:r59  l0     0   51:r60  l0     0   38:r61  l0     1   43:r62  l0     0
   36:r63  l0     0   34:r64  l0     0   29:r65  l0     2   28:r66  l0     1
   27:r67  l0     0   25:r68  l0     0   24:r69  l0     0   12:r70  l0     1
   16:r71  l0     0   10:r72  l0     0    8:r73  l0     0    3:r74  l0     2
    2:r75  l0     1    1:r76  l0     0   54:r77  l0     0   53:r78  l0     0
   50:r79  l0     0   49:r80  l0     0   45:r81  l0     0   44:r82  l0     0
   46:r83  l0     3   48:r84  l0     2   47:r85  l0     0   42:r86  l0     2
   41:r87  l0     2   40:r88  l0     2   39:r89  l0     2   37:r90  l0     1
   35:r91  l0     0   33:r92  l0     1   32:r93  l0     0   31:r94  l0     0
   30:r95  l0     0   26:r96  l0     0   23:r97  l0     0   22:r98  l0     0
   18:r99  l0     0   17:r100 l0     0   19:r101 l0     3   21:r102 l0     2
   20:r103 l0     0   15:r104 l0     2   14:r105 l0     2   13:r106 l0     2
   11:r107 l0     1    9:r108 l0     0    7:r109 l0     1    6:r110 l0     0
    5:r111 l0     0    4:r112 l0     0    0:r113 l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 0
insn=7, live_throughout: 7, dead_or_set: 0, 77
insn=8, live_throughout: 7, dead_or_set: 77
insn=9, live_throughout: 7, dead_or_set: 78
insn=10, live_throughout: 7, dead_or_set: 59, 78
insn=11, live_throughout: 7, dead_or_set: 59, 60
insn=12, live_throughout: 7, dead_or_set: 60
insn=13, live_throughout: 7, dead_or_set: 79
insn=14, live_throughout: 7, dead_or_set: 79
insn=15, live_throughout: 7, dead_or_set: 0
insn=16, live_throughout: 7, dead_or_set: 61
insn=23, live_throughout: 7, 61, dead_or_set: 80
insn=17, live_throughout: 7, 61, 80, dead_or_set: 84
insn=18, live_throughout: 7, 61, 84, dead_or_set: 80, 83
insn=19, live_throughout: 7, 61, 83, 84, dead_or_set: 85
insn=20, live_throughout: 7, 61, dead_or_set: 81, 83, 84, 85
insn=21, live_throughout: 7, 61, dead_or_set: 81, 82
insn=22, live_throughout: 7, 61, dead_or_set: 62, 82
insn=24, live_throughout: 7, 61, dead_or_set: 62, 63
insn=25, live_throughout: 7, 61, 63, dead_or_set: 86
insn=26, live_throughout: 7, 61, 63, dead_or_set: 86
insn=27, live_throughout: 7, 61, 63, dead_or_set: 87
insn=28, live_throughout: 7, 61, 63, dead_or_set: 87
insn=29, live_throughout: 7, 61, 63, dead_or_set: 88
insn=30, live_throughout: 7, 61, 63, dead_or_set: 88
insn=31, live_throughout: 7, 61, 63, dead_or_set: 89
insn=32, live_throughout: 7, 61, 63, dead_or_set: 89
insn=33, live_throughout: 7, 63, dead_or_set: 61, 90
insn=34, live_throughout: 7, dead_or_set: 63, 90
insn=35, live_throughout: 7, dead_or_set: 91
insn=36, live_throughout: 7, dead_or_set: 91
insn=37, live_throughout: 7, dead_or_set: 0
insn=38, live_throughout: 7, dead_or_set: 0, 64
insn=39, live_throughout: 7, 64, dead_or_set: 92
insn=40, live_throughout: 7, dead_or_set: 64, 92
insn=41, live_throughout: 7, dead_or_set: 93
insn=42, live_throughout: 7, dead_or_set: 65, 93
insn=43, live_throughout: 7, 65, dead_or_set: 94
insn=44, live_throughout: 7, 65, dead_or_set: 66, 94
insn=45, live_throughout: 7, 65, 66, dead_or_set: 95
insn=46, live_throughout: 7, 65, 66, dead_or_set: 67, 95
insn=47, live_throughout: 7, 66, 67, dead_or_set: 65
insn=48, live_throughout: 7, 67, dead_or_set: 66
insn=49, live_throughout: 7, 67, dead_or_set: 
insn=50, live_throughout: 7, dead_or_set: 67
insn=51, live_throughout: 7, dead_or_set: 0
insn=52, live_throughout: 7, dead_or_set: 96
insn=53, live_throughout: 7, dead_or_set: 68, 96
insn=54, live_throughout: 7, dead_or_set: 68, 69
insn=55, live_throughout: 7, dead_or_set: 69
insn=56, live_throughout: 7, dead_or_set: 97
insn=57, live_throughout: 7, dead_or_set: 97
insn=58, live_throughout: 7, dead_or_set: 0
insn=59, live_throughout: 7, dead_or_set: 70
insn=66, live_throughout: 7, 70, dead_or_set: 98
insn=60, live_throughout: 7, 70, 98, dead_or_set: 102
insn=61, live_throughout: 7, 70, 102, dead_or_set: 98, 101
insn=62, live_throughout: 7, 70, 101, 102, dead_or_set: 103
insn=63, live_throughout: 7, 70, dead_or_set: 99, 101, 102, 103
insn=64, live_throughout: 7, 70, dead_or_set: 99, 100
insn=65, live_throughout: 7, 70, dead_or_set: 71, 100
insn=67, live_throughout: 7, 70, dead_or_set: 71, 72
insn=68, live_throughout: 7, 70, 72, dead_or_set: 104
insn=69, live_throughout: 7, 70, 72, dead_or_set: 104
insn=70, live_throughout: 7, 70, 72, dead_or_set: 105
insn=71, live_throughout: 7, 70, 72, dead_or_set: 105
insn=72, live_throughout: 7, 70, 72, dead_or_set: 106
insn=73, live_throughout: 7, 70, 72, dead_or_set: 106
insn=74, live_throughout: 7, 72, dead_or_set: 70, 107
insn=75, live_throughout: 7, dead_or_set: 72, 107
insn=76, live_throughout: 7, dead_or_set: 108
insn=77, live_throughout: 7, dead_or_set: 108
insn=78, live_throughout: 7, dead_or_set: 0
insn=79, live_throughout: 7, dead_or_set: 0, 73
insn=80, live_throughout: 7, 73, dead_or_set: 109
insn=81, live_throughout: 7, dead_or_set: 73, 109
insn=82, live_throughout: 7, dead_or_set: 110
insn=83, live_throughout: 7, dead_or_set: 74, 110
insn=84, live_throughout: 7, 74, dead_or_set: 111
insn=85, live_throughout: 7, 74, dead_or_set: 75, 111
insn=86, live_throughout: 7, 74, 75, dead_or_set: 112
insn=87, live_throughout: 7, 74, 75, dead_or_set: 76, 112
insn=88, live_throughout: 7, 75, 76, dead_or_set: 74
insn=89, live_throughout: 7, 76, dead_or_set: 75
insn=90, live_throughout: 7, 76, dead_or_set: 
insn=91, live_throughout: 7, dead_or_set: 76
insn=92, live_throughout: 7, dead_or_set: 0
insn=93, live_throughout: 7, dead_or_set: 113
insn=94, live_throughout: 7, dead_or_set: 113
insn=95, live_throughout: 7, dead_or_set: 
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 33
changing reg in insn 31
changing reg in insn 29
changing reg in insn 27
changing reg in insn 25
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 34
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 26
changing reg in insn 38
changing reg in insn 40
changing reg in insn 42
changing reg in insn 47
changing reg in insn 44
changing reg in insn 48
changing reg in insn 46
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 74
changing reg in insn 72
changing reg in insn 70
changing reg in insn 68
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 75
changing reg in insn 73
changing reg in insn 71
changing reg in insn 69
changing reg in insn 79
changing reg in insn 81
changing reg in insn 83
changing reg in insn 88
changing reg in insn 85
changing reg in insn 89
changing reg in insn 87
changing reg in insn 91
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 18
changing reg in insn 20
changing reg in insn 17
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 66
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 63
changing reg in insn 61
changing reg in insn 63
changing reg in insn 60
changing reg in insn 63
changing reg in insn 62
changing reg in insn 63
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 93
changing reg in insn 94
Spilling for insn 20.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 63.
Using reg 2 for reload 0
Using reg 5 for reload 1
changing reg in insn 17
changing reg in insn 20
 Register 84 now on stack.

changing reg in insn 60
changing reg in insn 63
 Register 102 now on stack.

Spilling for insn 20.
Using reg 2 for reload 0
Using reg 5 for reload 1
Spilling for insn 63.
Using reg 2 for reload 0
Using reg 5 for reload 1

Reloads for insn # 20
Reload 0: reload_in (SI) = (reg:SI 84)
	reload_out (SI) = (reg:SI 0 ax [81])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 84)
	reload_out_reg: (reg:SI 0 ax [81])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [83])
	reload_out (SI) = (reg:SI 3 bx [83])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [83])
	reload_out_reg: (reg:SI 3 bx [83])
	reload_reg_rtx: (reg:SI 5 di)

Reloads for insn # 63
Reload 0: reload_in (SI) = (reg:SI 102)
	reload_out (SI) = (reg:SI 0 ax [99])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 102)
	reload_out_reg: (reg:SI 0 ax [99])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [101])
	reload_out (SI) = (reg:SI 3 bx [101])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [101])
	reload_out_reg: (reg:SI 3 bx [101])
	reload_reg_rtx: (reg:SI 5 di)
deleting insn with uid = 7.
deleting insn with uid = 11.
deleting insn with uid = 38.
deleting insn with uid = 54.
deleting insn with uid = 79.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 95.


Display_Clear

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={38d,39u} r1={17d,15u} r2={22d,13u} r3={2d,2u} r5={4d,2u} r6={1d,26u} r7={1d,26u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r16={2e} r17={16d} r18={8d} r19={8d} r20={1d,1u} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} 
;;    total ref usage 564{438d,124u,2e} in 92{84 regular + 8 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 100 [0x64])) src/gui.c:281 64 {*movsi_internal}
     (nil))

(call_insn 6 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:281 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 8 6 9 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])
        (reg/f:SI 0 ax [77])) src/gui.c:281 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg/f:SI 0 ax [78])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:282 64 {*movsi_internal}
     (nil))

(insn 10 9 12 2 (set (reg/f:SI 0 ax [orig:59 D.6394 ] [59])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [78])
                (const_int 120 [0x78])) [0 display_2(D)->img_path+0 S4 A32])) src/gui.c:282 64 {*movsi_internal}
     (nil))

(insn 12 10 13 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:60 D.6395 ] [60])) src/gui.c:282 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (reg/f:SI 0 ax [79])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:282 64 {*movsi_internal}
     (nil))

(insn 14 13 15 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [79])) src/gui.c:282 64 {*movsi_internal}
     (nil))

(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:282 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 16 15 23 2 (set (reg/f:SI 1 dx [orig:61 D.6396 ] [61])
        (symbol_ref/f:SI ("*.LC4") [flags 0x2]  <var_decl 0x408fd840 *.LC4>)) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 23 16 17 2 (set (reg:SI 0 ax [80])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 17 23 18 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 18 17 19 2 (set (reg:SI 3 bx [83])
        (reg:SI 0 ax [80])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 19 18 99 2 (set (reg:QI 0 ax [85])
        (const_int 0 [0])) src/gui.c:283 66 {*movqi_internal}
     (nil))

(insn 99 19 101 2 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 101 99 20 2 (set (reg:SI 5 di)
        (reg:SI 3 bx [83])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 20 101 100 2 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [85])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:283 876 {*strlenqi_1}
     (nil))

(insn 100 20 21 2 (set (reg:SI 0 ax [81])
        (reg:SI 2 cx)) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 21 100 22 2 (set (reg:SI 0 ax [82])
        (not:SI (reg:SI 0 ax [81]))) src/gui.c:283 482 {*one_cmplsi2_1}
     (nil))

(insn 22 21 24 2 (parallel [
            (set (reg:SI 0 ax [orig:62 D.6397 ] [62])
                (plus:SI (reg:SI 0 ax [82])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:283 252 {*addsi_1}
     (nil))

(insn 24 22 25 2 (parallel [
            (set (reg/f:SI 0 ax [orig:63 D.6398 ] [63])
                (plus:SI (reg:SI 0 ax [orig:62 D.6397 ] [62])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:283 252 {*addsi_1}
     (nil))

(insn 25 24 26 2 (set (reg:SI 2 cx [86])
        (mem:SI (reg/f:SI 1 dx [orig:61 D.6396 ] [61]) [0 S4 A8])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 26 25 27 2 (set (mem:SI (reg/f:SI 0 ax [orig:63 D.6398 ] [63]) [0 S4 A8])
        (reg:SI 2 cx [86])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 27 26 28 2 (set (reg:SI 2 cx [87])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:61 D.6396 ] [61])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 28 27 29 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:63 D.6398 ] [63])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [87])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 29 28 30 2 (set (reg:SI 2 cx [88])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:61 D.6396 ] [61])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 30 29 31 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:63 D.6398 ] [63])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [88])) src/gui.c:283 64 {*movsi_internal}
     (nil))

(insn 31 30 32 2 (set (reg:HI 2 cx [89])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:61 D.6396 ] [61])
                (const_int 12 [0xc])) [0 S2 A8])) src/gui.c:283 65 {*movhi_internal}
     (nil))

(insn 32 31 33 2 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:63 D.6398 ] [63])
                (const_int 12 [0xc])) [0 S2 A8])
        (reg:HI 2 cx [89])) src/gui.c:283 65 {*movhi_internal}
     (nil))

(insn 33 32 34 2 (set (reg:QI 1 dx [90])
        (mem:QI (plus:SI (reg/f:SI 1 dx [orig:61 D.6396 ] [61])
                (const_int 14 [0xe])) [0 S1 A8])) src/gui.c:283 66 {*movqi_internal}
     (nil))

(insn 34 33 35 2 (set (mem:QI (plus:SI (reg/f:SI 0 ax [orig:63 D.6398 ] [63])
                (const_int 14 [0xe])) [0 S1 A8])
        (reg:QI 1 dx [90])) src/gui.c:283 66 {*movqi_internal}
     (nil))

(insn 35 34 36 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:284 64 {*movsi_internal}
     (nil))

(insn 36 35 37 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [91])) src/gui.c:284 64 {*movsi_internal}
     (nil))

(call_insn 37 36 39 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:284 927 {*call_value_0}
     (nil)
    (nil))

(insn 39 37 40 2 (set (reg/f:SI 1 dx [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:284 64 {*movsi_internal}
     (nil))

(insn 40 39 41 2 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [92])
                (const_int 12 [0xc])) [0 display_2(D)->background+0 S4 A32])
        (reg/f:SI 0 ax [orig:64 D.6399 ] [64])) src/gui.c:284 64 {*movsi_internal}
     (nil))

(insn 41 40 42 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 42 41 43 2 (parallel [
            (set (reg/f:SI 2 cx [orig:65 D.6400 ] [65])
                (plus:SI (reg/f:SI 0 ax [93])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:287 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c/i:SI (reg/f:SI 16 argp) [0 display+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 43 42 44 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 44 43 45 2 (set (reg/f:SI 1 dx [orig:66 D.6401 ] [66])
        (mem/s/f/j:SI (reg/f:SI 0 ax [94]) [0 display_2(D)->screen+0 S4 A32])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 45 44 46 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 46 45 47 2 (set (reg/f:SI 0 ax [orig:67 D.6402 ] [67])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [95])
                (const_int 12 [0xc])) [0 display_2(D)->background+0 S4 A32])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 47 46 48 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:65 D.6400 ] [65])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 48 47 49 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:66 D.6401 ] [66])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 49 48 50 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(insn 50 49 51 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.6402 ] [67])) src/gui.c:287 64 {*movsi_internal}
     (nil))

(call_insn 51 50 52 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:287 927 {*call_value_0}
     (nil)
    (nil))

(insn 52 51 53 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:288 64 {*movsi_internal}
     (nil))

(insn 53 52 55 2 (set (reg/f:SI 0 ax [orig:68 D.6403 ] [68])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [96])
                (const_int 120 [0x78])) [0 display_2(D)->img_path+0 S4 A32])) src/gui.c:288 64 {*movsi_internal}
     (nil))

(insn 55 53 56 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:69 D.6404 ] [69])) src/gui.c:288 64 {*movsi_internal}
     (nil))

(insn 56 55 57 2 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:288 64 {*movsi_internal}
     (nil))

(insn 57 56 58 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [97])) src/gui.c:288 64 {*movsi_internal}
     (nil))

(call_insn 58 57 59 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:288 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 59 58 66 2 (set (reg/f:SI 1 dx [orig:70 D.6405 ] [70])
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x408fd8a0 *.LC5>)) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 66 59 60 2 (set (reg:SI 0 ax [98])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 60 66 61 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 61 60 62 2 (set (reg:SI 3 bx [101])
        (reg:SI 0 ax [98])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 62 61 102 2 (set (reg:QI 0 ax [103])
        (const_int 0 [0])) src/gui.c:289 66 {*movqi_internal}
     (nil))

(insn 102 62 104 2 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 104 102 63 2 (set (reg:SI 5 di)
        (reg:SI 3 bx [101])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 63 104 103 2 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [103])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:289 876 {*strlenqi_1}
     (nil))

(insn 103 63 64 2 (set (reg:SI 0 ax [99])
        (reg:SI 2 cx)) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 64 103 65 2 (set (reg:SI 0 ax [100])
        (not:SI (reg:SI 0 ax [99]))) src/gui.c:289 482 {*one_cmplsi2_1}
     (nil))

(insn 65 64 67 2 (parallel [
            (set (reg:SI 0 ax [orig:71 D.6406 ] [71])
                (plus:SI (reg:SI 0 ax [100])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:289 252 {*addsi_1}
     (nil))

(insn 67 65 68 2 (parallel [
            (set (reg/f:SI 0 ax [orig:72 D.6407 ] [72])
                (plus:SI (reg:SI 0 ax [orig:71 D.6406 ] [71])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:289 252 {*addsi_1}
     (nil))

(insn 68 67 69 2 (set (reg:SI 2 cx [104])
        (mem:SI (reg/f:SI 1 dx [orig:70 D.6405 ] [70]) [0 S4 A8])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 69 68 70 2 (set (mem:SI (reg/f:SI 0 ax [orig:72 D.6407 ] [72]) [0 S4 A8])
        (reg:SI 2 cx [104])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 70 69 71 2 (set (reg:SI 2 cx [105])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:70 D.6405 ] [70])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 71 70 72 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:72 D.6407 ] [72])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [105])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 72 71 73 2 (set (reg:SI 2 cx [106])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:70 D.6405 ] [70])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 73 72 74 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:72 D.6407 ] [72])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [106])) src/gui.c:289 64 {*movsi_internal}
     (nil))

(insn 74 73 75 2 (set (reg:HI 1 dx [107])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:70 D.6405 ] [70])
                (const_int 12 [0xc])) [0 S2 A8])) src/gui.c:289 65 {*movhi_internal}
     (nil))

(insn 75 74 76 2 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:72 D.6407 ] [72])
                (const_int 12 [0xc])) [0 S2 A8])
        (reg:HI 1 dx [107])) src/gui.c:289 65 {*movhi_internal}
     (nil))

(insn 76 75 77 2 (set (reg/f:SI 0 ax [108])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:290 64 {*movsi_internal}
     (nil))

(insn 77 76 78 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [108])) src/gui.c:290 64 {*movsi_internal}
     (nil))

(call_insn 78 77 80 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:290 927 {*call_value_0}
     (nil)
    (nil))

(insn 80 78 81 2 (set (reg/f:SI 1 dx [109])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:290 64 {*movsi_internal}
     (nil))

(insn 81 80 82 2 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [109])
                (const_int 12 [0xc])) [0 display_2(D)->background+0 S4 A32])
        (reg/f:SI 0 ax [orig:73 D.6408 ] [73])) src/gui.c:290 64 {*movsi_internal}
     (nil))

(insn 82 81 83 2 (set (reg/f:SI 0 ax [110])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 83 82 84 2 (parallel [
            (set (reg/f:SI 2 cx [orig:74 D.6409 ] [74])
                (plus:SI (reg/f:SI 0 ax [110])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:292 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c/i:SI (reg/f:SI 16 argp) [0 display+0 S4 A32])
            (const_int 28 [0x1c]))
        (nil)))

(insn 84 83 85 2 (set (reg/f:SI 0 ax [111])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 85 84 86 2 (set (reg/f:SI 1 dx [orig:75 D.6410 ] [75])
        (mem/s/f/j:SI (reg/f:SI 0 ax [111]) [0 display_2(D)->screen+0 S4 A32])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 86 85 87 2 (set (reg/f:SI 0 ax [112])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 87 86 88 2 (set (reg/f:SI 0 ax [orig:76 D.6411 ] [76])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 24 [0x18])) [0 display_2(D)->gameBoard+0 S4 A32])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 88 87 89 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:74 D.6409 ] [74])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 89 88 90 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:75 D.6410 ] [75])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 90 89 91 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(insn 91 90 92 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:76 D.6411 ] [76])) src/gui.c:292 64 {*movsi_internal}
     (nil))

(call_insn 92 91 93 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:292 927 {*call_value_0}
     (nil)
    (nil))

(insn 93 92 94 2 (set (reg/f:SI 0 ax [113])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:294 64 {*movsi_internal}
     (nil))

(insn 94 93 95 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [113])) src/gui.c:294 64 {*movsi_internal}
     (nil))

(call_insn 95 94 98 2 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:294 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 98 95 0 NOTE_INSN_DELETED)


;; Function Display_RefreshGameBoard (Display_RefreshGameBoard)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a33 (r77,l0) best AREG, cover GENERAL_REGS
    r76: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a34 (r76,l0) best CREG, cover GENERAL_REGS
    r75: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a32 (r75,l0) best DIREG, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a31 (r73,l0) best CREG, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a40 (r69,l0) best AREG, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a21 (r64,l0) best AREG, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a16(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r64,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a24(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a26(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a30(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a31(r73,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a32(r75,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:0,0 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:12
  a33(r77,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a34(r76,l0) costs: AREG:2,2 DREG:2,2 CREG:0,0 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:8
  a35(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a36(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a40(r69,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 82(l0): point = 0
   Insn 81(l0): point = 2
   Insn 80(l0): point = 4
   Insn 79(l0): point = 6
   Insn 78(l0): point = 8
   Insn 77(l0): point = 10
   Insn 76(l0): point = 12
   Insn 75(l0): point = 14
   Insn 74(l0): point = 16
   Insn 73(l0): point = 18
   Insn 72(l0): point = 20
   Insn 71(l0): point = 22
   Insn 70(l0): point = 24
   Insn 69(l0): point = 26
   Insn 68(l0): point = 28
   Insn 67(l0): point = 30
   Insn 66(l0): point = 32
   Insn 65(l0): point = 34
   Insn 64(l0): point = 36
   Insn 63(l0): point = 38
   Insn 62(l0): point = 40
   Insn 61(l0): point = 42
   Insn 60(l0): point = 44
   Insn 59(l0): point = 46
   Insn 58(l0): point = 48
   Insn 57(l0): point = 50
   Insn 56(l0): point = 52
   Insn 55(l0): point = 54
   Insn 54(l0): point = 56
   Insn 53(l0): point = 58
   Insn 52(l0): point = 60
   Insn 51(l0): point = 62
   Insn 50(l0): point = 64
   Insn 49(l0): point = 66
   Insn 48(l0): point = 68
   Insn 47(l0): point = 70
   Insn 46(l0): point = 72
   Insn 45(l0): point = 74
   Insn 44(l0): point = 76
   Insn 43(l0): point = 78
   Insn 42(l0): point = 80
   Insn 41(l0): point = 82
   Insn 40(l0): point = 84
   Insn 39(l0): point = 86
   Insn 38(l0): point = 88
   Insn 37(l0): point = 90
   Insn 36(l0): point = 92
   Insn 35(l0): point = 94
   Insn 34(l0): point = 96
   Insn 33(l0): point = 98
   Insn 32(l0): point = 100
   Insn 31(l0): point = 102
   Insn 30(l0): point = 104
   Insn 29(l0): point = 106
   Insn 28(l0): point = 108
   Insn 27(l0): point = 110
   Insn 26(l0): point = 112
   Insn 25(l0): point = 114
   Insn 24(l0): point = 116
   Insn 22(l0): point = 118
   Insn 21(l0): point = 120
   Insn 20(l0): point = 122
   Insn 19(l0): point = 124
   Insn 18(l0): point = 126
   Insn 17(l0): point = 128
   Insn 23(l0): point = 130
   Insn 16(l0): point = 132
   Insn 15(l0): point = 134
   Insn 14(l0): point = 136
   Insn 13(l0): point = 138
   Insn 12(l0): point = 140
   Insn 11(l0): point = 142
   Insn 10(l0): point = 144
   Insn 9(l0): point = 146
   Insn 8(l0): point = 148
   Insn 7(l0): point = 150
   Insn 6(l0): point = 152
   Insn 5(l0): point = 154
 a0(r68): [3..4]
 a1(r99): [5..6]
 a2(r98): [11..12]
 a3(r97): [15..16]
 a4(r96): [21..22]
 a5(r95): [25..26]
 a6(r94): [29..30]
 a7(r93): [35..36]
 a8(r92): [39..40]
 a9(r91): [43..44]
 a10(r90): [49..50]
 a11(r89): [53..54]
 a12(r88): [57..58]
 a13(r67): [63..70]
 a14(r66): [67..74]
 a15(r65): [69..78]
 a16(r87): [71..72]
 a17(r86): [75..76]
 a18(r85): [79..80]
 a19(r84): [85..86]
 a20(r83): [89..90]
 a21(r64): [89..92]
 a22(r82): [97..98]
 a23(r63): [101..116]
 a24(r81): [101..102]
 a25(r61): [103..132]
 a26(r80): [105..106]
 a27(r79): [109..110]
 a28(r78): [113..114]
 a29(r62): [117..118]
 a30(r74): [119..120]
 a31(r73): [121..122]
 a32(r75): [122..126]
 a33(r77): [123..124]
 a34(r76): [123..128]
 a35(r72): [127..130]
 a36(r71): [137..138]
 a37(r60): [141..142]
 a38(r59): [143..144]
 a39(r70): [145..146]
 a40(r69): [149..150]
Compressing live ranges: from 157 to 68 - 43%
Ranges after the compression:
 a0(r68): [0..1]
 a1(r99): [2..3]
 a2(r98): [4..5]
 a3(r97): [6..7]
 a4(r96): [8..9]
 a5(r95): [10..11]
 a6(r94): [12..13]
 a7(r93): [14..15]
 a8(r92): [16..17]
 a9(r91): [18..19]
 a10(r90): [20..21]
 a11(r89): [22..23]
 a12(r88): [24..25]
 a13(r67): [26..27]
 a14(r66): [26..29]
 a15(r65): [26..31]
 a16(r87): [28..29]
 a17(r86): [30..31]
 a18(r85): [32..33]
 a19(r84): [34..35]
 a20(r83): [36..37]
 a21(r64): [36..37]
 a22(r82): [38..39]
 a23(r63): [40..47]
 a24(r81): [40..41]
 a25(r61): [42..57]
 a26(r80): [42..43]
 a27(r79): [44..45]
 a28(r78): [46..47]
 a29(r62): [48..49]
 a30(r74): [50..51]
 a31(r73): [52..53]
 a32(r75): [53..55]
 a33(r77): [54..55]
 a34(r76): [54..57]
 a35(r72): [56..57]
 a36(r71): [58..59]
 a37(r60): [60..61]
 a38(r59): [62..63]
 a39(r70): [64..65]
 a40(r69): [66..67]
  regions=1, blocks=3, points=68
    allocnos=41 (big 0), copies=0, conflicts=0, ranges=41
Disposition:
   38:r59  l0     0   37:r60  l0     0   25:r61  l0     1   29:r62  l0     0
   23:r63  l0     0   21:r64  l0     0   15:r65  l0     2   14:r66  l0     1
   13:r67  l0     0    0:r68  l0     0   40:r69  l0     0   39:r70  l0     0
   36:r71  l0     0   35:r72  l0     0   31:r73  l0     0   30:r74  l0     0
   32:r75  l0     3   34:r76  l0     2   33:r77  l0     0   28:r78  l0     2
   27:r79  l0     2   26:r80  l0     2   24:r81  l0     1   22:r82  l0     0
   20:r83  l0     1   19:r84  l0     0   18:r85  l0     0   17:r86  l0     0
   16:r87  l0     0   12:r88  l0     0   11:r89  l0     0   10:r90  l0     0
    9:r91  l0     0    8:r92  l0     0    7:r93  l0     0    6:r94  l0     0
    5:r95  l0     0    4:r96  l0     0    3:r97  l0     0    2:r98  l0     0
    1:r99  l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 0
insn=7, live_throughout: 7, dead_or_set: 0, 69
insn=8, live_throughout: 7, dead_or_set: 69
insn=9, live_throughout: 7, dead_or_set: 70
insn=10, live_throughout: 7, dead_or_set: 59, 70
insn=11, live_throughout: 7, dead_or_set: 59, 60
insn=12, live_throughout: 7, dead_or_set: 60
insn=13, live_throughout: 7, dead_or_set: 71
insn=14, live_throughout: 7, dead_or_set: 71
insn=15, live_throughout: 7, dead_or_set: 0
insn=16, live_throughout: 7, dead_or_set: 61
insn=23, live_throughout: 7, 61, dead_or_set: 72
insn=17, live_throughout: 7, 61, 72, dead_or_set: 76
insn=18, live_throughout: 7, 61, 76, dead_or_set: 72, 75
insn=19, live_throughout: 7, 61, 75, 76, dead_or_set: 77
insn=20, live_throughout: 7, 61, dead_or_set: 73, 75, 76, 77
insn=21, live_throughout: 7, 61, dead_or_set: 73, 74
insn=22, live_throughout: 7, 61, dead_or_set: 62, 74
insn=24, live_throughout: 7, 61, dead_or_set: 62, 63
insn=25, live_throughout: 7, 61, 63, dead_or_set: 78
insn=26, live_throughout: 7, 61, 63, dead_or_set: 78
insn=27, live_throughout: 7, 61, 63, dead_or_set: 79
insn=28, live_throughout: 7, 61, 63, dead_or_set: 79
insn=29, live_throughout: 7, 61, 63, dead_or_set: 80
insn=30, live_throughout: 7, 61, 63, dead_or_set: 80
insn=31, live_throughout: 7, 63, dead_or_set: 61, 81
insn=32, live_throughout: 7, dead_or_set: 63, 81
insn=33, live_throughout: 7, dead_or_set: 82
insn=34, live_throughout: 7, dead_or_set: 82
insn=35, live_throughout: 7, dead_or_set: 0
insn=36, live_throughout: 7, dead_or_set: 0, 64
insn=37, live_throughout: 7, 64, dead_or_set: 83
insn=38, live_throughout: 7, dead_or_set: 64, 83
insn=39, live_throughout: 7, dead_or_set: 84
insn=40, live_throughout: 7, dead_or_set: 84
insn=41, live_throughout: 7, dead_or_set: 
insn=42, live_throughout: 7, dead_or_set: 85
insn=43, live_throughout: 7, dead_or_set: 65, 85
insn=44, live_throughout: 7, 65, dead_or_set: 86
insn=45, live_throughout: 7, 65, dead_or_set: 66, 86
insn=46, live_throughout: 7, 65, 66, dead_or_set: 87
insn=47, live_throughout: 7, 65, 66, dead_or_set: 67, 87
insn=48, live_throughout: 7, 66, 67, dead_or_set: 65
insn=49, live_throughout: 7, 67, dead_or_set: 66
insn=50, live_throughout: 7, 67, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 67
insn=52, live_throughout: 7, dead_or_set: 0
insn=53, live_throughout: 7, dead_or_set: 88
insn=54, live_throughout: 7, dead_or_set: 88
insn=55, live_throughout: 7, dead_or_set: 89
insn=56, live_throughout: 7, dead_or_set: 89
insn=57, live_throughout: 7, dead_or_set: 90
insn=58, live_throughout: 7, dead_or_set: 90
insn=59, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 91
insn=61, live_throughout: 7, dead_or_set: 91
insn=62, live_throughout: 7, dead_or_set: 92
insn=63, live_throughout: 7, dead_or_set: 92
insn=64, live_throughout: 7, dead_or_set: 93
insn=65, live_throughout: 7, dead_or_set: 93
insn=66, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 94
insn=68, live_throughout: 7, dead_or_set: 94
insn=69, live_throughout: 7, dead_or_set: 95
insn=70, live_throughout: 7, dead_or_set: 95
insn=71, live_throughout: 7, dead_or_set: 96
insn=72, live_throughout: 7, dead_or_set: 96
insn=73, live_throughout: 7, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 97
insn=75, live_throughout: 7, dead_or_set: 97
insn=76, live_throughout: 7, dead_or_set: 98
insn=77, live_throughout: 7, dead_or_set: 98
insn=78, live_throughout: 7, dead_or_set: 
insn=79, live_throughout: 7, dead_or_set: 99
insn=80, live_throughout: 7, dead_or_set: 68, 99
insn=81, live_throughout: 7, dead_or_set: 68
insn=82, live_throughout: 7, dead_or_set: 0
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 31
changing reg in insn 29
changing reg in insn 27
changing reg in insn 25
changing reg in insn 22
changing reg in insn 24
changing reg in insn 24
changing reg in insn 32
changing reg in insn 30
changing reg in insn 28
changing reg in insn 26
changing reg in insn 36
changing reg in insn 38
changing reg in insn 43
changing reg in insn 48
changing reg in insn 45
changing reg in insn 49
changing reg in insn 47
changing reg in insn 51
changing reg in insn 80
changing reg in insn 81
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 18
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 20
changing reg in insn 18
changing reg in insn 20
changing reg in insn 17
changing reg in insn 20
changing reg in insn 19
changing reg in insn 20
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 37
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 70
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 80
Spilling for insn 20.
Using reg 2 for reload 0
Using reg 5 for reload 1
changing reg in insn 17
changing reg in insn 20
 Register 76 now on stack.

Spilling for insn 20.
Using reg 2 for reload 0
Using reg 5 for reload 1

Reloads for insn # 20
Reload 0: reload_in (SI) = (reg:SI 76)
	reload_out (SI) = (reg:SI 0 ax [73])
	CREG, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 76)
	reload_out_reg: (reg:SI 0 ax [73])
	reload_reg_rtx: (reg:SI 2 cx)
Reload 1: reload_in (SI) = (reg:SI 3 bx [75])
	reload_out (SI) = (reg:SI 3 bx [75])
	DIREG, RELOAD_OTHER (opnum = 1)
	reload_in_reg: (reg:SI 3 bx [75])
	reload_out_reg: (reg:SI 3 bx [75])
	reload_reg_rtx: (reg:SI 5 di)
deleting insn with uid = 7.
deleting insn with uid = 11.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 66.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 82.


Display_RefreshGameBoard

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={39d,33u} r1={15d,7u} r2={17d,6u} r3={1d,1u} r5={2d,1u} r6={1d,27u} r7={1d,33u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r16={1e} r17={14d} r18={10d} r19={10d} r20={1d,1u} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} 
;;    total ref usage 621{511d,109u,1e} in 78{68 regular + 10 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 100 [0x64])) src/gui.c:301 64 {*movsi_internal}
     (nil))

(call_insn 6 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:301 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 8 6 9 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])
        (reg/f:SI 0 ax [69])) src/gui.c:301 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg/f:SI 0 ax [70])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:302 64 {*movsi_internal}
     (nil))

(insn 10 9 12 2 (set (reg/f:SI 0 ax [orig:59 D.6384 ] [59])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [70])
                (const_int 120 [0x78])) [0 display_2(D)->img_path+0 S4 A32])) src/gui.c:302 64 {*movsi_internal}
     (nil))

(insn 12 10 13 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:60 D.6385 ] [60])) src/gui.c:302 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (reg/f:SI 0 ax [71])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:302 64 {*movsi_internal}
     (nil))

(insn 14 13 15 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [71])) src/gui.c:302 64 {*movsi_internal}
     (nil))

(call_insn 15 14 16 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strcpy") [flags 0x41]  <function_decl 0x406ae780 strcpy>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:302 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 16 15 23 2 (set (reg/f:SI 1 dx [orig:61 D.6386 ] [61])
        (symbol_ref/f:SI ("*.LC5") [flags 0x2]  <var_decl 0x408fd8a0 *.LC5>)) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 23 16 17 2 (set (reg:SI 0 ax [72])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 17 23 18 2 (set (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 18 17 19 2 (set (reg:SI 3 bx [75])
        (reg:SI 0 ax [72])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 19 18 86 2 (set (reg:QI 0 ax [77])
        (const_int 0 [0])) src/gui.c:303 66 {*movqi_internal}
     (nil))

(insn 86 19 88 2 (set (reg:SI 2 cx)
        (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 %sfp+-20 S4 A32])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 88 86 20 2 (set (reg:SI 5 di)
        (reg:SI 3 bx [75])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 20 88 87 2 (parallel [
            (set (reg:SI 2 cx)
                (unspec:SI [
                        (mem:BLK (reg:SI 5 di) [0 A8])
                        (reg:QI 0 ax [77])
                        (const_int 1 [0x1])
                        (reg:SI 2 cx)
                    ] UNSPEC_SCAS))
            (clobber (reg:SI 5 di))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:303 876 {*strlenqi_1}
     (nil))

(insn 87 20 21 2 (set (reg:SI 0 ax [73])
        (reg:SI 2 cx)) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 21 87 22 2 (set (reg:SI 0 ax [74])
        (not:SI (reg:SI 0 ax [73]))) src/gui.c:303 482 {*one_cmplsi2_1}
     (nil))

(insn 22 21 24 2 (parallel [
            (set (reg:SI 0 ax [orig:62 D.6387 ] [62])
                (plus:SI (reg:SI 0 ax [74])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:303 252 {*addsi_1}
     (nil))

(insn 24 22 25 2 (parallel [
            (set (reg/f:SI 0 ax [orig:63 D.6388 ] [63])
                (plus:SI (reg:SI 0 ax [orig:62 D.6387 ] [62])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:303 252 {*addsi_1}
     (nil))

(insn 25 24 26 2 (set (reg:SI 2 cx [78])
        (mem:SI (reg/f:SI 1 dx [orig:61 D.6386 ] [61]) [0 S4 A8])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 26 25 27 2 (set (mem:SI (reg/f:SI 0 ax [orig:63 D.6388 ] [63]) [0 S4 A8])
        (reg:SI 2 cx [78])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 27 26 28 2 (set (reg:SI 2 cx [79])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:61 D.6386 ] [61])
                (const_int 4 [0x4])) [0 S4 A8])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 28 27 29 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:63 D.6388 ] [63])
                (const_int 4 [0x4])) [0 S4 A8])
        (reg:SI 2 cx [79])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 29 28 30 2 (set (reg:SI 2 cx [80])
        (mem:SI (plus:SI (reg/f:SI 1 dx [orig:61 D.6386 ] [61])
                (const_int 8 [0x8])) [0 S4 A8])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 30 29 31 2 (set (mem:SI (plus:SI (reg/f:SI 0 ax [orig:63 D.6388 ] [63])
                (const_int 8 [0x8])) [0 S4 A8])
        (reg:SI 2 cx [80])) src/gui.c:303 64 {*movsi_internal}
     (nil))

(insn 31 30 32 2 (set (reg:HI 1 dx [81])
        (mem:HI (plus:SI (reg/f:SI 1 dx [orig:61 D.6386 ] [61])
                (const_int 12 [0xc])) [0 S2 A8])) src/gui.c:303 65 {*movhi_internal}
     (nil))

(insn 32 31 33 2 (set (mem:HI (plus:SI (reg/f:SI 0 ax [orig:63 D.6388 ] [63])
                (const_int 12 [0xc])) [0 S2 A8])
        (reg:HI 1 dx [81])) src/gui.c:303 65 {*movhi_internal}
     (nil))

(insn 33 32 34 2 (set (reg/f:SI 0 ax [82])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:304 64 {*movsi_internal}
     (nil))

(insn 34 33 35 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [82])) src/gui.c:304 64 {*movsi_internal}
     (nil))

(call_insn 35 34 37 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("IMG_Load") [flags 0x41]  <function_decl 0x407f0b80 IMG_Load>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:304 927 {*call_value_0}
     (nil)
    (nil))

(insn 37 35 38 2 (set (reg/f:SI 1 dx [83])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:304 64 {*movsi_internal}
     (nil))

(insn 38 37 39 2 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 1 dx [83])
                (const_int 12 [0xc])) [0 display_2(D)->background+0 S4 A32])
        (reg/f:SI 0 ax [orig:64 D.6389 ] [64])) src/gui.c:304 64 {*movsi_internal}
     (nil))

(insn 39 38 40 2 (set (reg/f:SI 0 ax [84])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 temp_path+0 S4 A32])) src/gui.c:305 64 {*movsi_internal}
     (nil))

(insn 40 39 41 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [84])) src/gui.c:305 64 {*movsi_internal}
     (nil))

(call_insn 41 40 42 2 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:305 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 42 41 43 2 (set (reg/f:SI 0 ax [85])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 43 42 44 2 (parallel [
            (set (reg/f:SI 2 cx [orig:65 D.6390 ] [65])
                (plus:SI (reg/f:SI 0 ax [85])
                    (const_int 28 [0x1c])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:307 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c/i:SI (reg/f:SI 16 argp) [0 display+0 S4 A32])
            (const_int 28 [0x1c]))
        (nil)))

(insn 44 43 45 2 (set (reg/f:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 45 44 46 2 (set (reg/f:SI 1 dx [orig:66 D.6391 ] [66])
        (mem/s/f/j:SI (reg/f:SI 0 ax [86]) [0 display_2(D)->screen+0 S4 A32])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 46 45 47 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 47 46 48 2 (set (reg/f:SI 0 ax [orig:67 D.6392 ] [67])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [87])
                (const_int 24 [0x18])) [0 display_2(D)->gameBoard+0 S4 A32])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 48 47 49 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:65 D.6390 ] [65])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 49 48 50 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:66 D.6391 ] [66])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 50 49 51 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(insn 51 50 52 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.6392 ] [67])) src/gui.c:307 64 {*movsi_internal}
     (nil))

(call_insn 52 51 53 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:307 927 {*call_value_0}
     (nil)
    (nil))

(insn 53 52 54 2 (set (reg/f:SI 0 ax [88])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(insn 54 53 55 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [88])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(insn 55 54 56 2 (set (reg/f:SI 0 ax [89])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(insn 56 55 57 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [89])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(insn 57 56 58 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(insn 58 57 59 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [90])) src/gui.c:310 64 {*movsi_internal}
     (nil))

(call_insn 59 58 60 2 (call (mem:QI (symbol_ref:SI ("Display_Checkers") [flags 0x3]  <function_decl 0x4081a000 Display_Checkers>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:310 618 {*call_0}
     (nil)
    (nil))

(insn 60 59 61 2 (set (reg/f:SI 0 ax [91])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(insn 61 60 62 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [91])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(insn 62 61 63 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(insn 63 62 64 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [92])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(insn 64 63 65 2 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(insn 65 64 66 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [93])) src/gui.c:311 64 {*movsi_internal}
     (nil))

(call_insn 66 65 67 2 (call (mem:QI (symbol_ref:SI ("Display_DrawOut") [flags 0x3]  <function_decl 0x4081a880 Display_DrawOut>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:311 618 {*call_0}
     (nil)
    (nil))

(insn 67 66 68 2 (set (reg/f:SI 0 ax [94])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(insn 68 67 69 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [94])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(insn 69 68 70 2 (set (reg/f:SI 0 ax [95])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(insn 70 69 71 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [95])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(insn 71 70 72 2 (set (reg/f:SI 0 ax [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(insn 72 71 73 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [96])) src/gui.c:312 64 {*movsi_internal}
     (nil))

(call_insn 73 72 74 2 (call (mem:QI (symbol_ref:SI ("Display_DrawBar") [flags 0x3]  <function_decl 0x4081a900 Display_DrawBar>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:312 618 {*call_0}
     (nil)
    (nil))

(insn 74 73 75 2 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:314 64 {*movsi_internal}
     (nil))

(insn 75 74 76 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [97])) src/gui.c:314 64 {*movsi_internal}
     (nil))

(insn 76 75 77 2 (set (reg/f:SI 0 ax [98])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:314 64 {*movsi_internal}
     (nil))

(insn 77 76 78 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [98])) src/gui.c:314 64 {*movsi_internal}
     (nil))

(call_insn 78 77 79 2 (call (mem:QI (symbol_ref:SI ("Display_Die") [flags 0x3]  <function_decl 0x4081a080 Display_Die>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:314 618 {*call_0}
     (nil)
    (nil))

(insn 79 78 80 2 (set (reg/f:SI 0 ax [99])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:316 64 {*movsi_internal}
     (nil))

(insn 80 79 81 2 (set (reg/f:SI 0 ax [orig:68 D.6393 ] [68])
        (mem/s/f/j:SI (reg/f:SI 0 ax [99]) [0 display_2(D)->screen+0 S4 A32])) src/gui.c:316 64 {*movsi_internal}
     (nil))

(insn 81 80 82 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6393 ] [68])) src/gui.c:316 64 {*movsi_internal}
     (nil))

(call_insn 82 81 85 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Flip") [flags 0x41]  <function_decl 0x4079fa00 SDL_Flip>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:316 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 85 82 0 NOTE_INSN_DELETED)


;; Function Display_Score (Display_Score)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a28 (r66,l0) best AREG, cover GENERAL_REGS
    r65: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a29 (r65,l0) best AREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r85,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a5(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r80,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a10(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r76,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a14(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r73,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a18(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r66,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r65,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 85(l0): point = 0
   Insn 84(l0): point = 2
   Insn 83(l0): point = 4
   Insn 82(l0): point = 6
   Insn 81(l0): point = 8
   Insn 80(l0): point = 10
   Insn 79(l0): point = 12
   Insn 78(l0): point = 14
   Insn 77(l0): point = 16
   Insn 76(l0): point = 18
   Insn 75(l0): point = 20
   Insn 74(l0): point = 22
   Insn 73(l0): point = 24
   Insn 72(l0): point = 26
   Insn 71(l0): point = 28
   Insn 70(l0): point = 30
   Insn 69(l0): point = 32
   Insn 68(l0): point = 34
   Insn 67(l0): point = 36
   Insn 66(l0): point = 38
   Insn 65(l0): point = 40
   Insn 64(l0): point = 42
   Insn 63(l0): point = 44
   Insn 62(l0): point = 46
   Insn 61(l0): point = 48
   Insn 60(l0): point = 50
   Insn 59(l0): point = 52
   Insn 58(l0): point = 54
   Insn 57(l0): point = 56
   Insn 56(l0): point = 58
   Insn 55(l0): point = 60
   Insn 54(l0): point = 62
   Insn 53(l0): point = 64
   Insn 52(l0): point = 66
   Insn 51(l0): point = 68
   Insn 50(l0): point = 70
   Insn 49(l0): point = 72
   Insn 48(l0): point = 74
   Insn 47(l0): point = 76
   Insn 46(l0): point = 78
   Insn 45(l0): point = 80
   Insn 44(l0): point = 82
   Insn 43(l0): point = 84
   Insn 42(l0): point = 86
   Insn 41(l0): point = 88
   Insn 40(l0): point = 90
   Insn 39(l0): point = 92
   Insn 38(l0): point = 94
   Insn 37(l0): point = 96
   Insn 36(l0): point = 98
   Insn 35(l0): point = 100
   Insn 34(l0): point = 102
   Insn 33(l0): point = 104
   Insn 32(l0): point = 106
   Insn 31(l0): point = 108
   Insn 30(l0): point = 110
   Insn 29(l0): point = 112
   Insn 28(l0): point = 114
   Insn 27(l0): point = 116
   Insn 26(l0): point = 118
   Insn 25(l0): point = 120
   Insn 24(l0): point = 122
   Insn 23(l0): point = 124
   Insn 22(l0): point = 126
   Insn 21(l0): point = 128
   Insn 20(l0): point = 130
   Insn 19(l0): point = 132
   Insn 18(l0): point = 134
   Insn 17(l0): point = 136
   Insn 16(l0): point = 138
   Insn 15(l0): point = 140
   Insn 14(l0): point = 142
   Insn 13(l0): point = 144
   Insn 12(l0): point = 146
   Insn 11(l0): point = 148
   Insn 10(l0): point = 150
   Insn 9(l0): point = 152
   Insn 8(l0): point = 154
   Insn 7(l0): point = 156
   Insn 6(l0): point = 158
   Insn 5(l0): point = 160
 a0(r88): [3..4]
 a1(r87): [9..10]
 a2(r86): [15..16]
 a3(r64): [19..30]
 a4(r85 [0]): [21..22]
 a4(r85 [1]): [21..22]
 a5(r84): [25..26]
 a6(r83): [31..32]
 a7(r82): [39..40]
 a8(r81): [43..44]
 a9(r80 [0]): [47..48]
 a9(r80 [1]): [47..48]
 a10(r79): [51..52]
 a11(r78): [61..62]
 a12(r77): [65..66]
 a13(r76 [0]): [69..70]
 a13(r76 [1]): [69..70]
 a14(r75): [73..74]
 a15(r74): [83..84]
 a16(r63): [87..98]
 a17(r73 [0]): [89..90]
 a17(r73 [1]): [89..90]
 a18(r72): [93..94]
 a19(r71): [99..100]
 a20(r70): [109..110]
 a21(r62): [113..116]
 a22(r61): [115..118]
 a23(r69): [119..120]
 a24(r68): [125..126]
 a25(r60): [129..132]
 a26(r59): [131..134]
 a27(r67): [135..136]
 a28(r66): [147..148]
 a29(r65): [155..156]
Compressing live ranges: from 163 to 52 - 31%
Ranges after the compression:
 a0(r88): [0..1]
 a1(r87): [2..3]
 a2(r86): [4..5]
 a3(r64): [6..9]
 a4(r85 [0]): [6..7]
 a4(r85 [1]): [6..7]
 a5(r84): [8..9]
 a6(r83): [10..11]
 a7(r82): [12..13]
 a8(r81): [14..15]
 a9(r80 [0]): [16..17]
 a9(r80 [1]): [16..17]
 a10(r79): [18..19]
 a11(r78): [20..21]
 a12(r77): [22..23]
 a13(r76 [0]): [24..25]
 a13(r76 [1]): [24..25]
 a14(r75): [26..27]
 a15(r74): [28..29]
 a16(r63): [30..33]
 a17(r73 [0]): [30..31]
 a17(r73 [1]): [30..31]
 a18(r72): [32..33]
 a19(r71): [34..35]
 a20(r70): [36..37]
 a21(r62): [38..39]
 a22(r61): [38..39]
 a23(r69): [40..41]
 a24(r68): [42..43]
 a25(r60): [44..45]
 a26(r59): [44..45]
 a27(r67): [46..47]
 a28(r66): [48..49]
 a29(r65): [50..51]
  regions=1, blocks=3, points=52
    allocnos=30 (big 4), copies=0, conflicts=0, ranges=34
Disposition:
   26:r59  l0     1   25:r60  l0     0   22:r61  l0     1   21:r62  l0     0
   16:r63  l0     2    3:r64  l0     2   29:r65  l0     0   28:r66  l0     0
   27:r67  l0     0   24:r68  l0     0   23:r69  l0     0   20:r70  l0     0
   19:r71  l0     0   18:r72  l0     0   17:r73  l0     0   15:r74  l0     0
   14:r75  l0     0   13:r76  l0     0   12:r77  l0     0   11:r78  l0     0
   10:r79  l0     0    9:r80  l0     0    8:r81  l0     0    7:r82  l0     0
    6:r83  l0     0    5:r84  l0     0    4:r85  l0     0    2:r86  l0     0
    1:r87  l0     0    0:r88  l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 0
insn=7, live_throughout: 7, dead_or_set: 0, 65
insn=8, live_throughout: 7, dead_or_set: 65
insn=9, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 0
insn=11, live_throughout: 7, dead_or_set: 0, 66
insn=12, live_throughout: 7, dead_or_set: 66
insn=13, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 67
insn=18, live_throughout: 7, dead_or_set: 59, 67
insn=19, live_throughout: 7, 59, dead_or_set: 60
insn=20, live_throughout: 7, 60, dead_or_set: 59
insn=21, live_throughout: 7, dead_or_set: 60
insn=22, live_throughout: 7, dead_or_set: 68
insn=23, live_throughout: 7, dead_or_set: 68
insn=24, live_throughout: 7, dead_or_set: 0
insn=25, live_throughout: 7, dead_or_set: 69
insn=26, live_throughout: 7, dead_or_set: 61, 69
insn=27, live_throughout: 7, 61, dead_or_set: 62
insn=28, live_throughout: 7, 62, dead_or_set: 61
insn=29, live_throughout: 7, dead_or_set: 62
insn=30, live_throughout: 7, dead_or_set: 70
insn=31, live_throughout: 7, dead_or_set: 70
insn=32, live_throughout: 7, dead_or_set: 0
insn=33, live_throughout: 7, dead_or_set: 
insn=34, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 71
insn=36, live_throughout: 7, dead_or_set: 63, 71
insn=37, live_throughout: 7, 63, dead_or_set: 
insn=38, live_throughout: 7, 63, dead_or_set: 72
insn=39, live_throughout: 7, 63, dead_or_set: 72
insn=40, live_throughout: 7, 63, dead_or_set: 73
insn=41, live_throughout: 7, 63, dead_or_set: 73
insn=42, live_throughout: 7, dead_or_set: 63
insn=43, live_throughout: 7, dead_or_set: 74
insn=44, live_throughout: 7, dead_or_set: 74
insn=45, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 75
insn=49, live_throughout: 7, dead_or_set: 75
insn=50, live_throughout: 7, dead_or_set: 76
insn=51, live_throughout: 7, dead_or_set: 76
insn=52, live_throughout: 7, dead_or_set: 77
insn=53, live_throughout: 7, dead_or_set: 77
insn=54, live_throughout: 7, dead_or_set: 78
insn=55, live_throughout: 7, dead_or_set: 78
insn=56, live_throughout: 7, dead_or_set: 
insn=57, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 
insn=59, live_throughout: 7, dead_or_set: 79
insn=60, live_throughout: 7, dead_or_set: 79
insn=61, live_throughout: 7, dead_or_set: 80
insn=62, live_throughout: 7, dead_or_set: 80
insn=63, live_throughout: 7, dead_or_set: 81
insn=64, live_throughout: 7, dead_or_set: 81
insn=65, live_throughout: 7, dead_or_set: 82
insn=66, live_throughout: 7, dead_or_set: 82
insn=67, live_throughout: 7, dead_or_set: 
insn=68, live_throughout: 7, dead_or_set: 
insn=69, live_throughout: 7, dead_or_set: 83
insn=70, live_throughout: 7, dead_or_set: 64, 83
insn=71, live_throughout: 7, 64, dead_or_set: 
insn=72, live_throughout: 7, 64, dead_or_set: 84
insn=73, live_throughout: 7, 64, dead_or_set: 84
insn=74, live_throughout: 7, 64, dead_or_set: 85
insn=75, live_throughout: 7, 64, dead_or_set: 85
insn=76, live_throughout: 7, dead_or_set: 64
insn=77, live_throughout: 7, dead_or_set: 86
insn=78, live_throughout: 7, dead_or_set: 86
insn=79, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 87
insn=81, live_throughout: 7, dead_or_set: 87
insn=82, live_throughout: 7, dead_or_set: 
insn=83, live_throughout: 7, dead_or_set: 88
insn=84, live_throughout: 7, dead_or_set: 88
insn=85, live_throughout: 7, dead_or_set: 
changing reg in insn 18
changing reg in insn 20
changing reg in insn 19
changing reg in insn 21
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 29
changing reg in insn 36
changing reg in insn 42
changing reg in insn 70
changing reg in insn 76
changing reg in insn 7
changing reg in insn 8
changing reg in insn 11
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 69
changing reg in insn 70
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 77
changing reg in insn 78
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 84
deleting insn with uid = 7.
deleting insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 32.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 85.


Display_Score

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp]
;;  ref usage 	r0={35d,26u} r1={17d,6u} r2={13d,2u} r6={1d,35u} r7={1d,42u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r17={10d} r18={10d} r19={10d} r20={1d,1u} r21={10d} r22={10d} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={10d} r38={10d} r39={10d} r40={10d} r41={10d} r42={10d} r43={10d} r44={10d} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} 
;;    total ref usage 610{498d,112u,0e} in 79{69 regular + 10 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 3 [0x3])) src/gui.c:322 64 {*movsi_internal}
     (nil))

(call_insn 6 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:322 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 8 6 9 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 scoreP1+0 S4 A32])
        (reg/f:SI 0 ax [65])) src/gui.c:322 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 3 [0x3])) src/gui.c:323 64 {*movsi_internal}
     (nil))

(call_insn 10 9 12 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:323 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 12 10 13 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scoreP2+0 S4 A32])
        (reg/f:SI 0 ax [66])) src/gui.c:323 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c.r+0 S1 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:324 66 {*movqi_internal}
     (nil))

(insn 14 13 15 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -11 [0xfffffffffffffff5])) [0 c.g+0 S1 A8])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:324 66 {*movqi_internal}
     (nil))

(insn 15 14 16 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 c.b+0 S1 A16])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:324 66 {*movqi_internal}
     (nil))

(insn 16 15 17 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -9 [0xfffffffffffffff7])) [0 c.unused+0 S1 A8])
        (const_int 0 [0])) src/gui.c:324 66 {*movqi_internal}
     (nil))

(insn 17 16 18 2 (set (reg/f:SI 0 ax [67])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 18 17 19 2 (set (reg:SI 1 dx [orig:59 D.6378 ] [59])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [67])
                (const_int 232 [0xe8])) [0 gameState_3(D)->score+0 S4 A32])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 19 18 20 2 (set (reg/f:SI 0 ax [orig:60 D.6379 ] [60])
        (symbol_ref/f:SI ("*.LC20") [flags 0x2]  <var_decl 0x408fdea0 *.LC20>)) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 20 19 21 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [orig:59 D.6378 ] [59])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 21 20 22 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:60 D.6379 ] [60])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 22 21 23 2 (set (reg/f:SI 0 ax [68])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 scoreP1+0 S4 A32])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(insn 23 22 24 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [68])) src/gui.c:326 64 {*movsi_internal}
     (nil))

(call_insn 24 23 25 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sprintf") [flags 0x41]  <function_decl 0x406b4200 sprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:326 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 25 24 26 2 (set (reg/f:SI 0 ax [69])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 26 25 27 2 (set (reg:SI 1 dx [orig:61 D.6380 ] [61])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [69])
                (const_int 236 [0xec])) [0 gameState_3(D)->scoreP2+0 S4 A32])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 27 26 28 2 (set (reg/f:SI 0 ax [orig:62 D.6381 ] [62])
        (symbol_ref/f:SI ("*.LC20") [flags 0x2]  <var_decl 0x408fdea0 *.LC20>)) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 28 27 29 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [orig:61 D.6380 ] [61])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 29 28 30 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:62 D.6381 ] [62])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 30 29 31 2 (set (reg/f:SI 0 ax [70])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scoreP2+0 S4 A32])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(insn 31 30 32 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [70])) src/gui.c:327 64 {*movsi_internal}
     (nil))

(call_insn 32 31 33 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sprintf") [flags 0x41]  <function_decl 0x406b4200 sprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:327 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 33 32 34 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos.x+0 S2 A32])
        (const_int 108 [0x6c])) src/gui.c:329 65 {*movhi_internal}
     (nil))

(insn 34 33 35 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -26 [0xffffffffffffffe6])) [0 pos.y+0 S2 A16])
        (const_int 40 [0x28])) src/gui.c:330 65 {*movhi_internal}
     (nil))

(insn 35 34 36 2 (set (reg/f:SI 0 ax [71])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 36 35 37 2 (set (reg/f:SI 2 cx [orig:63 D.6382 ] [63])
        (mem/s/f/j:SI (reg/f:SI 0 ax [71]) [0 game_8(D)->player1_name+0 S4 A32])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 37 36 38 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 38 37 39 2 (set (reg:SI 0 ax [72])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S4 A32])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 39 38 40 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 0 ax [72])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 40 39 41 2 (set (reg:DI 0 ax [73])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos+0 S8 A32])) src/gui.c:331 63 {*movdi_internal}
     (nil))

(insn 41 40 42 2 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S8 A32])
        (reg:DI 0 ax [73])) src/gui.c:331 63 {*movdi_internal}
     (nil))

(insn 42 41 43 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:63 D.6382 ] [63])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 43 42 44 2 (set (reg/f:SI 0 ax [74])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(insn 44 43 45 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [74])) src/gui.c:331 64 {*movsi_internal}
     (nil))

(call_insn 45 44 46 2 (call (mem:QI (symbol_ref:SI ("Display_Message") [flags 0x3]  <function_decl 0x4081a380 Display_Message>) [0 S1 A8])
        (const_int 24 [0x18])) src/gui.c:331 618 {*call_0}
     (nil)
    (nil))

(insn 46 45 47 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos.x+0 S2 A32])
        (const_int 310 [0x136])) src/gui.c:332 65 {*movhi_internal}
     (nil))

(insn 47 46 48 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 48 47 49 2 (set (reg:SI 0 ax [75])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S4 A32])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 49 48 50 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 0 ax [75])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 50 49 51 2 (set (reg:DI 0 ax [76])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos+0 S8 A32])) src/gui.c:333 63 {*movdi_internal}
     (nil))

(insn 51 50 52 2 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S8 A32])
        (reg:DI 0 ax [76])) src/gui.c:333 63 {*movdi_internal}
     (nil))

(insn 52 51 53 2 (set (reg/f:SI 0 ax [77])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 scoreP1+0 S4 A32])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 53 52 54 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [77])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 54 53 55 2 (set (reg/f:SI 0 ax [78])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(insn 55 54 56 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [78])) src/gui.c:333 64 {*movsi_internal}
     (nil))

(call_insn 56 55 57 2 (call (mem:QI (symbol_ref:SI ("Display_Message") [flags 0x3]  <function_decl 0x4081a380 Display_Message>) [0 S1 A8])
        (const_int 24 [0x18])) src/gui.c:333 618 {*call_0}
     (nil)
    (nil))

(insn 57 56 58 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -26 [0xffffffffffffffe6])) [0 pos.y+0 S2 A16])
        (const_int 85 [0x55])) src/gui.c:334 65 {*movhi_internal}
     (nil))

(insn 58 57 59 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 59 58 60 2 (set (reg:SI 0 ax [79])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S4 A32])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 60 59 61 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 0 ax [79])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 61 60 62 2 (set (reg:DI 0 ax [80])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos+0 S8 A32])) src/gui.c:335 63 {*movdi_internal}
     (nil))

(insn 62 61 63 2 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S8 A32])
        (reg:DI 0 ax [80])) src/gui.c:335 63 {*movdi_internal}
     (nil))

(insn 63 62 64 2 (set (reg/f:SI 0 ax [81])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scoreP2+0 S4 A32])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 64 63 65 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [81])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 65 64 66 2 (set (reg/f:SI 0 ax [82])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(insn 66 65 67 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [82])) src/gui.c:335 64 {*movsi_internal}
     (nil))

(call_insn 67 66 68 2 (call (mem:QI (symbol_ref:SI ("Display_Message") [flags 0x3]  <function_decl 0x4081a380 Display_Message>) [0 S1 A8])
        (const_int 24 [0x18])) src/gui.c:335 618 {*call_0}
     (nil)
    (nil))

(insn 68 67 69 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos.x+0 S2 A32])
        (const_int 108 [0x6c])) src/gui.c:336 65 {*movhi_internal}
     (nil))

(insn 69 68 70 2 (set (reg/f:SI 0 ax [83])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 70 69 71 2 (set (reg/f:SI 2 cx [orig:64 D.6383 ] [64])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [83])
                (const_int 4 [0x4])) [0 game_8(D)->player2_name+0 S4 A32])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 71 70 72 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 72 71 73 2 (set (reg:SI 0 ax [84])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 c+0 S4 A32])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 73 72 74 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 0 ax [84])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 74 73 75 2 (set (reg:DI 0 ax [85])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pos+0 S8 A32])) src/gui.c:337 63 {*movdi_internal}
     (nil))

(insn 75 74 76 2 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S8 A32])
        (reg:DI 0 ax [85])) src/gui.c:337 63 {*movdi_internal}
     (nil))

(insn 76 75 77 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:64 D.6383 ] [64])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 77 76 78 2 (set (reg/f:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(insn 78 77 79 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [86])) src/gui.c:337 64 {*movsi_internal}
     (nil))

(call_insn 79 78 80 2 (call (mem:QI (symbol_ref:SI ("Display_Message") [flags 0x3]  <function_decl 0x4081a380 Display_Message>) [0 S1 A8])
        (const_int 24 [0x18])) src/gui.c:337 618 {*call_0}
     (nil)
    (nil))

(insn 80 79 81 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 scoreP1+0 S4 A32])) src/gui.c:339 64 {*movsi_internal}
     (nil))

(insn 81 80 82 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [87])) src/gui.c:339 64 {*movsi_internal}
     (nil))

(call_insn 82 81 83 2 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:339 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 83 82 84 2 (set (reg/f:SI 0 ax [88])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 scoreP2+0 S4 A32])) src/gui.c:340 64 {*movsi_internal}
     (nil))

(insn 84 83 85 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [88])) src/gui.c:340 64 {*movsi_internal}
     (nil))

(call_insn 85 84 88 2 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:340 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 88 85 0 NOTE_INSN_DELETED)


;; Function Display_Die (Display_Die)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r132,l0) best GENERAL_REGS, cover GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r128,l0) best GENERAL_REGS, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a69 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a74 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a73 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a3(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a5(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a6(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a7(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a10(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a13(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a15(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a16(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a17(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r128,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a26(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a31(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a32(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a33(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a40(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a41(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a44(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a45(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a46(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a47(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a48(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a49(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a53(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a54(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a55(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a56(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a57(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a58(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a59(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a60(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a61(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a62(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a63(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a64(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a65(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a66(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a67(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a68(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a69(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a70(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a71(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a72(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a73(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a74(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a75(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a76(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a77(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a78(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 125(l0): point = 1
   Insn 124(l0): point = 3
   Insn 123(l0): point = 5
   Insn 122(l0): point = 7
   Insn 121(l0): point = 9
   Insn 120(l0): point = 11
   Insn 119(l0): point = 13
   Insn 118(l0): point = 15
   Insn 117(l0): point = 17
   Insn 116(l0): point = 19
   Insn 115(l0): point = 21
   Insn 114(l0): point = 23
   Insn 113(l0): point = 25
   Insn 112(l0): point = 27
   Insn 111(l0): point = 29
   Insn 110(l0): point = 31
   Insn 109(l0): point = 33
   Insn 108(l0): point = 35
   Insn 107(l0): point = 37
   Insn 106(l0): point = 39
   Insn 105(l0): point = 41
   Insn 104(l0): point = 43
   Insn 103(l0): point = 45
   Insn 102(l0): point = 47
   Insn 101(l0): point = 49
   Insn 100(l0): point = 51
   Insn 99(l0): point = 53
   Insn 98(l0): point = 55
   Insn 97(l0): point = 57
   Insn 96(l0): point = 59
   Insn 130(l0): point = 62
   Insn 91(l0): point = 64
   Insn 90(l0): point = 66
   Insn 89(l0): point = 68
   Insn 88(l0): point = 70
   Insn 87(l0): point = 72
   Insn 86(l0): point = 74
   Insn 85(l0): point = 76
   Insn 84(l0): point = 78
   Insn 83(l0): point = 80
   Insn 82(l0): point = 82
   Insn 81(l0): point = 84
   Insn 80(l0): point = 86
   Insn 79(l0): point = 88
   Insn 78(l0): point = 90
   Insn 77(l0): point = 92
   Insn 76(l0): point = 94
   Insn 75(l0): point = 96
   Insn 74(l0): point = 98
   Insn 73(l0): point = 100
   Insn 72(l0): point = 102
   Insn 71(l0): point = 104
   Insn 70(l0): point = 106
   Insn 69(l0): point = 108
   Insn 68(l0): point = 110
   Insn 67(l0): point = 112
   Insn 66(l0): point = 114
   Insn 65(l0): point = 116
   Insn 64(l0): point = 118
   Insn 63(l0): point = 120
   Insn 62(l0): point = 122
   Insn 61(l0): point = 124
   Insn 60(l0): point = 126
   Insn 59(l0): point = 128
   Insn 58(l0): point = 130
   Insn 57(l0): point = 132
   Insn 56(l0): point = 134
   Insn 55(l0): point = 136
   Insn 54(l0): point = 138
   Insn 53(l0): point = 140
   Insn 52(l0): point = 142
   Insn 51(l0): point = 144
   Insn 50(l0): point = 146
   Insn 49(l0): point = 148
   Insn 48(l0): point = 150
   Insn 47(l0): point = 152
   Insn 46(l0): point = 154
   Insn 45(l0): point = 156
   Insn 44(l0): point = 158
   Insn 43(l0): point = 160
   Insn 42(l0): point = 162
   Insn 41(l0): point = 164
   Insn 40(l0): point = 166
   Insn 39(l0): point = 168
   Insn 38(l0): point = 170
   Insn 37(l0): point = 172
   Insn 36(l0): point = 174
   Insn 35(l0): point = 176
   Insn 34(l0): point = 178
   Insn 33(l0): point = 180
   Insn 32(l0): point = 182
   Insn 31(l0): point = 184
   Insn 30(l0): point = 186
   Insn 29(l0): point = 188
   Insn 28(l0): point = 190
   Insn 27(l0): point = 192
   Insn 26(l0): point = 194
   Insn 25(l0): point = 196
   Insn 24(l0): point = 198
   Insn 23(l0): point = 200
   Insn 22(l0): point = 202
   Insn 21(l0): point = 204
   Insn 20(l0): point = 206
   Insn 19(l0): point = 208
   Insn 18(l0): point = 210
   Insn 17(l0): point = 212
   Insn 16(l0): point = 214
   Insn 15(l0): point = 216
   Insn 14(l0): point = 218
   Insn 13(l0): point = 220
   Insn 12(l0): point = 222
   Insn 10(l0): point = 225
   Insn 9(l0): point = 227
   Insn 8(l0): point = 229
   Insn 7(l0): point = 231
   Insn 6(l0): point = 233
   Insn 5(l0): point = 235
 a0(r100): [4..11]
 a1(r97): [8..23]
 a2(r96): [10..27]
 a3(r136): [12..15]
 a4(r137): [12..13]
 a5(r99): [14..17]
 a6(r98): [18..19]
 a7(r135): [20..21]
 a8(r134): [24..25]
 a9(r133): [28..29]
 a10(r95): [34..41]
 a11(r92): [38..53]
 a12(r91): [40..57]
 a13(r131): [42..45]
 a14(r132): [42..43]
 a15(r94): [44..47]
 a16(r93): [48..49]
 a17(r130): [50..51]
 a18(r129): [54..55]
 a19(r128): [58..59]
 a20(r90): [67..76]
 a21(r87): [71..88]
 a22(r127): [73..74]
 a23(r125): [77..80]
 a24(r126): [77..78]
 a25(r89): [79..82]
 a26(r88): [83..84]
 a27(r124): [85..86]
 a28(r123): [89..90]
 a29(r86): [93..94]
 a30(r85): [95..96]
 a31(r84): [97..98]
 a32(r83): [99..100]
 a33(r122): [101..102]
 a34(r82): [107..116]
 a35(r79): [111..128]
 a36(r121): [113..114]
 a37(r119): [117..120]
 a38(r120): [117..118]
 a39(r81): [119..122]
 a40(r80): [123..124]
 a41(r118): [125..126]
 a42(r117): [129..130]
 a43(r78): [133..134]
 a44(r77): [135..136]
 a45(r76): [137..138]
 a46(r75): [139..140]
 a47(r116): [141..142]
 a48(r74): [147..156]
 a49(r71): [151..168]
 a50(r115): [153..154]
 a51(r113): [157..160]
 a52(r114): [157..158]
 a53(r73): [159..162]
 a54(r72): [163..164]
 a55(r112): [165..166]
 a56(r111): [169..170]
 a57(r70): [173..174]
 a58(r110): [175..176]
 a59(r69): [181..190]
 a60(r66): [185..202]
 a61(r109): [187..188]
 a62(r107): [191..194]
 a63(r108): [191..192]
 a64(r68): [193..196]
 a65(r67): [197..198]
 a66(r106): [199..200]
 a67(r105): [203..204]
 a68(r65): [207..208]
 a69(r104): [209..210]
 a70(r64): [213..214]
 a71(r63): [215..216]
 a72(r62): [217..218]
 a73(r61): [219..220]
 a74(r103): [221..222]
 a75(r60): [228..229]
 a76(r59): [228..233]
 a77(r102): [230..231]
 a78(r101): [234..235]
Compressing live ranges: from 238 to 120 - 50%
Ranges after the compression:
 a0(r100): [0..1]
 a1(r97): [0..9]
 a2(r96): [0..11]
 a3(r136): [2..5]
 a4(r137): [2..3]
 a5(r99): [4..5]
 a6(r98): [6..7]
 a7(r135): [8..9]
 a8(r134): [10..11]
 a9(r133): [12..13]
 a10(r95): [14..15]
 a11(r92): [14..23]
 a12(r91): [14..25]
 a13(r131): [16..19]
 a14(r132): [16..17]
 a15(r94): [18..19]
 a16(r93): [20..21]
 a17(r130): [22..23]
 a18(r129): [24..25]
 a19(r128): [26..27]
 a20(r90): [28..29]
 a21(r87): [28..37]
 a22(r127): [28..29]
 a23(r125): [30..33]
 a24(r126): [30..31]
 a25(r89): [32..33]
 a26(r88): [34..35]
 a27(r124): [36..37]
 a28(r123): [38..39]
 a29(r86): [40..41]
 a30(r85): [42..43]
 a31(r84): [44..45]
 a32(r83): [46..47]
 a33(r122): [48..49]
 a34(r82): [50..51]
 a35(r79): [50..59]
 a36(r121): [50..51]
 a37(r119): [52..55]
 a38(r120): [52..53]
 a39(r81): [54..55]
 a40(r80): [56..57]
 a41(r118): [58..59]
 a42(r117): [60..61]
 a43(r78): [62..63]
 a44(r77): [64..65]
 a45(r76): [66..67]
 a46(r75): [68..69]
 a47(r116): [70..71]
 a48(r74): [72..73]
 a49(r71): [72..81]
 a50(r115): [72..73]
 a51(r113): [74..77]
 a52(r114): [74..75]
 a53(r73): [76..77]
 a54(r72): [78..79]
 a55(r112): [80..81]
 a56(r111): [82..83]
 a57(r70): [84..85]
 a58(r110): [86..87]
 a59(r69): [88..89]
 a60(r66): [88..97]
 a61(r109): [88..89]
 a62(r107): [90..93]
 a63(r108): [90..91]
 a64(r68): [92..93]
 a65(r67): [94..95]
 a66(r106): [96..97]
 a67(r105): [98..99]
 a68(r65): [100..101]
 a69(r104): [102..103]
 a70(r64): [104..105]
 a71(r63): [106..107]
 a72(r62): [108..109]
 a73(r61): [110..111]
 a74(r103): [112..113]
 a75(r60): [114..115]
 a76(r59): [114..117]
 a77(r102): [116..117]
 a78(r101): [118..119]
  regions=1, blocks=6, points=120
    allocnos=79 (big 0), copies=0, conflicts=0, ranges=79
Disposition:
   76:r59  l0     1   75:r60  l0     0   73:r61  l0     0   72:r62  l0     0
   71:r63  l0     0   70:r64  l0     0   68:r65  l0     0   60:r66  l0     1
   65:r67  l0     0   64:r68  l0     2   59:r69  l0     0   57:r70  l0     0
   49:r71  l0     1   54:r72  l0     0   53:r73  l0     2   48:r74  l0     0
   46:r75  l0     0   45:r76  l0     0   44:r77  l0     0   43:r78  l0     0
   35:r79  l0     1   40:r80  l0     0   39:r81  l0     2   34:r82  l0     0
   32:r83  l0     0   31:r84  l0     0   30:r85  l0     0   29:r86  l0     0
   21:r87  l0     1   26:r88  l0     0   25:r89  l0     2   20:r90  l0     0
   12:r91  l0     2   11:r92  l0     1   16:r93  l0     0   15:r94  l0     3
   10:r95  l0     0    2:r96  l0     2    1:r97  l0     1    6:r98  l0     0
    5:r99  l0     3    0:r100 l0     0   78:r101 l0     0   77:r102 l0     0
   74:r103 l0     0   69:r104 l0     0   67:r105 l0     0   66:r106 l0     0
   62:r107 l0     0   63:r108 l0     2   61:r109 l0     2   58:r110 l0     0
   56:r111 l0     0   55:r112 l0     0   51:r113 l0     0   52:r114 l0     2
   50:r115 l0     2   47:r116 l0     0   42:r117 l0     0   41:r118 l0     0
   37:r119 l0     0   38:r120 l0     2   36:r121 l0     2   33:r122 l0     0
   28:r123 l0     0   27:r124 l0     0   23:r125 l0     0   24:r126 l0     2
   22:r127 l0     2   19:r128 l0     0   18:r129 l0     0   17:r130 l0     0
   13:r131 l0     0   14:r132 l0     3    9:r133 l0     0    8:r134 l0     0
    7:r135 l0     0    3:r136 l0     0    4:r137 l0     3
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 101
insn=6, live_throughout: 7, dead_or_set: 59, 101
insn=7, live_throughout: 7, 59, dead_or_set: 102
insn=8, live_throughout: 7, 59, dead_or_set: 60, 102
insn=9, live_throughout: 7, dead_or_set: 59, 60
insn=10, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 103
insn=13, live_throughout: 7, dead_or_set: 61, 103
insn=14, live_throughout: 7, dead_or_set: 61, 62
insn=15, live_throughout: 7, dead_or_set: 62, 63
insn=16, live_throughout: 7, dead_or_set: 63, 64
insn=17, live_throughout: 7, dead_or_set: 64
insn=18, live_throughout: 7, dead_or_set: 104
insn=19, live_throughout: 7, dead_or_set: 65, 104
insn=20, live_throughout: 7, dead_or_set: 65
insn=21, live_throughout: 7, dead_or_set: 105
insn=22, live_throughout: 7, dead_or_set: 66, 105
insn=23, live_throughout: 7, 66, dead_or_set: 106
insn=24, live_throughout: 7, 66, dead_or_set: 67, 106
insn=25, live_throughout: 7, 66, dead_or_set: 67, 68
insn=26, live_throughout: 7, 66, 68, dead_or_set: 107
insn=27, live_throughout: 7, 66, 107, dead_or_set: 68, 108
insn=28, live_throughout: 7, 66, dead_or_set: 69, 107, 108
insn=29, live_throughout: 7, 66, 69, dead_or_set: 109
insn=30, live_throughout: 7, 66, 69, dead_or_set: 109
insn=31, live_throughout: 7, 69, dead_or_set: 66
insn=32, live_throughout: 7, 69, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 69
insn=34, live_throughout: 7, dead_or_set: 0
insn=35, live_throughout: 7, dead_or_set: 110
insn=36, live_throughout: 7, dead_or_set: 70, 110
insn=37, live_throughout: 7, dead_or_set: 70
insn=38, live_throughout: 7, dead_or_set: 111
insn=39, live_throughout: 7, dead_or_set: 71, 111
insn=40, live_throughout: 7, 71, dead_or_set: 112
insn=41, live_throughout: 7, 71, dead_or_set: 72, 112
insn=42, live_throughout: 7, 71, dead_or_set: 72, 73
insn=43, live_throughout: 7, 71, 73, dead_or_set: 113
insn=44, live_throughout: 7, 71, 113, dead_or_set: 73, 114
insn=45, live_throughout: 7, 71, dead_or_set: 74, 113, 114
insn=46, live_throughout: 7, 71, 74, dead_or_set: 115
insn=47, live_throughout: 7, 71, 74, dead_or_set: 115
insn=48, live_throughout: 7, 74, dead_or_set: 71
insn=49, live_throughout: 7, 74, dead_or_set: 
insn=50, live_throughout: 7, dead_or_set: 74
insn=51, live_throughout: 7, dead_or_set: 0
insn=52, live_throughout: 7, dead_or_set: 116
insn=53, live_throughout: 7, dead_or_set: 75, 116
insn=54, live_throughout: 7, dead_or_set: 75, 76
insn=55, live_throughout: 7, dead_or_set: 76, 77
insn=56, live_throughout: 7, dead_or_set: 77, 78
insn=57, live_throughout: 7, dead_or_set: 78
insn=58, live_throughout: 7, dead_or_set: 117
insn=59, live_throughout: 7, dead_or_set: 79, 117
insn=60, live_throughout: 7, 79, dead_or_set: 118
insn=61, live_throughout: 7, 79, dead_or_set: 80, 118
insn=62, live_throughout: 7, 79, dead_or_set: 80, 81
insn=63, live_throughout: 7, 79, 81, dead_or_set: 119
insn=64, live_throughout: 7, 79, 119, dead_or_set: 81, 120
insn=65, live_throughout: 7, 79, dead_or_set: 82, 119, 120
insn=66, live_throughout: 7, 79, 82, dead_or_set: 121
insn=67, live_throughout: 7, 79, 82, dead_or_set: 121
insn=68, live_throughout: 7, 82, dead_or_set: 79
insn=69, live_throughout: 7, 82, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 82
insn=71, live_throughout: 7, dead_or_set: 0
insn=72, live_throughout: 7, dead_or_set: 122
insn=73, live_throughout: 7, dead_or_set: 83, 122
insn=74, live_throughout: 7, dead_or_set: 83, 84
insn=75, live_throughout: 7, dead_or_set: 84, 85
insn=76, live_throughout: 7, dead_or_set: 85, 86
insn=77, live_throughout: 7, dead_or_set: 86
insn=78, live_throughout: 7, dead_or_set: 123
insn=79, live_throughout: 7, dead_or_set: 87, 123
insn=80, live_throughout: 7, 87, dead_or_set: 124
insn=81, live_throughout: 7, 87, dead_or_set: 88, 124
insn=82, live_throughout: 7, 87, dead_or_set: 88, 89
insn=83, live_throughout: 7, 87, 89, dead_or_set: 125
insn=84, live_throughout: 7, 87, 125, dead_or_set: 89, 126
insn=85, live_throughout: 7, 87, dead_or_set: 90, 125, 126
insn=86, live_throughout: 7, 87, 90, dead_or_set: 127
insn=87, live_throughout: 7, 87, 90, dead_or_set: 127
insn=88, live_throughout: 7, 90, dead_or_set: 87
insn=89, live_throughout: 7, 90, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 90
insn=91, live_throughout: 7, dead_or_set: 0
insn=130, live_throughout: 7, dead_or_set: 
insn=94, live_throughout: 7, dead_or_set: 
insn=96, live_throughout: 7, dead_or_set: 128
insn=97, live_throughout: 7, dead_or_set: 91, 128
insn=98, live_throughout: 7, 91, dead_or_set: 129
insn=99, live_throughout: 7, 91, dead_or_set: 92, 129
insn=100, live_throughout: 7, 91, 92, dead_or_set: 130
insn=101, live_throughout: 7, 91, 92, dead_or_set: 93, 130
insn=102, live_throughout: 7, 91, 92, dead_or_set: 93, 94
insn=103, live_throughout: 7, 91, 92, 94, dead_or_set: 131
insn=104, live_throughout: 7, 91, 92, 131, dead_or_set: 94, 132
insn=105, live_throughout: 7, 91, 92, dead_or_set: 95, 131, 132
insn=106, live_throughout: 7, 92, 95, dead_or_set: 91
insn=107, live_throughout: 7, 95, dead_or_set: 92
insn=108, live_throughout: 7, 95, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 95
insn=110, live_throughout: 7, dead_or_set: 0
insn=111, live_throughout: 7, dead_or_set: 133
insn=112, live_throughout: 7, dead_or_set: 96, 133
insn=113, live_throughout: 7, 96, dead_or_set: 134
insn=114, live_throughout: 7, 96, dead_or_set: 97, 134
insn=115, live_throughout: 7, 96, 97, dead_or_set: 135
insn=116, live_throughout: 7, 96, 97, dead_or_set: 98, 135
insn=117, live_throughout: 7, 96, 97, dead_or_set: 98, 99
insn=118, live_throughout: 7, 96, 97, 99, dead_or_set: 136
insn=119, live_throughout: 7, 96, 97, 136, dead_or_set: 99, 137
insn=120, live_throughout: 7, 96, 97, dead_or_set: 100, 136, 137
insn=121, live_throughout: 7, 97, 100, dead_or_set: 96
insn=122, live_throughout: 7, 100, dead_or_set: 97
insn=123, live_throughout: 7, 100, dead_or_set: 
insn=124, live_throughout: 7, dead_or_set: 100
insn=125, live_throughout: 7, dead_or_set: 0
insn=128, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 31
changing reg in insn 24
changing reg in insn 25
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 33
changing reg in insn 36
changing reg in insn 37
changing reg in insn 39
changing reg in insn 48
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 50
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 59
changing reg in insn 68
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 70
changing reg in insn 73
changing reg in insn 74
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 77
changing reg in insn 79
changing reg in insn 88
changing reg in insn 81
changing reg in insn 82
changing reg in insn 82
changing reg in insn 84
changing reg in insn 85
changing reg in insn 90
changing reg in insn 97
changing reg in insn 106
changing reg in insn 99
changing reg in insn 107
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 104
changing reg in insn 105
changing reg in insn 109
changing reg in insn 112
changing reg in insn 121
changing reg in insn 114
changing reg in insn 122
changing reg in insn 116
changing reg in insn 117
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 124
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 12
changing reg in insn 13
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 35
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 43
changing reg in insn 45
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 47
changing reg in insn 52
changing reg in insn 53
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 72
changing reg in insn 73
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 83
changing reg in insn 85
changing reg in insn 84
changing reg in insn 85
changing reg in insn 86
changing reg in insn 87
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 105
changing reg in insn 104
changing reg in insn 105
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 116
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 120
deleting insn with uid = 14.
deleting insn with uid = 16.
deleting insn with uid = 54.
deleting insn with uid = 56.
deleting insn with uid = 74.
deleting insn with uid = 76.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 71.
verify found no changes in insn with uid = 91.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 125.


Display_Die

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={55d,48u} r1={14d,7u} r2={21d,14u} r3={4d,4u} r6={1d,41u} r7={1d,35u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={2e} r17={28d,1u} r18={6d} r19={6d} r20={1d,1u,4e} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} 
;;    total ref usage 534{377d,151u,6e} in 111{105 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 101 102

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [101])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:348 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 1 dx [orig:59 D.6333 ] [59])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [101])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:348 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (set (reg/f:SI 0 ax [102])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:348 64 {*movsi_internal}
     (nil))

(insn 8 7 9 2 (set (reg:SI 0 ax [orig:60 D.6334 ] [60])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 228 [0xe4])) [0 game_1(D)->die2+0 S4 A32])) src/gui.c:348 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:59 D.6333 ] [59])
            (reg:SI 0 ax [orig:60 D.6334 ] [60]))) src/gui.c:348 6 {*cmpsi_1}
     (nil))

(jump_insn 10 9 11 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 94)
            (pc))) src/gui.c:348 591 {*jcc_1}
     (nil)
 -> 94)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127

;; Pred edge  2 (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 (set (reg/f:SI 0 ax [103])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:350 64 {*movsi_internal}
     (nil))

(insn 13 12 15 3 (set (reg:HI 0 ax [orig:61 D.6337 ] [61])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 88 [0x58])) [0 display_4(D)->die1_position.x+0 S2 A32])) src/gui.c:350 65 {*movhi_internal}
     (nil))

(insn 15 13 17 3 (parallel [
            (set (reg:HI 0 ax [orig:63 D.6339 ] [63])
                (plus:HI (reg:HI 0 ax [orig:62 D.6338 ] [62])
                    (const_int -40 [0xffffffffffffffd8])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:350 256 {*addhi_1_lea}
     (nil))

(insn 17 15 18 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:64 D.6340 ] [64])) src/gui.c:350 65 {*movhi_internal}
     (nil))

(insn 18 17 19 3 (set (reg/f:SI 0 ax [104])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:351 64 {*movsi_internal}
     (nil))

(insn 19 18 20 3 (set (reg:HI 0 ax [orig:65 D.6341 ] [65])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [104])
                (const_int 90 [0x5a])) [0 display_4(D)->die1_position.y+0 S2 A16])) src/gui.c:351 65 {*movhi_internal}
     (nil))

(insn 20 19 21 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 new_pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:65 D.6341 ] [65])) src/gui.c:351 65 {*movhi_internal}
     (nil))

(insn 21 20 22 3 (set (reg/f:SI 0 ax [105])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 22 21 23 3 (set (reg/f:SI 1 dx [orig:66 D.6342 ] [66])
        (mem/s/f/j:SI (reg/f:SI 0 ax [105]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (reg/f:SI 0 ax [106])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 24 23 25 3 (set (reg:SI 0 ax [orig:67 D.6343 ] [67])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 25 24 26 3 (parallel [
            (set (reg:SI 2 cx [orig:68 D.6344 ] [68])
                (plus:SI (reg:SI 0 ax [orig:67 D.6343 ] [67])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:352 252 {*addsi_1}
     (nil))

(insn 26 25 27 3 (set (reg/f:SI 0 ax [107])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 27 26 28 3 (parallel [
            (set (reg:SI 2 cx [108])
                (plus:SI (reg:SI 2 cx [orig:68 D.6344 ] [68])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:352 252 {*addsi_1}
     (nil))

(insn 28 27 29 3 (set (reg/f:SI 0 ax [orig:69 D.6345 ] [69])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [108])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [107])) [0 display_4(D)->die S4 A32])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 29 28 30 3 (parallel [
            (set (reg:SI 2 cx [109])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:352 252 {*addsi_1}
     (nil))

(insn 30 29 31 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [109])) src/gui.c:352 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 31 30 32 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:66 D.6342 ] [66])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 32 31 33 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(insn 33 32 34 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:69 D.6345 ] [69])) src/gui.c:352 64 {*movsi_internal}
     (nil))

(call_insn 34 33 35 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:352 927 {*call_value_0}
     (nil)
    (nil))

(insn 35 34 36 3 (set (reg/f:SI 0 ax [110])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:353 64 {*movsi_internal}
     (nil))

(insn 36 35 37 3 (set (reg:HI 0 ax [orig:70 D.6346 ] [70])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [110])
                (const_int 88 [0x58])) [0 display_4(D)->die1_position.x+0 S2 A32])) src/gui.c:353 65 {*movhi_internal}
     (nil))

(insn 37 36 38 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:70 D.6346 ] [70])) src/gui.c:353 65 {*movhi_internal}
     (nil))

(insn 38 37 39 3 (set (reg/f:SI 0 ax [111])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 39 38 40 3 (set (reg/f:SI 1 dx [orig:71 D.6347 ] [71])
        (mem/s/f/j:SI (reg/f:SI 0 ax [111]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 40 39 41 3 (set (reg/f:SI 0 ax [112])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 41 40 42 3 (set (reg:SI 0 ax [orig:72 D.6348 ] [72])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [112])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 42 41 43 3 (parallel [
            (set (reg:SI 2 cx [orig:73 D.6349 ] [73])
                (plus:SI (reg:SI 0 ax [orig:72 D.6348 ] [72])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:354 252 {*addsi_1}
     (nil))

(insn 43 42 44 3 (set (reg/f:SI 0 ax [113])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 44 43 45 3 (parallel [
            (set (reg:SI 2 cx [114])
                (plus:SI (reg:SI 2 cx [orig:73 D.6349 ] [73])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:354 252 {*addsi_1}
     (nil))

(insn 45 44 46 3 (set (reg/f:SI 0 ax [orig:74 D.6350 ] [74])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [114])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [113])) [0 display_4(D)->die S4 A32])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 46 45 47 3 (parallel [
            (set (reg:SI 2 cx [115])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:354 252 {*addsi_1}
     (nil))

(insn 47 46 48 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [115])) src/gui.c:354 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 48 47 49 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:71 D.6347 ] [71])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 49 48 50 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(insn 50 49 51 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:74 D.6350 ] [74])) src/gui.c:354 64 {*movsi_internal}
     (nil))

(call_insn 51 50 52 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:354 927 {*call_value_0}
     (nil)
    (nil))

(insn 52 51 53 3 (set (reg/f:SI 0 ax [116])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:355 64 {*movsi_internal}
     (nil))

(insn 53 52 55 3 (set (reg:HI 0 ax [orig:75 D.6351 ] [75])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [116])
                (const_int 88 [0x58])) [0 display_4(D)->die1_position.x+0 S2 A32])) src/gui.c:355 65 {*movhi_internal}
     (nil))

(insn 55 53 57 3 (parallel [
            (set (reg:HI 0 ax [orig:77 D.6353 ] [77])
                (plus:HI (reg:HI 0 ax [orig:76 D.6352 ] [76])
                    (const_int 40 [0x28])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:355 256 {*addhi_1_lea}
     (nil))

(insn 57 55 58 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:78 D.6354 ] [78])) src/gui.c:355 65 {*movhi_internal}
     (nil))

(insn 58 57 59 3 (set (reg/f:SI 0 ax [117])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 59 58 60 3 (set (reg/f:SI 1 dx [orig:79 D.6355 ] [79])
        (mem/s/f/j:SI (reg/f:SI 0 ax [117]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 60 59 61 3 (set (reg/f:SI 0 ax [118])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 61 60 62 3 (set (reg:SI 0 ax [orig:80 D.6356 ] [80])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [118])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 62 61 63 3 (parallel [
            (set (reg:SI 2 cx [orig:81 D.6357 ] [81])
                (plus:SI (reg:SI 0 ax [orig:80 D.6356 ] [80])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:356 252 {*addsi_1}
     (nil))

(insn 63 62 64 3 (set (reg/f:SI 0 ax [119])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 64 63 65 3 (parallel [
            (set (reg:SI 2 cx [120])
                (plus:SI (reg:SI 2 cx [orig:81 D.6357 ] [81])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:356 252 {*addsi_1}
     (nil))

(insn 65 64 66 3 (set (reg/f:SI 0 ax [orig:82 D.6358 ] [82])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [120])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [119])) [0 display_4(D)->die S4 A32])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 66 65 67 3 (parallel [
            (set (reg:SI 2 cx [121])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:356 252 {*addsi_1}
     (nil))

(insn 67 66 68 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [121])) src/gui.c:356 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 68 67 69 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:79 D.6355 ] [79])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 69 68 70 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(insn 70 69 71 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:82 D.6358 ] [82])) src/gui.c:356 64 {*movsi_internal}
     (nil))

(call_insn 71 70 72 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:356 927 {*call_value_0}
     (nil)
    (nil))

(insn 72 71 73 3 (set (reg/f:SI 0 ax [122])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:357 64 {*movsi_internal}
     (nil))

(insn 73 72 75 3 (set (reg:HI 0 ax [orig:83 D.6359 ] [83])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [122])
                (const_int 88 [0x58])) [0 display_4(D)->die1_position.x+0 S2 A32])) src/gui.c:357 65 {*movhi_internal}
     (nil))

(insn 75 73 77 3 (parallel [
            (set (reg:HI 0 ax [orig:85 D.6361 ] [85])
                (plus:HI (reg:HI 0 ax [orig:84 D.6360 ] [84])
                    (const_int 80 [0x50])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:357 256 {*addhi_1_lea}
     (nil))

(insn 77 75 78 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:86 D.6362 ] [86])) src/gui.c:357 65 {*movhi_internal}
     (nil))

(insn 78 77 79 3 (set (reg/f:SI 0 ax [123])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 79 78 80 3 (set (reg/f:SI 1 dx [orig:87 D.6363 ] [87])
        (mem/s/f/j:SI (reg/f:SI 0 ax [123]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 80 79 81 3 (set (reg/f:SI 0 ax [124])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 81 80 82 3 (set (reg:SI 0 ax [orig:88 D.6364 ] [88])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [124])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 82 81 83 3 (parallel [
            (set (reg:SI 2 cx [orig:89 D.6365 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 D.6364 ] [88])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:358 252 {*addsi_1}
     (nil))

(insn 83 82 84 3 (set (reg/f:SI 0 ax [125])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 84 83 85 3 (parallel [
            (set (reg:SI 2 cx [126])
                (plus:SI (reg:SI 2 cx [orig:89 D.6365 ] [89])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:358 252 {*addsi_1}
     (nil))

(insn 85 84 86 3 (set (reg/f:SI 0 ax [orig:90 D.6366 ] [90])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 2 cx [126])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [125])) [0 display_4(D)->die S4 A32])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 86 85 87 3 (parallel [
            (set (reg:SI 2 cx [127])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:358 252 {*addsi_1}
     (nil))

(insn 87 86 88 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [127])) src/gui.c:358 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 88 87 89 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:87 D.6363 ] [87])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 89 88 90 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(insn 90 89 91 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:90 D.6366 ] [90])) src/gui.c:358 64 {*movsi_internal}
     (nil))

(call_insn 91 90 130 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:358 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 130 91 131 3 (set (pc)
        (label_ref 128)) 606 {jump}
     (nil)
 -> 128)
;; End of basic block 3 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 [100.0%] 

(barrier 131 130 94)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 91 92 93 94 95 96 97 98 99 100 128 129 130 131 132 133 134 135 136 137

;; Pred edge  2
(code_label 94 131 95 4 34 "" [1 uses])

(note 95 94 96 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 96 95 97 4 (set (reg/f:SI 0 ax [128])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 97 96 98 4 (parallel [
            (set (reg/f:SI 2 cx [orig:91 D.6368 ] [91])
                (plus:SI (reg/f:SI 0 ax [128])
                    (const_int 88 [0x58])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:362 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c/i:SI (reg/f:SI 16 argp) [0 display+0 S4 A32])
            (const_int 88 [0x58]))
        (nil)))

(insn 98 97 99 4 (set (reg/f:SI 0 ax [129])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 99 98 100 4 (set (reg/f:SI 1 dx [orig:92 D.6369 ] [92])
        (mem/s/f/j:SI (reg/f:SI 0 ax [129]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 100 99 101 4 (set (reg/f:SI 0 ax [130])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 101 100 102 4 (set (reg:SI 0 ax [orig:93 D.6370 ] [93])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [130])
                (const_int 224 [0xe0])) [0 game_1(D)->die1+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 102 101 103 4 (parallel [
            (set (reg:SI 3 bx [orig:94 D.6371 ] [94])
                (plus:SI (reg:SI 0 ax [orig:93 D.6370 ] [93])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:362 252 {*addsi_1}
     (nil))

(insn 103 102 104 4 (set (reg/f:SI 0 ax [131])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 104 103 105 4 (parallel [
            (set (reg:SI 3 bx [132])
                (plus:SI (reg:SI 3 bx [orig:94 D.6371 ] [94])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:362 252 {*addsi_1}
     (nil))

(insn 105 104 106 4 (set (reg/f:SI 0 ax [orig:95 D.6372 ] [95])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 3 bx [132])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [131])) [0 display_4(D)->die S4 A32])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 106 105 107 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:91 D.6368 ] [91])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 107 106 108 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:92 D.6369 ] [92])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 108 107 109 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(insn 109 108 110 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:95 D.6372 ] [95])) src/gui.c:362 64 {*movsi_internal}
     (nil))

(call_insn 110 109 111 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:362 927 {*call_value_0}
     (nil)
    (nil))

(insn 111 110 112 4 (set (reg/f:SI 0 ax [133])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 112 111 113 4 (parallel [
            (set (reg/f:SI 2 cx [orig:96 D.6373 ] [96])
                (plus:SI (reg/f:SI 0 ax [133])
                    (const_int 96 [0x60])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:363 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c/i:SI (reg/f:SI 16 argp) [0 display+0 S4 A32])
            (const_int 96 [0x60]))
        (nil)))

(insn 113 112 114 4 (set (reg/f:SI 0 ax [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 114 113 115 4 (set (reg/f:SI 1 dx [orig:97 D.6374 ] [97])
        (mem/s/f/j:SI (reg/f:SI 0 ax [134]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 115 114 116 4 (set (reg/f:SI 0 ax [135])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 116 115 117 4 (set (reg:SI 0 ax [orig:98 D.6375 ] [98])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [135])
                (const_int 228 [0xe4])) [0 game_1(D)->die2+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 117 116 118 4 (parallel [
            (set (reg:SI 3 bx [orig:99 D.6376 ] [99])
                (plus:SI (reg:SI 0 ax [orig:98 D.6375 ] [98])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:363 252 {*addsi_1}
     (nil))

(insn 118 117 119 4 (set (reg/f:SI 0 ax [136])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 119 118 120 4 (parallel [
            (set (reg:SI 3 bx [137])
                (plus:SI (reg:SI 3 bx [orig:99 D.6376 ] [99])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:363 252 {*addsi_1}
     (nil))

(insn 120 119 121 4 (set (reg/f:SI 0 ax [orig:100 D.6377 ] [100])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 3 bx [137])
                    (const_int 4 [0x4]))
                (reg/f:SI 0 ax [136])) [0 display_4(D)->die S4 A32])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 121 120 122 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 2 cx [orig:96 D.6373 ] [96])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 122 121 123 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:97 D.6374 ] [97])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 123 122 124 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(insn 124 123 125 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:100 D.6377 ] [100])) src/gui.c:363 64 {*movsi_internal}
     (nil))

(call_insn 125 124 128 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:363 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  4 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 128 125 129 5 33 "" [1 uses])

(note 129 128 132 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 132 129 0 NOTE_INSN_DELETED)


;; Function Checker_Draw (Checker_Draw)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 69(l0): point = 1
   Insn 68(l0): point = 3
   Insn 67(l0): point = 5
   Insn 66(l0): point = 7
   Insn 65(l0): point = 9
   Insn 64(l0): point = 11
   Insn 63(l0): point = 13
   Insn 62(l0): point = 15
   Insn 61(l0): point = 17
   Insn 60(l0): point = 19
   Insn 78(l0): point = 22
   Insn 55(l0): point = 24
   Insn 54(l0): point = 26
   Insn 53(l0): point = 28
   Insn 52(l0): point = 30
   Insn 51(l0): point = 32
   Insn 50(l0): point = 34
   Insn 49(l0): point = 36
   Insn 48(l0): point = 38
   Insn 47(l0): point = 40
   Insn 46(l0): point = 42
   Insn 44(l0): point = 45
   Insn 43(l0): point = 47
   Insn 42(l0): point = 49
   Insn 41(l0): point = 51
   Insn 76(l0): point = 54
   Insn 36(l0): point = 56
   Insn 35(l0): point = 58
   Insn 34(l0): point = 60
   Insn 33(l0): point = 62
   Insn 32(l0): point = 64
   Insn 31(l0): point = 66
   Insn 30(l0): point = 68
   Insn 29(l0): point = 70
   Insn 28(l0): point = 72
   Insn 27(l0): point = 74
   Insn 74(l0): point = 77
   Insn 22(l0): point = 79
   Insn 21(l0): point = 81
   Insn 20(l0): point = 83
   Insn 19(l0): point = 85
   Insn 18(l0): point = 87
   Insn 17(l0): point = 89
   Insn 16(l0): point = 91
   Insn 15(l0): point = 93
   Insn 14(l0): point = 95
   Insn 13(l0): point = 97
   Insn 11(l0): point = 100
   Insn 10(l0): point = 102
   Insn 9(l0): point = 104
   Insn 8(l0): point = 106
   Insn 6(l0): point = 109
   Insn 5(l0): point = 111
 a0(r68): [4..13]
 a1(r67): [8..17]
 a2(r82): [10..11]
 a3(r81): [14..15]
 a4(r80): [18..19]
 a5(r66): [27..36]
 a6(r65): [31..40]
 a7(r79): [33..34]
 a8(r78): [37..38]
 a9(r77): [41..42]
 a10(r64): [48..49]
 a11(r76): [50..51]
 a12(r63): [59..68]
 a13(r62): [63..72]
 a14(r75): [65..66]
 a15(r74): [69..70]
 a16(r73): [73..74]
 a17(r61): [82..91]
 a18(r60): [86..95]
 a19(r72): [88..89]
 a20(r71): [92..93]
 a21(r70): [96..97]
 a22(r59): [103..104]
 a23(r69): [105..106]
Compressing live ranges: from 114 to 32 - 28%
Ranges after the compression:
 a0(r68): [0..1]
 a1(r67): [0..3]
 a2(r82): [0..1]
 a3(r81): [2..3]
 a4(r80): [4..5]
 a5(r66): [6..7]
 a6(r65): [6..9]
 a7(r79): [6..7]
 a8(r78): [8..9]
 a9(r77): [10..11]
 a10(r64): [12..13]
 a11(r76): [14..15]
 a12(r63): [16..17]
 a13(r62): [16..19]
 a14(r75): [16..17]
 a15(r74): [18..19]
 a16(r73): [20..21]
 a17(r61): [22..23]
 a18(r60): [22..25]
 a19(r72): [22..23]
 a20(r71): [24..25]
 a21(r70): [26..27]
 a22(r59): [28..29]
 a23(r69): [30..31]
  regions=1, blocks=10, points=32
    allocnos=24 (big 0), copies=0, conflicts=0, ranges=24
Disposition:
   22:r59  l0     0   18:r60  l0     1   17:r61  l0     0   13:r62  l0     1
   12:r63  l0     0   10:r64  l0     0    6:r65  l0     1    5:r66  l0     0
    1:r67  l0     1    0:r68  l0     0   23:r69  l0     0   21:r70  l0     0
   20:r71  l0     0   19:r72  l0     2   16:r73  l0     0   15:r74  l0     0
   14:r75  l0     2   11:r76  l0     0    9:r77  l0     0    8:r78  l0     0
    7:r79  l0     2    4:r80  l0     0    3:r81  l0     0    2:r82  l0     2
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 69
insn=9, live_throughout: 7, dead_or_set: 59, 69
insn=10, live_throughout: 7, dead_or_set: 59
insn=11, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 70
insn=14, live_throughout: 7, dead_or_set: 60, 70
insn=15, live_throughout: 7, 60, dead_or_set: 71
insn=16, live_throughout: 7, 60, dead_or_set: 61, 71
insn=17, live_throughout: 7, 60, 61, dead_or_set: 72
insn=18, live_throughout: 7, 60, 61, dead_or_set: 72
insn=19, live_throughout: 7, 61, dead_or_set: 60
insn=20, live_throughout: 7, 61, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 61
insn=22, live_throughout: 7, dead_or_set: 0
insn=74, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 73
insn=28, live_throughout: 7, dead_or_set: 62, 73
insn=29, live_throughout: 7, 62, dead_or_set: 74
insn=30, live_throughout: 7, 62, dead_or_set: 63, 74
insn=31, live_throughout: 7, 62, 63, dead_or_set: 75
insn=32, live_throughout: 7, 62, 63, dead_or_set: 75
insn=33, live_throughout: 7, 63, dead_or_set: 62
insn=34, live_throughout: 7, 63, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 63
insn=36, live_throughout: 7, dead_or_set: 0
insn=76, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 76
insn=42, live_throughout: 7, dead_or_set: 64, 76
insn=43, live_throughout: 7, dead_or_set: 64
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 77
insn=47, live_throughout: 7, dead_or_set: 65, 77
insn=48, live_throughout: 7, 65, dead_or_set: 78
insn=49, live_throughout: 7, 65, dead_or_set: 66, 78
insn=50, live_throughout: 7, 65, 66, dead_or_set: 79
insn=51, live_throughout: 7, 65, 66, dead_or_set: 79
insn=52, live_throughout: 7, 66, dead_or_set: 65
insn=53, live_throughout: 7, 66, dead_or_set: 
insn=54, live_throughout: 7, dead_or_set: 66
insn=55, live_throughout: 7, dead_or_set: 0
insn=78, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 80
insn=61, live_throughout: 7, dead_or_set: 67, 80
insn=62, live_throughout: 7, 67, dead_or_set: 81
insn=63, live_throughout: 7, 67, dead_or_set: 68, 81
insn=64, live_throughout: 7, 67, 68, dead_or_set: 82
insn=65, live_throughout: 7, 67, 68, dead_or_set: 82
insn=66, live_throughout: 7, 68, dead_or_set: 67
insn=67, live_throughout: 7, 68, dead_or_set: 
insn=68, live_throughout: 7, dead_or_set: 68
insn=69, live_throughout: 7, dead_or_set: 0
insn=72, live_throughout: 7, dead_or_set: 
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 19
changing reg in insn 16
changing reg in insn 21
changing reg in insn 28
changing reg in insn 33
changing reg in insn 30
changing reg in insn 35
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 52
changing reg in insn 49
changing reg in insn 54
changing reg in insn 61
changing reg in insn 66
changing reg in insn 63
changing reg in insn 68
changing reg in insn 8
changing reg in insn 9
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 18
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 41
changing reg in insn 42
changing reg in insn 46
changing reg in insn 47
changing reg in insn 48
changing reg in insn 49
changing reg in insn 50
changing reg in insn 51
changing reg in insn 60
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 69.


Checker_Draw

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={21d,16u} r1={9d,4u} r2={9d,4u} r6={1d,24u} r7={1d,29u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={4e} r17={11d,3u} r18={4d} r19={4d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 306{221d,81u,4e} in 53{49 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 20 [0x14])) [0 player+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:370 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 39)
            (pc))) src/gui.c:370 591 {*jcc_1}
     (nil)
 -> 39)
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  6

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 69

;; Pred edge  2 (fallthru)
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 (set (reg/f:SI 0 ax [69])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 game+0 S4 A32])) src/gui.c:372 64 {*movsi_internal}
     (nil))

(insn 9 8 10 3 (set (reg:SI 0 ax [orig:59 D.6316 ] [59])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [69])
                (const_int 8 [0x8])) [0 game_2(D)->player1_checker+0 S4 A32])) src/gui.c:372 64 {*movsi_internal}
     (nil))

(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 D.6316 ] [59])
            (const_int 0 [0]))) src/gui.c:372 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) src/gui.c:372 591 {*jcc_1}
     (nil)
 -> 25)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 60 61 70 71 72

;; Pred edge  3 (fallthru)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 (set (reg/f:SI 0 ax [70])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 14 13 15 4 (set (reg/f:SI 1 dx [orig:60 D.6319 ] [60])
        (mem/s/f/j:SI (reg/f:SI 0 ax [70]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 15 14 16 4 (set (reg/f:SI 0 ax [71])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 16 15 17 4 (set (reg/f:SI 0 ax [orig:61 D.6320 ] [61])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [71])
                (const_int 44 [0x2c])) [0 display_4(D)->green_checker+0 S4 A32])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 17 16 18 4 (parallel [
            (set (reg:SI 2 cx [72])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:373 252 {*addsi_1}
     (nil))

(insn 18 17 19 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [72])) src/gui.c:373 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 4 [0x4]))
        (nil)))

(insn 19 18 20 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:60 D.6319 ] [60])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 20 19 21 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(insn 21 20 22 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:61 D.6320 ] [61])) src/gui.c:373 64 {*movsi_internal}
     (nil))

(call_insn 22 21 74 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:373 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 74 22 75 4 (set (pc)
        (label_ref 72)) 606 {jump}
     (nil)
 -> 72)
;; End of basic block 4 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 75 74 25)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 62 63 73 74 75

;; Pred edge  3
(code_label 25 75 26 5 38 "" [1 uses])

(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 28 5 (set (reg/f:SI 0 ax [73])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 28 27 29 5 (set (reg/f:SI 1 dx [orig:62 D.6322 ] [62])
        (mem/s/f/j:SI (reg/f:SI 0 ax [73]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 29 28 30 5 (set (reg/f:SI 0 ax [74])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 30 29 31 5 (set (reg/f:SI 0 ax [orig:63 D.6323 ] [63])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [74])
                (const_int 48 [0x30])) [0 display_4(D)->white_checker+0 S4 A32])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 31 30 32 5 (parallel [
            (set (reg:SI 2 cx [75])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:375 252 {*addsi_1}
     (nil))

(insn 32 31 33 5 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [75])) src/gui.c:375 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 4 [0x4]))
        (nil)))

(insn 33 32 34 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:62 D.6322 ] [62])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 34 33 35 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(insn 35 34 36 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:63 D.6323 ] [63])) src/gui.c:375 64 {*movsi_internal}
     (nil))

(call_insn 36 35 76 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:375 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 76 36 77 5 (set (pc)
        (label_ref 72)) 606 {jump}
     (nil)
 -> 72)
;; End of basic block 5 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 77 76 39)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 76

;; Pred edge  2
(code_label 39 77 40 6 37 "" [1 uses])

(note 40 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 6 (set (reg/f:SI 0 ax [76])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 game+0 S4 A32])) src/gui.c:379 64 {*movsi_internal}
     (nil))

(insn 42 41 43 6 (set (reg:SI 0 ax [orig:64 D.6325 ] [64])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [76])
                (const_int 12 [0xc])) [0 game_2(D)->player2_checker+0 S4 A32])) src/gui.c:379 64 {*movsi_internal}
     (nil))

(insn 43 42 44 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 D.6325 ] [64])
            (const_int 0 [0]))) src/gui.c:379 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 44 43 45 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) src/gui.c:379 591 {*jcc_1}
     (nil)
 -> 58)
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 65 66 77 78 79

;; Pred edge  6 (fallthru)
(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 7 (set (reg/f:SI 0 ax [77])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 47 46 48 7 (set (reg/f:SI 1 dx [orig:65 D.6328 ] [65])
        (mem/s/f/j:SI (reg/f:SI 0 ax [77]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 48 47 49 7 (set (reg/f:SI 0 ax [78])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 49 48 50 7 (set (reg/f:SI 0 ax [orig:66 D.6329 ] [66])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [78])
                (const_int 44 [0x2c])) [0 display_4(D)->green_checker+0 S4 A32])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 50 49 51 7 (parallel [
            (set (reg:SI 2 cx [79])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:380 252 {*addsi_1}
     (nil))

(insn 51 50 52 7 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [79])) src/gui.c:380 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 4 [0x4]))
        (nil)))

(insn 52 51 53 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:65 D.6328 ] [65])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 53 52 54 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(insn 54 53 55 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:66 D.6329 ] [66])) src/gui.c:380 64 {*movsi_internal}
     (nil))

(call_insn 55 54 78 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:380 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 78 55 79 7 (set (pc)
        (label_ref 72)) 606 {jump}
     (nil)
 -> 72)
;; End of basic block 7 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 79 78 58)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 67 68 80 81 82

;; Pred edge  6
(code_label 58 79 59 8 40 "" [1 uses])

(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 8 (set (reg/f:SI 0 ax [80])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 61 60 62 8 (set (reg/f:SI 1 dx [orig:67 D.6331 ] [67])
        (mem/s/f/j:SI (reg/f:SI 0 ax [80]) [0 display_4(D)->screen+0 S4 A32])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 62 61 63 8 (set (reg/f:SI 0 ax [81])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 63 62 64 8 (set (reg/f:SI 0 ax [orig:68 D.6332 ] [68])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [81])
                (const_int 48 [0x30])) [0 display_4(D)->white_checker+0 S4 A32])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 64 63 65 8 (parallel [
            (set (reg:SI 2 cx [82])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:382 252 {*addsi_1}
     (nil))

(insn 65 64 66 8 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [82])) src/gui.c:382 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 16 argp)
            (const_int 4 [0x4]))
        (nil)))

(insn 66 65 67 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:67 D.6331 ] [67])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 67 66 68 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(insn 68 67 69 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6332 ] [68])) src/gui.c:382 64 {*movsi_internal}
     (nil))

(call_insn 69 68 72 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:382 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 8 5 4 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  8 (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 72 69 73 9 36 "" [3 uses])

(note 73 72 80 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 80 73 0 NOTE_INSN_DELETED)


;; Function Display_DrawOut (Display_DrawOut)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 18 count 15 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a16(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a17(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a18(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a38(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 113(l0): point = 1
   Insn 112(l0): point = 3
   Insn 110(l0): point = 5
   Insn 109(l0): point = 7
   Insn 106(l0): point = 10
   Insn 103(l0): point = 13
   Insn 102(l0): point = 15
   Insn 101(l0): point = 17
   Insn 100(l0): point = 19
   Insn 99(l0): point = 21
   Insn 98(l0): point = 23
   Insn 97(l0): point = 25
   Insn 96(l0): point = 27
   Insn 95(l0): point = 29
   Insn 94(l0): point = 31
   Insn 123(l0): point = 34
   Insn 89(l0): point = 36
   Insn 88(l0): point = 38
   Insn 87(l0): point = 40
   Insn 86(l0): point = 42
   Insn 85(l0): point = 44
   Insn 84(l0): point = 46
   Insn 83(l0): point = 48
   Insn 82(l0): point = 50
   Insn 81(l0): point = 52
   Insn 80(l0): point = 54
   Insn 78(l0): point = 57
   Insn 77(l0): point = 59
   Insn 76(l0): point = 61
   Insn 75(l0): point = 63
   Insn 74(l0): point = 65
   Insn 73(l0): point = 67
   Insn 72(l0): point = 69
   Insn 71(l0): point = 71
   Insn 70(l0): point = 73
   Insn 121(l0): point = 76
   Insn 66(l0): point = 78
   Insn 65(l0): point = 80
   Insn 64(l0): point = 82
   Insn 63(l0): point = 84
   Insn 62(l0): point = 86
   Insn 61(l0): point = 88
   Insn 60(l0): point = 90
   Insn 58(l0): point = 93
   Insn 57(l0): point = 95
   Insn 55(l0): point = 97
   Insn 54(l0): point = 99
   Insn 51(l0): point = 102
   Insn 48(l0): point = 105
   Insn 47(l0): point = 107
   Insn 46(l0): point = 109
   Insn 45(l0): point = 111
   Insn 44(l0): point = 113
   Insn 43(l0): point = 115
   Insn 42(l0): point = 117
   Insn 41(l0): point = 119
   Insn 40(l0): point = 121
   Insn 39(l0): point = 123
   Insn 119(l0): point = 126
   Insn 34(l0): point = 128
   Insn 33(l0): point = 130
   Insn 32(l0): point = 132
   Insn 31(l0): point = 134
   Insn 30(l0): point = 136
   Insn 29(l0): point = 138
   Insn 28(l0): point = 140
   Insn 27(l0): point = 142
   Insn 26(l0): point = 144
   Insn 25(l0): point = 146
   Insn 23(l0): point = 149
   Insn 22(l0): point = 151
   Insn 21(l0): point = 153
   Insn 20(l0): point = 155
   Insn 19(l0): point = 157
   Insn 18(l0): point = 159
   Insn 17(l0): point = 161
   Insn 16(l0): point = 163
   Insn 15(l0): point = 165
   Insn 117(l0): point = 168
   Insn 11(l0): point = 170
   Insn 10(l0): point = 172
   Insn 9(l0): point = 174
   Insn 8(l0): point = 176
   Insn 7(l0): point = 178
   Insn 6(l0): point = 180
   Insn 5(l0): point = 182
 a0(r73): [4..5]
 a1(r102): [6..7]
 a2(r82): [16..25]
 a3(r81): [20..29]
 a4(r101): [22..23]
 a5(r100): [26..27]
 a6(r99): [30..31]
 a7(r80): [39..48]
 a8(r79): [43..52]
 a9(r98): [45..46]
 a10(r97): [49..50]
 a11(r96): [53..54]
 a12(r78): [60..61]
 a13(r95): [62..63]
 a14(r77): [66..67]
 a15(r76): [68..69]
 a16(r75): [70..71]
 a17(r74): [72..73]
 a18(r72): [81..82]
 a19(r94): [83..84]
 a20(r71): [87..88]
 a21(r93): [89..90]
 a22(r61): [96..97]
 a23(r92): [98..99]
 a24(r70): [108..117]
 a25(r69): [112..121]
 a26(r91): [114..115]
 a27(r90): [118..119]
 a28(r89): [122..123]
 a29(r68): [131..140]
 a30(r67): [135..144]
 a31(r88): [137..138]
 a32(r87): [141..142]
 a33(r86): [145..146]
 a34(r66): [152..153]
 a35(r85): [154..155]
 a36(r65): [158..159]
 a37(r64): [160..161]
 a38(r63): [162..163]
 a39(r62): [164..165]
 a40(r60): [173..174]
 a41(r84): [175..176]
 a42(r59): [179..180]
 a43(r83): [181..182]
Compressing live ranges: from 185 to 72 - 38%
Ranges after the compression:
 a0(r73): [0..1]
 a1(r102): [2..3]
 a2(r82): [4..5]
 a3(r81): [4..7]
 a4(r101): [4..5]
 a5(r100): [6..7]
 a6(r99): [8..9]
 a7(r80): [10..11]
 a8(r79): [10..13]
 a9(r98): [10..11]
 a10(r97): [12..13]
 a11(r96): [14..15]
 a12(r78): [16..17]
 a13(r95): [18..19]
 a14(r77): [20..21]
 a15(r76): [22..23]
 a16(r75): [24..25]
 a17(r74): [26..27]
 a18(r72): [28..29]
 a19(r94): [30..31]
 a20(r71): [32..33]
 a21(r93): [34..35]
 a22(r61): [36..37]
 a23(r92): [38..39]
 a24(r70): [40..41]
 a25(r69): [40..43]
 a26(r91): [40..41]
 a27(r90): [42..43]
 a28(r89): [44..45]
 a29(r68): [46..47]
 a30(r67): [46..49]
 a31(r88): [46..47]
 a32(r87): [48..49]
 a33(r86): [50..51]
 a34(r66): [52..53]
 a35(r85): [54..55]
 a36(r65): [56..57]
 a37(r64): [58..59]
 a38(r63): [60..61]
 a39(r62): [62..63]
 a40(r60): [64..65]
 a41(r84): [66..67]
 a42(r59): [68..69]
 a43(r83): [70..71]
  regions=3, blocks=15, points=72
    allocnos=44 (big 0), copies=0, conflicts=0, ranges=44
Disposition:
   42:r59  l0     0   40:r60  l0     0   22:r61  l0     0   39:r62  l0     0
   38:r63  l0     0   37:r64  l0     0   36:r65  l0     0   34:r66  l0     0
   30:r67  l0     1   29:r68  l0     0   25:r69  l0     1   24:r70  l0     0
   20:r71  l0     0   18:r72  l0     0    0:r73  l0     0   17:r74  l0     0
   16:r75  l0     0   15:r76  l0     0   14:r77  l0     0   12:r78  l0     0
    8:r79  l0     1    7:r80  l0     0    3:r81  l0     1    2:r82  l0     0
   43:r83  l0     0   41:r84  l0     0   35:r85  l0     0   33:r86  l0     0
   32:r87  l0     0   31:r88  l0     2   28:r89  l0     0   27:r90  l0     0
   26:r91  l0     2   23:r92  l0     0   21:r93  l0     0   19:r94  l0     0
   13:r95  l0     0   11:r96  l0     0   10:r97  l0     0    9:r98  l0     2
    6:r99  l0     0    5:r100 l0     0    4:r101 l0     2    1:r102 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 83
insn=6, live_throughout: 7, dead_or_set: 59, 83
insn=7, live_throughout: 7, dead_or_set: 59
insn=8, live_throughout: 7, dead_or_set: 84
insn=9, live_throughout: 7, dead_or_set: 60, 84
insn=10, live_throughout: 7, dead_or_set: 60
insn=11, live_throughout: 7, dead_or_set: 
insn=117, live_throughout: 7, dead_or_set: 
insn=56, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 62
insn=16, live_throughout: 7, dead_or_set: 62, 63
insn=17, live_throughout: 7, dead_or_set: 63, 64
insn=18, live_throughout: 7, dead_or_set: 64, 65
insn=19, live_throughout: 7, dead_or_set: 65
insn=20, live_throughout: 7, dead_or_set: 85
insn=21, live_throughout: 7, dead_or_set: 66, 85
insn=22, live_throughout: 7, dead_or_set: 66
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 86
insn=26, live_throughout: 7, dead_or_set: 67, 86
insn=27, live_throughout: 7, 67, dead_or_set: 87
insn=28, live_throughout: 7, 67, dead_or_set: 68, 87
insn=29, live_throughout: 7, 67, 68, dead_or_set: 88
insn=30, live_throughout: 7, 67, 68, dead_or_set: 88
insn=31, live_throughout: 7, 68, dead_or_set: 67
insn=32, live_throughout: 7, 68, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 68
insn=34, live_throughout: 7, dead_or_set: 0
insn=119, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 89
insn=40, live_throughout: 7, dead_or_set: 69, 89
insn=41, live_throughout: 7, 69, dead_or_set: 90
insn=42, live_throughout: 7, 69, dead_or_set: 70, 90
insn=43, live_throughout: 7, 69, 70, dead_or_set: 91
insn=44, live_throughout: 7, 69, 70, dead_or_set: 91
insn=45, live_throughout: 7, 70, dead_or_set: 69
insn=46, live_throughout: 7, 70, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 70
insn=48, live_throughout: 7, dead_or_set: 0
insn=49, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 
insn=52, live_throughout: 7, dead_or_set: 
insn=54, live_throughout: 7, dead_or_set: 92
insn=55, live_throughout: 7, dead_or_set: 61, 92
insn=57, live_throughout: 7, dead_or_set: 61
insn=58, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 93
insn=61, live_throughout: 7, dead_or_set: 71, 93
insn=62, live_throughout: 7, dead_or_set: 71
insn=63, live_throughout: 7, dead_or_set: 94
insn=64, live_throughout: 7, dead_or_set: 72, 94
insn=65, live_throughout: 7, dead_or_set: 72
insn=66, live_throughout: 7, dead_or_set: 
insn=121, live_throughout: 7, dead_or_set: 
insn=111, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 74
insn=71, live_throughout: 7, dead_or_set: 74, 75
insn=72, live_throughout: 7, dead_or_set: 75, 76
insn=73, live_throughout: 7, dead_or_set: 76, 77
insn=74, live_throughout: 7, dead_or_set: 77
insn=75, live_throughout: 7, dead_or_set: 95
insn=76, live_throughout: 7, dead_or_set: 78, 95
insn=77, live_throughout: 7, dead_or_set: 78
insn=78, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 96
insn=81, live_throughout: 7, dead_or_set: 79, 96
insn=82, live_throughout: 7, 79, dead_or_set: 97
insn=83, live_throughout: 7, 79, dead_or_set: 80, 97
insn=84, live_throughout: 7, 79, 80, dead_or_set: 98
insn=85, live_throughout: 7, 79, 80, dead_or_set: 98
insn=86, live_throughout: 7, 80, dead_or_set: 79
insn=87, live_throughout: 7, 80, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 80
insn=89, live_throughout: 7, dead_or_set: 0
insn=123, live_throughout: 7, dead_or_set: 
insn=92, live_throughout: 7, dead_or_set: 
insn=94, live_throughout: 7, dead_or_set: 99
insn=95, live_throughout: 7, dead_or_set: 81, 99
insn=96, live_throughout: 7, 81, dead_or_set: 100
insn=97, live_throughout: 7, 81, dead_or_set: 82, 100
insn=98, live_throughout: 7, 81, 82, dead_or_set: 101
insn=99, live_throughout: 7, 81, 82, dead_or_set: 101
insn=100, live_throughout: 7, 82, dead_or_set: 81
insn=101, live_throughout: 7, 82, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 82
insn=103, live_throughout: 7, dead_or_set: 0
insn=104, live_throughout: 7, dead_or_set: 
insn=106, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 102
insn=110, live_throughout: 7, dead_or_set: 73, 102
insn=112, live_throughout: 7, dead_or_set: 73
insn=113, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 55
changing reg in insn 57
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 31
changing reg in insn 28
changing reg in insn 33
changing reg in insn 40
changing reg in insn 45
changing reg in insn 42
changing reg in insn 47
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 110
changing reg in insn 112
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 86
changing reg in insn 83
changing reg in insn 88
changing reg in insn 95
changing reg in insn 100
changing reg in insn 97
changing reg in insn 102
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 54
changing reg in insn 55
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 109
changing reg in insn 110
deleting insn with uid = 16.
deleting insn with uid = 18.
deleting insn with uid = 71.
deleting insn with uid = 73.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 103.


Display_DrawOut

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={37d,32u} r1={9d,4u} r2={9d,4u} r6={1d,50u} r7={1d,34u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,4u} r18={4d} r19={4d} r20={1d,1u,4e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 375{242d,129u,4e} in 82{78 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 60 83 84

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [83])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:390 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:HI 0 ax [orig:59 D.6284 ] [59])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [83])
                (const_int 332 [0x14c])) [0 display_3(D)->positions[25].x+0 S2 A32])) src/gui.c:390 65 {*movhi_internal}
     (nil))

(insn 7 6 8 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:59 D.6284 ] [59])) src/gui.c:390 65 {*movhi_internal}
     (nil))

(insn 8 7 9 2 (set (reg/f:SI 0 ax [84])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:391 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg:HI 0 ax [orig:60 D.6285 ] [60])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [84])
                (const_int 334 [0x14e])) [0 display_3(D)->positions[25].y+0 S2 A16])) src/gui.c:391 65 {*movhi_internal}
     (nil))

(insn 10 9 11 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:60 D.6285 ] [60])) src/gui.c:391 65 {*movhi_internal}
     (nil))

(insn 11 10 117 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:392 64 {*movsi_internal}
     (nil))

(jump_insn 117 11 118 2 (set (pc)
        (label_ref 52)) src/gui.c:392 606 {jump}
     (nil)
 -> 52)
;; End of basic block 2 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 118 117 56)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64 65 66 85

;; Pred edge  7
(code_label 56 118 14 3 45 "" [1 uses])

(note 14 56 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 17 3 (set (reg:HI 0 ax [orig:62 D.6286 ] [62])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])) src/gui.c:394 65 {*movhi_internal}
     (nil))

(insn 17 15 19 3 (parallel [
            (set (reg:HI 0 ax [orig:64 D.6288 ] [64])
                (plus:HI (reg:HI 0 ax [orig:63 D.6287 ] [63])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:394 256 {*addhi_1_lea}
     (nil))

(insn 19 17 20 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:65 D.6289 ] [65])) src/gui.c:394 65 {*movhi_internal}
     (nil))

(insn 20 19 21 3 (set (reg/f:SI 0 ax [85])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:395 64 {*movsi_internal}
     (nil))

(insn 21 20 22 3 (set (reg:SI 0 ax [orig:66 D.6290 ] [66])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [85])
                (const_int 8 [0x8])) [0 game_13(D)->player1_checker+0 S4 A32])) src/gui.c:395 64 {*movsi_internal}
     (nil))

(insn 22 21 23 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:66 D.6290 ] [66])
            (const_int 0 [0]))) src/gui.c:395 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) src/gui.c:395 591 {*jcc_1}
     (nil)
 -> 37)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 67 68 86 87 88

;; Pred edge  3 (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 (set (reg/f:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 26 25 27 4 (set (reg/f:SI 1 dx [orig:67 D.6293 ] [67])
        (mem/s/f/j:SI (reg/f:SI 0 ax [86]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 27 26 28 4 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 28 27 29 4 (set (reg/f:SI 0 ax [orig:68 D.6294 ] [68])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [87])
                (const_int 52 [0x34])) [0 display_3(D)->bar_green_checker+0 S4 A32])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 29 28 30 4 (parallel [
            (set (reg:SI 2 cx [88])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:396 252 {*addsi_1}
     (nil))

(insn 30 29 31 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [88])) src/gui.c:396 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 31 30 32 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:67 D.6293 ] [67])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 32 31 33 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(insn 33 32 34 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6294 ] [68])) src/gui.c:396 64 {*movsi_internal}
     (nil))

(call_insn 34 33 119 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:396 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 119 34 120 4 (set (pc)
        (label_ref 49)) 606 {jump}
     (nil)
 -> 49)
;; End of basic block 4 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 120 119 37)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 69 70 89 90 91

;; Pred edge  3
(code_label 37 120 38 5 43 "" [1 uses])

(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 5 (set (reg/f:SI 0 ax [89])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 40 39 41 5 (set (reg/f:SI 1 dx [orig:69 D.6296 ] [69])
        (mem/s/f/j:SI (reg/f:SI 0 ax [89]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 41 40 42 5 (set (reg/f:SI 0 ax [90])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 42 41 43 5 (set (reg/f:SI 0 ax [orig:70 D.6297 ] [70])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [90])
                (const_int 56 [0x38])) [0 display_3(D)->bar_white_checker+0 S4 A32])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 43 42 44 5 (parallel [
            (set (reg:SI 2 cx [91])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:398 252 {*addsi_1}
     (nil))

(insn 44 43 45 5 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [91])) src/gui.c:398 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 45 44 46 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:69 D.6296 ] [69])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 46 45 47 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(insn 47 46 48 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:70 D.6297 ] [70])) src/gui.c:398 64 {*movsi_internal}
     (nil))

(call_insn 48 47 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:398 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 49 48 50 6 44 "" [1 uses])

(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 6 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:392 252 {*addsi_1}
     (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 92

;; Pred edge  6 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 52 51 53 7 42 "" [1 uses])

(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 7 (set (reg/f:SI 0 ax [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:392 64 {*movsi_internal}
     (nil))

(insn 55 54 57 7 (set (reg:SI 0 ax [orig:61 D.6298 ] [61])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 204 [0xcc])) [0 gameState_7(D)->zones[25].nb_checkers+0 S4 A32])) src/gui.c:392 64 {*movsi_internal}
     (nil))

(insn 57 55 58 7 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:61 D.6298 ] [61])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) src/gui.c:392 6 {*cmpsi_1}
     (nil))

(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) src/gui.c:392 591 {*jcc_1}
     (nil)
 -> 56)
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 71 72 93 94

;; Pred edge  7 (fallthru)
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 8 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:400 64 {*movsi_internal}
     (nil))

(insn 61 60 62 8 (set (reg:HI 0 ax [orig:71 D.6299 ] [71])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 348 [0x15c])) [0 display_3(D)->positions[27].x+0 S2 A32])) src/gui.c:400 65 {*movhi_internal}
     (nil))

(insn 62 61 63 8 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:71 D.6299 ] [71])) src/gui.c:400 65 {*movhi_internal}
     (nil))

(insn 63 62 64 8 (set (reg/f:SI 0 ax [94])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:401 64 {*movsi_internal}
     (nil))

(insn 64 63 65 8 (set (reg:HI 0 ax [orig:72 D.6300 ] [72])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 350 [0x15e])) [0 display_3(D)->positions[27].y+0 S2 A16])) src/gui.c:401 65 {*movhi_internal}
     (nil))

(insn 65 64 66 8 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:72 D.6300 ] [72])) src/gui.c:401 65 {*movhi_internal}
     (nil))

(insn 66 65 121 8 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:402 64 {*movsi_internal}
     (nil))

(jump_insn 121 66 122 8 (set (pc)
        (label_ref 107)) src/gui.c:402 606 {jump}
     (nil)
 -> 107)
;; End of basic block 8 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 [100.0%] 

(barrier 122 121 111)

;; Start of basic block ( 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74 75 76 77 78 95

;; Pred edge  13
(code_label 111 122 69 9 49 "" [1 uses])

(note 69 111 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 72 9 (set (reg:HI 0 ax [orig:74 D.6301 ] [74])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])) src/gui.c:404 65 {*movhi_internal}
     (nil))

(insn 72 70 74 9 (parallel [
            (set (reg:HI 0 ax [orig:76 D.6303 ] [76])
                (plus:HI (reg:HI 0 ax [orig:75 D.6302 ] [75])
                    (const_int -10 [0xfffffffffffffff6])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:404 256 {*addhi_1_lea}
     (nil))

(insn 74 72 75 9 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:77 D.6304 ] [77])) src/gui.c:404 65 {*movhi_internal}
     (nil))

(insn 75 74 76 9 (set (reg/f:SI 0 ax [95])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:405 64 {*movsi_internal}
     (nil))

(insn 76 75 77 9 (set (reg:SI 0 ax [orig:78 D.6305 ] [78])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [95])
                (const_int 12 [0xc])) [0 game_13(D)->player2_checker+0 S4 A32])) src/gui.c:405 64 {*movsi_internal}
     (nil))

(insn 77 76 78 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:78 D.6305 ] [78])
            (const_int 0 [0]))) src/gui.c:405 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 78 77 79 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) src/gui.c:405 591 {*jcc_1}
     (nil)
 -> 92)
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 79 80 96 97 98

;; Pred edge  9 (fallthru)
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 10 (set (reg/f:SI 0 ax [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 81 80 82 10 (set (reg/f:SI 1 dx [orig:79 D.6308 ] [79])
        (mem/s/f/j:SI (reg/f:SI 0 ax [96]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 82 81 83 10 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 83 82 84 10 (set (reg/f:SI 0 ax [orig:80 D.6309 ] [80])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [97])
                (const_int 52 [0x34])) [0 display_3(D)->bar_green_checker+0 S4 A32])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 84 83 85 10 (parallel [
            (set (reg:SI 2 cx [98])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:406 252 {*addsi_1}
     (nil))

(insn 85 84 86 10 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [98])) src/gui.c:406 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 86 85 87 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:79 D.6308 ] [79])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 87 86 88 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(insn 88 87 89 10 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:80 D.6309 ] [80])) src/gui.c:406 64 {*movsi_internal}
     (nil))

(call_insn 89 88 123 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:406 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 123 89 124 10 (set (pc)
        (label_ref 104)) 606 {jump}
     (nil)
 -> 104)
;; End of basic block 10 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 [100.0%] 

(barrier 124 123 92)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 81 82 99 100 101

;; Pred edge  9
(code_label 92 124 93 11 47 "" [1 uses])

(note 93 92 94 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 11 (set (reg/f:SI 0 ax [99])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 95 94 96 11 (set (reg/f:SI 1 dx [orig:81 D.6311 ] [81])
        (mem/s/f/j:SI (reg/f:SI 0 ax [99]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 96 95 97 11 (set (reg/f:SI 0 ax [100])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 97 96 98 11 (set (reg/f:SI 0 ax [orig:82 D.6312 ] [82])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [100])
                (const_int 56 [0x38])) [0 display_3(D)->bar_white_checker+0 S4 A32])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 98 97 99 11 (parallel [
            (set (reg:SI 2 cx [101])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:408 252 {*addsi_1}
     (nil))

(insn 99 98 100 11 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [101])) src/gui.c:408 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 100 99 101 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:81 D.6311 ] [81])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 101 100 102 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(insn 102 101 103 11 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:82 D.6312 ] [82])) src/gui.c:408 64 {*movsi_internal}
     (nil))

(call_insn 103 102 104 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:408 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  11 (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 104 103 105 12 48 "" [1 uses])

(note 105 104 106 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 107 12 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:402 252 {*addsi_1}
     (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 12 8) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 102

;; Pred edge  12 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 107 106 108 13 46 "" [1 uses])

(note 108 107 109 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 13 (set (reg/f:SI 0 ax [102])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:402 64 {*movsi_internal}
     (nil))

(insn 110 109 112 13 (set (reg:SI 0 ax [orig:73 D.6313 ] [73])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 220 [0xdc])) [0 gameState_7(D)->zones[27].nb_checkers+0 S4 A32])) src/gui.c:402 64 {*movsi_internal}
     (nil))

(insn 112 110 113 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:73 D.6313 ] [73])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) src/gui.c:402 6 {*cmpsi_1}
     (nil))

(jump_insn 113 112 116 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) src/gui.c:402 591 {*jcc_1}
     (nil)
 -> 111)
;; End of basic block 13 -> ( 9 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9
;; Succ edge  14 (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  13 (fallthru)
(note 116 113 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 14 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 125 116 0 NOTE_INSN_DELETED)


;; Function Display_DrawBar (Display_DrawBar)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 18 count 15 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a16(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a17(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a18(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a38(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 113(l0): point = 1
   Insn 112(l0): point = 3
   Insn 110(l0): point = 5
   Insn 109(l0): point = 7
   Insn 106(l0): point = 10
   Insn 103(l0): point = 13
   Insn 102(l0): point = 15
   Insn 101(l0): point = 17
   Insn 100(l0): point = 19
   Insn 99(l0): point = 21
   Insn 98(l0): point = 23
   Insn 97(l0): point = 25
   Insn 96(l0): point = 27
   Insn 95(l0): point = 29
   Insn 94(l0): point = 31
   Insn 123(l0): point = 34
   Insn 89(l0): point = 36
   Insn 88(l0): point = 38
   Insn 87(l0): point = 40
   Insn 86(l0): point = 42
   Insn 85(l0): point = 44
   Insn 84(l0): point = 46
   Insn 83(l0): point = 48
   Insn 82(l0): point = 50
   Insn 81(l0): point = 52
   Insn 80(l0): point = 54
   Insn 78(l0): point = 57
   Insn 77(l0): point = 59
   Insn 76(l0): point = 61
   Insn 75(l0): point = 63
   Insn 74(l0): point = 65
   Insn 73(l0): point = 67
   Insn 72(l0): point = 69
   Insn 71(l0): point = 71
   Insn 70(l0): point = 73
   Insn 121(l0): point = 76
   Insn 66(l0): point = 78
   Insn 65(l0): point = 80
   Insn 64(l0): point = 82
   Insn 63(l0): point = 84
   Insn 62(l0): point = 86
   Insn 61(l0): point = 88
   Insn 60(l0): point = 90
   Insn 58(l0): point = 93
   Insn 57(l0): point = 95
   Insn 55(l0): point = 97
   Insn 54(l0): point = 99
   Insn 51(l0): point = 102
   Insn 48(l0): point = 105
   Insn 47(l0): point = 107
   Insn 46(l0): point = 109
   Insn 45(l0): point = 111
   Insn 44(l0): point = 113
   Insn 43(l0): point = 115
   Insn 42(l0): point = 117
   Insn 41(l0): point = 119
   Insn 40(l0): point = 121
   Insn 39(l0): point = 123
   Insn 119(l0): point = 126
   Insn 34(l0): point = 128
   Insn 33(l0): point = 130
   Insn 32(l0): point = 132
   Insn 31(l0): point = 134
   Insn 30(l0): point = 136
   Insn 29(l0): point = 138
   Insn 28(l0): point = 140
   Insn 27(l0): point = 142
   Insn 26(l0): point = 144
   Insn 25(l0): point = 146
   Insn 23(l0): point = 149
   Insn 22(l0): point = 151
   Insn 21(l0): point = 153
   Insn 20(l0): point = 155
   Insn 19(l0): point = 157
   Insn 18(l0): point = 159
   Insn 17(l0): point = 161
   Insn 16(l0): point = 163
   Insn 15(l0): point = 165
   Insn 117(l0): point = 168
   Insn 11(l0): point = 170
   Insn 10(l0): point = 172
   Insn 9(l0): point = 174
   Insn 8(l0): point = 176
   Insn 7(l0): point = 178
   Insn 6(l0): point = 180
   Insn 5(l0): point = 182
 a0(r73): [4..5]
 a1(r102): [6..7]
 a2(r82): [16..25]
 a3(r81): [20..29]
 a4(r101): [22..23]
 a5(r100): [26..27]
 a6(r99): [30..31]
 a7(r80): [39..48]
 a8(r79): [43..52]
 a9(r98): [45..46]
 a10(r97): [49..50]
 a11(r96): [53..54]
 a12(r78): [60..61]
 a13(r95): [62..63]
 a14(r77): [66..67]
 a15(r76): [68..69]
 a16(r75): [70..71]
 a17(r74): [72..73]
 a18(r72): [81..82]
 a19(r94): [83..84]
 a20(r71): [87..88]
 a21(r93): [89..90]
 a22(r61): [96..97]
 a23(r92): [98..99]
 a24(r70): [108..117]
 a25(r69): [112..121]
 a26(r91): [114..115]
 a27(r90): [118..119]
 a28(r89): [122..123]
 a29(r68): [131..140]
 a30(r67): [135..144]
 a31(r88): [137..138]
 a32(r87): [141..142]
 a33(r86): [145..146]
 a34(r66): [152..153]
 a35(r85): [154..155]
 a36(r65): [158..159]
 a37(r64): [160..161]
 a38(r63): [162..163]
 a39(r62): [164..165]
 a40(r60): [173..174]
 a41(r84): [175..176]
 a42(r59): [179..180]
 a43(r83): [181..182]
Compressing live ranges: from 185 to 72 - 38%
Ranges after the compression:
 a0(r73): [0..1]
 a1(r102): [2..3]
 a2(r82): [4..5]
 a3(r81): [4..7]
 a4(r101): [4..5]
 a5(r100): [6..7]
 a6(r99): [8..9]
 a7(r80): [10..11]
 a8(r79): [10..13]
 a9(r98): [10..11]
 a10(r97): [12..13]
 a11(r96): [14..15]
 a12(r78): [16..17]
 a13(r95): [18..19]
 a14(r77): [20..21]
 a15(r76): [22..23]
 a16(r75): [24..25]
 a17(r74): [26..27]
 a18(r72): [28..29]
 a19(r94): [30..31]
 a20(r71): [32..33]
 a21(r93): [34..35]
 a22(r61): [36..37]
 a23(r92): [38..39]
 a24(r70): [40..41]
 a25(r69): [40..43]
 a26(r91): [40..41]
 a27(r90): [42..43]
 a28(r89): [44..45]
 a29(r68): [46..47]
 a30(r67): [46..49]
 a31(r88): [46..47]
 a32(r87): [48..49]
 a33(r86): [50..51]
 a34(r66): [52..53]
 a35(r85): [54..55]
 a36(r65): [56..57]
 a37(r64): [58..59]
 a38(r63): [60..61]
 a39(r62): [62..63]
 a40(r60): [64..65]
 a41(r84): [66..67]
 a42(r59): [68..69]
 a43(r83): [70..71]
  regions=3, blocks=15, points=72
    allocnos=44 (big 0), copies=0, conflicts=0, ranges=44
Disposition:
   42:r59  l0     0   40:r60  l0     0   22:r61  l0     0   39:r62  l0     0
   38:r63  l0     0   37:r64  l0     0   36:r65  l0     0   34:r66  l0     0
   30:r67  l0     1   29:r68  l0     0   25:r69  l0     1   24:r70  l0     0
   20:r71  l0     0   18:r72  l0     0    0:r73  l0     0   17:r74  l0     0
   16:r75  l0     0   15:r76  l0     0   14:r77  l0     0   12:r78  l0     0
    8:r79  l0     1    7:r80  l0     0    3:r81  l0     1    2:r82  l0     0
   43:r83  l0     0   41:r84  l0     0   35:r85  l0     0   33:r86  l0     0
   32:r87  l0     0   31:r88  l0     2   28:r89  l0     0   27:r90  l0     0
   26:r91  l0     2   23:r92  l0     0   21:r93  l0     0   19:r94  l0     0
   13:r95  l0     0   11:r96  l0     0   10:r97  l0     0    9:r98  l0     2
    6:r99  l0     0    5:r100 l0     0    4:r101 l0     2    1:r102 l0     0
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 83
insn=6, live_throughout: 7, dead_or_set: 59, 83
insn=7, live_throughout: 7, dead_or_set: 59
insn=8, live_throughout: 7, dead_or_set: 84
insn=9, live_throughout: 7, dead_or_set: 60, 84
insn=10, live_throughout: 7, dead_or_set: 60
insn=11, live_throughout: 7, dead_or_set: 
insn=117, live_throughout: 7, dead_or_set: 
insn=56, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 62
insn=16, live_throughout: 7, dead_or_set: 62, 63
insn=17, live_throughout: 7, dead_or_set: 63, 64
insn=18, live_throughout: 7, dead_or_set: 64, 65
insn=19, live_throughout: 7, dead_or_set: 65
insn=20, live_throughout: 7, dead_or_set: 85
insn=21, live_throughout: 7, dead_or_set: 66, 85
insn=22, live_throughout: 7, dead_or_set: 66
insn=23, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 86
insn=26, live_throughout: 7, dead_or_set: 67, 86
insn=27, live_throughout: 7, 67, dead_or_set: 87
insn=28, live_throughout: 7, 67, dead_or_set: 68, 87
insn=29, live_throughout: 7, 67, 68, dead_or_set: 88
insn=30, live_throughout: 7, 67, 68, dead_or_set: 88
insn=31, live_throughout: 7, 68, dead_or_set: 67
insn=32, live_throughout: 7, 68, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 68
insn=34, live_throughout: 7, dead_or_set: 0
insn=119, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 89
insn=40, live_throughout: 7, dead_or_set: 69, 89
insn=41, live_throughout: 7, 69, dead_or_set: 90
insn=42, live_throughout: 7, 69, dead_or_set: 70, 90
insn=43, live_throughout: 7, 69, 70, dead_or_set: 91
insn=44, live_throughout: 7, 69, 70, dead_or_set: 91
insn=45, live_throughout: 7, 70, dead_or_set: 69
insn=46, live_throughout: 7, 70, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 70
insn=48, live_throughout: 7, dead_or_set: 0
insn=49, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 
insn=52, live_throughout: 7, dead_or_set: 
insn=54, live_throughout: 7, dead_or_set: 92
insn=55, live_throughout: 7, dead_or_set: 61, 92
insn=57, live_throughout: 7, dead_or_set: 61
insn=58, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 93
insn=61, live_throughout: 7, dead_or_set: 71, 93
insn=62, live_throughout: 7, dead_or_set: 71
insn=63, live_throughout: 7, dead_or_set: 94
insn=64, live_throughout: 7, dead_or_set: 72, 94
insn=65, live_throughout: 7, dead_or_set: 72
insn=66, live_throughout: 7, dead_or_set: 
insn=121, live_throughout: 7, dead_or_set: 
insn=111, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 74
insn=71, live_throughout: 7, dead_or_set: 74, 75
insn=72, live_throughout: 7, dead_or_set: 75, 76
insn=73, live_throughout: 7, dead_or_set: 76, 77
insn=74, live_throughout: 7, dead_or_set: 77
insn=75, live_throughout: 7, dead_or_set: 95
insn=76, live_throughout: 7, dead_or_set: 78, 95
insn=77, live_throughout: 7, dead_or_set: 78
insn=78, live_throughout: 7, dead_or_set: 
insn=80, live_throughout: 7, dead_or_set: 96
insn=81, live_throughout: 7, dead_or_set: 79, 96
insn=82, live_throughout: 7, 79, dead_or_set: 97
insn=83, live_throughout: 7, 79, dead_or_set: 80, 97
insn=84, live_throughout: 7, 79, 80, dead_or_set: 98
insn=85, live_throughout: 7, 79, 80, dead_or_set: 98
insn=86, live_throughout: 7, 80, dead_or_set: 79
insn=87, live_throughout: 7, 80, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 80
insn=89, live_throughout: 7, dead_or_set: 0
insn=123, live_throughout: 7, dead_or_set: 
insn=92, live_throughout: 7, dead_or_set: 
insn=94, live_throughout: 7, dead_or_set: 99
insn=95, live_throughout: 7, dead_or_set: 81, 99
insn=96, live_throughout: 7, 81, dead_or_set: 100
insn=97, live_throughout: 7, 81, dead_or_set: 82, 100
insn=98, live_throughout: 7, 81, 82, dead_or_set: 101
insn=99, live_throughout: 7, 81, 82, dead_or_set: 101
insn=100, live_throughout: 7, 82, dead_or_set: 81
insn=101, live_throughout: 7, 82, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 82
insn=103, live_throughout: 7, dead_or_set: 0
insn=104, live_throughout: 7, dead_or_set: 
insn=106, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 102
insn=110, live_throughout: 7, dead_or_set: 73, 102
insn=112, live_throughout: 7, dead_or_set: 73
insn=113, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 55
changing reg in insn 57
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 31
changing reg in insn 28
changing reg in insn 33
changing reg in insn 40
changing reg in insn 45
changing reg in insn 42
changing reg in insn 47
changing reg in insn 61
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 110
changing reg in insn 112
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 76
changing reg in insn 77
changing reg in insn 81
changing reg in insn 86
changing reg in insn 83
changing reg in insn 88
changing reg in insn 95
changing reg in insn 100
changing reg in insn 97
changing reg in insn 102
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 9
changing reg in insn 20
changing reg in insn 21
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 39
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 54
changing reg in insn 55
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 64
changing reg in insn 75
changing reg in insn 76
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
changing reg in insn 83
changing reg in insn 84
changing reg in insn 85
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 99
changing reg in insn 109
changing reg in insn 110
deleting insn with uid = 16.
deleting insn with uid = 18.
deleting insn with uid = 71.
deleting insn with uid = 73.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 103.


Display_DrawBar

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={37d,32u} r1={9d,4u} r2={9d,4u} r6={1d,50u} r7={1d,34u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,4u} r18={4d} r19={4d} r20={1d,1u,4e} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} 
;;    total ref usage 375{242d,129u,4e} in 82{78 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 60 83 84

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [83])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:416 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:HI 0 ax [orig:59 D.6254 ] [59])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [83])
                (const_int 324 [0x144])) [0 display_3(D)->positions[24].x+0 S2 A32])) src/gui.c:416 65 {*movhi_internal}
     (nil))

(insn 7 6 8 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:59 D.6254 ] [59])) src/gui.c:416 65 {*movhi_internal}
     (nil))

(insn 8 7 9 2 (set (reg/f:SI 0 ax [84])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:417 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg:HI 0 ax [orig:60 D.6255 ] [60])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [84])
                (const_int 326 [0x146])) [0 display_3(D)->positions[24].y+0 S2 A16])) src/gui.c:417 65 {*movhi_internal}
     (nil))

(insn 10 9 11 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:60 D.6255 ] [60])) src/gui.c:417 65 {*movhi_internal}
     (nil))

(insn 11 10 117 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:418 64 {*movsi_internal}
     (nil))

(jump_insn 117 11 118 2 (set (pc)
        (label_ref 52)) src/gui.c:418 606 {jump}
     (nil)
 -> 52)
;; End of basic block 2 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 [100.0%] 

(barrier 118 117 56)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 64 65 66 85

;; Pred edge  7
(code_label 56 118 14 3 54 "" [1 uses])

(note 14 56 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 17 3 (set (reg:HI 0 ax [orig:62 D.6256 ] [62])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])) src/gui.c:420 65 {*movhi_internal}
     (nil))

(insn 17 15 19 3 (parallel [
            (set (reg:HI 0 ax [orig:64 D.6258 ] [64])
                (plus:HI (reg:HI 0 ax [orig:63 D.6257 ] [63])
                    (const_int 10 [0xa])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:420 256 {*addhi_1_lea}
     (nil))

(insn 19 17 20 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:65 D.6259 ] [65])) src/gui.c:420 65 {*movhi_internal}
     (nil))

(insn 20 19 21 3 (set (reg/f:SI 0 ax [85])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:421 64 {*movsi_internal}
     (nil))

(insn 21 20 22 3 (set (reg:SI 0 ax [orig:66 D.6260 ] [66])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [85])
                (const_int 8 [0x8])) [0 game_13(D)->player1_checker+0 S4 A32])) src/gui.c:421 64 {*movsi_internal}
     (nil))

(insn 22 21 23 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:66 D.6260 ] [66])
            (const_int 0 [0]))) src/gui.c:421 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) src/gui.c:421 591 {*jcc_1}
     (nil)
 -> 37)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 67 68 86 87 88

;; Pred edge  3 (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 (set (reg/f:SI 0 ax [86])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 26 25 27 4 (set (reg/f:SI 1 dx [orig:67 D.6263 ] [67])
        (mem/s/f/j:SI (reg/f:SI 0 ax [86]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 27 26 28 4 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 28 27 29 4 (set (reg/f:SI 0 ax [orig:68 D.6264 ] [68])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [87])
                (const_int 44 [0x2c])) [0 display_3(D)->green_checker+0 S4 A32])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 29 28 30 4 (parallel [
            (set (reg:SI 2 cx [88])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:422 252 {*addsi_1}
     (nil))

(insn 30 29 31 4 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [88])) src/gui.c:422 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 31 30 32 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:67 D.6263 ] [67])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 32 31 33 4 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(insn 33 32 34 4 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:68 D.6264 ] [68])) src/gui.c:422 64 {*movsi_internal}
     (nil))

(call_insn 34 33 119 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:422 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 119 34 120 4 (set (pc)
        (label_ref 49)) 606 {jump}
     (nil)
 -> 49)
;; End of basic block 4 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 120 119 37)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 69 70 89 90 91

;; Pred edge  3
(code_label 37 120 38 5 52 "" [1 uses])

(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 5 (set (reg/f:SI 0 ax [89])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 40 39 41 5 (set (reg/f:SI 1 dx [orig:69 D.6266 ] [69])
        (mem/s/f/j:SI (reg/f:SI 0 ax [89]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 41 40 42 5 (set (reg/f:SI 0 ax [90])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 42 41 43 5 (set (reg/f:SI 0 ax [orig:70 D.6267 ] [70])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [90])
                (const_int 48 [0x30])) [0 display_3(D)->white_checker+0 S4 A32])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 43 42 44 5 (parallel [
            (set (reg:SI 2 cx [91])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:424 252 {*addsi_1}
     (nil))

(insn 44 43 45 5 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [91])) src/gui.c:424 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 45 44 46 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:69 D.6266 ] [69])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 46 45 47 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(insn 47 46 48 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:70 D.6267 ] [70])) src/gui.c:424 64 {*movsi_internal}
     (nil))

(call_insn 48 47 49 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:424 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 49 48 50 6 53 "" [1 uses])

(note 50 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 6 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:418 252 {*addsi_1}
     (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 92

;; Pred edge  6 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 52 51 53 7 51 "" [1 uses])

(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 7 (set (reg/f:SI 0 ax [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:418 64 {*movsi_internal}
     (nil))

(insn 55 54 57 7 (set (reg:SI 0 ax [orig:61 D.6268 ] [61])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [92])
                (const_int 196 [0xc4])) [0 gameState_7(D)->zones[24].nb_checkers+0 S4 A32])) src/gui.c:418 64 {*movsi_internal}
     (nil))

(insn 57 55 58 7 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:61 D.6268 ] [61])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) src/gui.c:418 6 {*cmpsi_1}
     (nil))

(jump_insn 58 57 59 7 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 56)
            (pc))) src/gui.c:418 591 {*jcc_1}
     (nil)
 -> 56)
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 71 72 93 94

;; Pred edge  7 (fallthru)
(note 59 58 60 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 8 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:426 64 {*movsi_internal}
     (nil))

(insn 61 60 62 8 (set (reg:HI 0 ax [orig:71 D.6269 ] [71])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [93])
                (const_int 340 [0x154])) [0 display_3(D)->positions[26].x+0 S2 A32])) src/gui.c:426 65 {*movhi_internal}
     (nil))

(insn 62 61 63 8 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:71 D.6269 ] [71])) src/gui.c:426 65 {*movhi_internal}
     (nil))

(insn 63 62 64 8 (set (reg/f:SI 0 ax [94])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:427 64 {*movsi_internal}
     (nil))

(insn 64 63 65 8 (set (reg:HI 0 ax [orig:72 D.6270 ] [72])
        (mem/s/j:HI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 342 [0x156])) [0 display_3(D)->positions[26].y+0 S2 A16])) src/gui.c:427 65 {*movhi_internal}
     (nil))

(insn 65 64 66 8 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:72 D.6270 ] [72])) src/gui.c:427 65 {*movhi_internal}
     (nil))

(insn 66 65 121 8 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:428 64 {*movsi_internal}
     (nil))

(jump_insn 121 66 122 8 (set (pc)
        (label_ref 107)) src/gui.c:428 606 {jump}
     (nil)
 -> 107)
;; End of basic block 8 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 [100.0%] 

(barrier 122 121 111)

;; Start of basic block ( 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74 75 76 77 78 95

;; Pred edge  13
(code_label 111 122 69 9 58 "" [1 uses])

(note 69 111 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 72 9 (set (reg:HI 0 ax [orig:74 D.6271 ] [74])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])) src/gui.c:430 65 {*movhi_internal}
     (nil))

(insn 72 70 74 9 (parallel [
            (set (reg:HI 0 ax [orig:76 D.6273 ] [76])
                (plus:HI (reg:HI 0 ax [orig:75 D.6272 ] [75])
                    (const_int -10 [0xfffffffffffffff6])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:430 256 {*addhi_1_lea}
     (nil))

(insn 74 72 75 9 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -18 [0xffffffffffffffee])) [0 pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:77 D.6274 ] [77])) src/gui.c:430 65 {*movhi_internal}
     (nil))

(insn 75 74 76 9 (set (reg/f:SI 0 ax [95])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:431 64 {*movsi_internal}
     (nil))

(insn 76 75 77 9 (set (reg:SI 0 ax [orig:78 D.6275 ] [78])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [95])
                (const_int 12 [0xc])) [0 game_13(D)->player2_checker+0 S4 A32])) src/gui.c:431 64 {*movsi_internal}
     (nil))

(insn 77 76 78 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:78 D.6275 ] [78])
            (const_int 0 [0]))) src/gui.c:431 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 78 77 79 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 92)
            (pc))) src/gui.c:431 591 {*jcc_1}
     (nil)
 -> 92)
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 79 80 96 97 98

;; Pred edge  9 (fallthru)
(note 79 78 80 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 10 (set (reg/f:SI 0 ax [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 81 80 82 10 (set (reg/f:SI 1 dx [orig:79 D.6278 ] [79])
        (mem/s/f/j:SI (reg/f:SI 0 ax [96]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 82 81 83 10 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 83 82 84 10 (set (reg/f:SI 0 ax [orig:80 D.6279 ] [80])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [97])
                (const_int 44 [0x2c])) [0 display_3(D)->green_checker+0 S4 A32])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 84 83 85 10 (parallel [
            (set (reg:SI 2 cx [98])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:432 252 {*addsi_1}
     (nil))

(insn 85 84 86 10 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [98])) src/gui.c:432 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 86 85 87 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:79 D.6278 ] [79])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 87 86 88 10 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(insn 88 87 89 10 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:80 D.6279 ] [80])) src/gui.c:432 64 {*movsi_internal}
     (nil))

(call_insn 89 88 123 10 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:432 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 123 89 124 10 (set (pc)
        (label_ref 104)) 606 {jump}
     (nil)
 -> 104)
;; End of basic block 10 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 [100.0%] 

(barrier 124 123 92)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 81 82 99 100 101

;; Pred edge  9
(code_label 92 124 93 11 56 "" [1 uses])

(note 93 92 94 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 11 (set (reg/f:SI 0 ax [99])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 95 94 96 11 (set (reg/f:SI 1 dx [orig:81 D.6281 ] [81])
        (mem/s/f/j:SI (reg/f:SI 0 ax [99]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 96 95 97 11 (set (reg/f:SI 0 ax [100])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 97 96 98 11 (set (reg/f:SI 0 ax [orig:82 D.6282 ] [82])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [100])
                (const_int 48 [0x30])) [0 display_3(D)->white_checker+0 S4 A32])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 98 97 99 11 (parallel [
            (set (reg:SI 2 cx [101])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:434 252 {*addsi_1}
     (nil))

(insn 99 98 100 11 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [101])) src/gui.c:434 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(insn 100 99 101 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:81 D.6281 ] [81])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 101 100 102 11 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(insn 102 101 103 11 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:82 D.6282 ] [82])) src/gui.c:434 64 {*movsi_internal}
     (nil))

(call_insn 103 102 104 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:434 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  11 (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 104 103 105 12 57 "" [1 uses])

(note 105 104 106 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 107 12 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:428 252 {*addsi_1}
     (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 12 8) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 102

;; Pred edge  12 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 107 106 108 13 55 "" [1 uses])

(note 108 107 109 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 13 (set (reg/f:SI 0 ax [102])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:428 64 {*movsi_internal}
     (nil))

(insn 110 109 112 13 (set (reg:SI 0 ax [orig:73 D.6283 ] [73])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [102])
                (const_int 212 [0xd4])) [0 gameState_7(D)->zones[26].nb_checkers+0 S4 A32])) src/gui.c:428 64 {*movsi_internal}
     (nil))

(insn 112 110 113 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:73 D.6283 ] [73])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32]))) src/gui.c:428 6 {*cmpsi_1}
     (nil))

(jump_insn 113 112 116 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 111)
            (pc))) src/gui.c:428 591 {*jcc_1}
     (nil)
 -> 111)
;; End of basic block 13 -> ( 9 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9
;; Succ edge  14 (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  13 (fallthru)
(note 116 113 125 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 14 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 125 116 0 NOTE_INSN_DELETED)


;; Function Display_Checkers (Display_Checkers)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 21 count 17 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a44 (r97,l0) best AREG, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a65 (r88,l0) best AREG, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r120,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a6(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a13(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a14(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a15(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a16(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a17(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a18(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a22(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a23(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a25(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a26(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a28(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a29(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a30(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a31(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a32(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a34(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a35(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a38(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a40(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a43(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a44(r97,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a45(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a46(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a48(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a49(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a53(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a54(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a55(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a56(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a57(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a58(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a59(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a60(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a61(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a62(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a63(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a64(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a65(r88,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 159(l0): point = 0
   Insn 158(l0): point = 2
   Insn 157(l0): point = 4
   Insn 155(l0): point = 7
   Insn 154(l0): point = 9
   Insn 150(l0): point = 12
   Insn 147(l0): point = 15
   Insn 146(l0): point = 17
   Insn 144(l0): point = 19
   Insn 143(l0): point = 21
   Insn 142(l0): point = 23
   Insn 139(l0): point = 26
   Insn 138(l0): point = 28
   Insn 137(l0): point = 30
   Insn 136(l0): point = 32
   Insn 135(l0): point = 34
   Insn 134(l0): point = 36
   Insn 133(l0): point = 38
   Insn 132(l0): point = 40
   Insn 131(l0): point = 42
   Insn 130(l0): point = 44
   Insn 129(l0): point = 46
   Insn 128(l0): point = 48
   Insn 127(l0): point = 50
   Insn 124(l0): point = 53
   Insn 123(l0): point = 55
   Insn 122(l0): point = 57
   Insn 121(l0): point = 59
   Insn 120(l0): point = 61
   Insn 119(l0): point = 63
   Insn 118(l0): point = 65
   Insn 117(l0): point = 67
   Insn 116(l0): point = 69
   Insn 115(l0): point = 71
   Insn 114(l0): point = 73
   Insn 113(l0): point = 75
   Insn 112(l0): point = 77
   Insn 111(l0): point = 79
   Insn 110(l0): point = 81
   Insn 109(l0): point = 83
   Insn 170(l0): point = 86
   Insn 104(l0): point = 88
   Insn 103(l0): point = 90
   Insn 102(l0): point = 92
   Insn 101(l0): point = 94
   Insn 100(l0): point = 96
   Insn 99(l0): point = 98
   Insn 98(l0): point = 100
   Insn 97(l0): point = 102
   Insn 96(l0): point = 104
   Insn 95(l0): point = 106
   Insn 94(l0): point = 108
   Insn 93(l0): point = 110
   Insn 92(l0): point = 112
   Insn 91(l0): point = 114
   Insn 90(l0): point = 116
   Insn 89(l0): point = 118
   Insn 87(l0): point = 121
   Insn 86(l0): point = 123
   Insn 85(l0): point = 125
   Insn 84(l0): point = 127
   Insn 83(l0): point = 129
   Insn 82(l0): point = 131
   Insn 81(l0): point = 133
   Insn 168(l0): point = 136
   Insn 76(l0): point = 138
   Insn 75(l0): point = 140
   Insn 74(l0): point = 142
   Insn 73(l0): point = 144
   Insn 72(l0): point = 146
   Insn 71(l0): point = 148
   Insn 70(l0): point = 150
   Insn 69(l0): point = 152
   Insn 68(l0): point = 154
   Insn 67(l0): point = 156
   Insn 66(l0): point = 158
   Insn 65(l0): point = 160
   Insn 64(l0): point = 162
   Insn 63(l0): point = 164
   Insn 62(l0): point = 166
   Insn 61(l0): point = 168
   Insn 60(l0): point = 170
   Insn 59(l0): point = 172
   Insn 58(l0): point = 174
   Insn 57(l0): point = 176
   Insn 56(l0): point = 178
   Insn 55(l0): point = 180
   Insn 54(l0): point = 182
   Insn 53(l0): point = 184
   Insn 52(l0): point = 186
   Insn 51(l0): point = 188
   Insn 50(l0): point = 190
   Insn 49(l0): point = 192
   Insn 48(l0): point = 194
   Insn 47(l0): point = 196
   Insn 46(l0): point = 198
   Insn 43(l0): point = 201
   Insn 42(l0): point = 203
   Insn 41(l0): point = 205
   Insn 40(l0): point = 207
   Insn 39(l0): point = 209
   Insn 166(l0): point = 212
   Insn 34(l0): point = 214
   Insn 33(l0): point = 216
   Insn 32(l0): point = 218
   Insn 31(l0): point = 220
   Insn 30(l0): point = 222
   Insn 28(l0): point = 225
   Insn 27(l0): point = 227
   Insn 26(l0): point = 229
   Insn 25(l0): point = 231
   Insn 24(l0): point = 233
   Insn 22(l0): point = 236
   Insn 21(l0): point = 238
   Insn 164(l0): point = 241
   Insn 17(l0): point = 243
   Insn 162(l0): point = 246
   Insn 13(l0): point = 248
   Insn 12(l0): point = 250
   Insn 11(l0): point = 252
   Insn 10(l0): point = 254
   Insn 9(l0): point = 256
   Insn 8(l0): point = 258
   Insn 7(l0): point = 260
   Insn 6(l0): point = 262
   Insn 5(l0): point = 264
 a0(r124): [3..4]
 a1(r59): [18..19]
 a2(r122): [20..23]
 a3(r123): [20..21]
 a4(r121): [31..32]
 a5(r120 [0]): [35..36]
 a5(r120 [1]): [35..36]
 a6(r87): [39..44]
 a7(r119): [41..42]
 a8(r86): [45..46]
 a9(r117): [47..50]
 a10(r118): [47..48]
 a11(r85): [54..55]
 a12(r84): [56..57]
 a13(r83): [58..59]
 a14(r81): [58..75]
 a15(r115): [64..69] [60..61]
 a16(r116): [62..63]
 a17(r82): [66..71]
 a18(r114): [72..73]
 a19(r80): [76..77]
 a20(r111): [78..83]
 a21(r112): [78..79]
 a22(r113): [80..81]
 a23(r79): [89..90]
 a24(r78): [91..92]
 a25(r77): [93..94]
 a26(r75): [93..110]
 a27(r109): [99..104] [95..96]
 a28(r110): [97..98]
 a29(r76): [101..106]
 a30(r108): [107..108]
 a31(r74): [111..112]
 a32(r105): [113..118]
 a33(r106): [113..114]
 a34(r107): [115..116]
 a35(r73): [126..127]
 a36(r102): [128..133]
 a37(r103): [128..129]
 a38(r104): [130..131]
 a39(r101): [141..142]
 a40(r100): [147..148]
 a41(r72): [153..158]
 a42(r99): [155..156]
 a43(r98): [159..160]
 a44(r97): [163..164]
 a45(r71): [169..178]
 a46(r96): [171..172]
 a47(r95): [175..176]
 a48(r94): [179..180]
 a49(r93): [185..186]
 a50(r70): [189..192]
 a51(r69): [191..194]
 a52(r91): [195..198]
 a53(r92): [195..196]
 a54(r68): [202..203]
 a55(r67): [204..205]
 a56(r66): [206..207]
 a57(r65): [208..209]
 a58(r64): [215..216]
 a59(r63): [217..218]
 a60(r62): [219..220]
 a61(r61): [221..222]
 a62(r60): [228..229]
 a63(r89): [230..233]
 a64(r90): [230..231]
 a65(r88): [259..260]
Compressing live ranges: from 267 to 106 - 39%
Ranges after the compression:
 a0(r124): [0..1]
 a1(r59): [2..3]
 a2(r122): [4..5]
 a3(r123): [4..5]
 a4(r121): [6..7]
 a5(r120 [0]): [8..9]
 a5(r120 [1]): [8..9]
 a6(r87): [10..11]
 a7(r119): [10..11]
 a8(r86): [12..13]
 a9(r117): [14..15]
 a10(r118): [14..15]
 a11(r85): [16..17]
 a12(r84): [18..19]
 a13(r83): [20..21]
 a14(r81): [20..29]
 a15(r115): [26..27] [22..23]
 a16(r116): [24..25]
 a17(r82): [26..27]
 a18(r114): [28..29]
 a19(r80): [30..31]
 a20(r111): [32..35]
 a21(r112): [32..33]
 a22(r113): [34..35]
 a23(r79): [36..37]
 a24(r78): [38..39]
 a25(r77): [40..41]
 a26(r75): [40..49]
 a27(r109): [46..47] [42..43]
 a28(r110): [44..45]
 a29(r76): [46..47]
 a30(r108): [48..49]
 a31(r74): [50..51]
 a32(r105): [52..55]
 a33(r106): [52..53]
 a34(r107): [54..55]
 a35(r73): [56..57]
 a36(r102): [58..61]
 a37(r103): [58..59]
 a38(r104): [60..61]
 a39(r101): [62..63]
 a40(r100): [64..65]
 a41(r72): [66..67]
 a42(r99): [66..67]
 a43(r98): [68..69]
 a44(r97): [70..71]
 a45(r71): [72..75]
 a46(r96): [72..73]
 a47(r95): [74..75]
 a48(r94): [76..77]
 a49(r93): [78..79]
 a50(r70): [80..81]
 a51(r69): [80..81]
 a52(r91): [82..83]
 a53(r92): [82..83]
 a54(r68): [84..85]
 a55(r67): [86..87]
 a56(r66): [88..89]
 a57(r65): [90..91]
 a58(r64): [92..93]
 a59(r63): [94..95]
 a60(r62): [96..97]
 a61(r61): [98..99]
 a62(r60): [100..101]
 a63(r89): [102..103]
 a64(r90): [102..103]
 a65(r88): [104..105]
  regions=3, blocks=17, points=106
    allocnos=66 (big 1), copies=0, conflicts=0, ranges=69
Disposition:
    1:r59  l0     0   62:r60  l0     0   61:r61  l0     0   60:r62  l0     0
   59:r63  l0     0   58:r64  l0     0   57:r65  l0     0   56:r66  l0     0
   55:r67  l0     0   54:r68  l0     0   51:r69  l0     1   50:r70  l0     0
   45:r71  l0     0   41:r72  l0     0   35:r73  l0     0   31:r74  l0     0
   26:r75  l0     2   29:r76  l0     1   25:r77  l0     0   24:r78  l0     0
   23:r79  l0     0   19:r80  l0     0   14:r81  l0     2   17:r82  l0     1
   13:r83  l0     0   12:r84  l0     0   11:r85  l0     0    8:r86  l0     0
    6:r87  l0     0   65:r88  l0     0   63:r89  l0     0   64:r90  l0     1
   52:r91  l0     0   53:r92  l0     1   49:r93  l0     0   48:r94  l0     0
   47:r95  l0     1   46:r96  l0     1   44:r97  l0     0   43:r98  l0     0
   42:r99  l0     1   40:r100 l0     0   39:r101 l0     0   36:r102 l0     0
   37:r103 l0     1   38:r104 l0     1   32:r105 l0     0   33:r106 l0     1
   34:r107 l0     1   30:r108 l0     0   27:r109 l0     0   28:r110 l0     0
   20:r111 l0     0   21:r112 l0     1   22:r113 l0     1   18:r114 l0     0
   15:r115 l0     0   16:r116 l0     0    9:r117 l0     0   10:r118 l0     1
    7:r119 l0     1    5:r120 l0     0    4:r121 l0     0    2:r122 l0     0
    3:r123 l0     1    0:r124 l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 0
insn=7, live_throughout: 7, dead_or_set: 0, 88
insn=8, live_throughout: 7, dead_or_set: 88
insn=9, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 
insn=162, live_throughout: 7, dead_or_set: 
insn=153, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 
insn=164, live_throughout: 7, dead_or_set: 
insn=145, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 89
insn=25, live_throughout: 7, 89, dead_or_set: 90
insn=26, live_throughout: 7, dead_or_set: 60, 89, 90
insn=27, live_throughout: 7, dead_or_set: 60
insn=28, live_throughout: 7, dead_or_set: 
insn=30, live_throughout: 7, dead_or_set: 61
insn=31, live_throughout: 7, dead_or_set: 61, 62
insn=32, live_throughout: 7, dead_or_set: 62, 63
insn=33, live_throughout: 7, dead_or_set: 63, 64
insn=34, live_throughout: 7, dead_or_set: 64
insn=166, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 65
insn=40, live_throughout: 7, dead_or_set: 65, 66
insn=41, live_throughout: 7, dead_or_set: 66, 67
insn=42, live_throughout: 7, dead_or_set: 67, 68
insn=43, live_throughout: 7, dead_or_set: 68
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 91
insn=47, live_throughout: 7, 91, dead_or_set: 92
insn=48, live_throughout: 7, dead_or_set: 69, 91, 92
insn=49, live_throughout: 7, 69, dead_or_set: 70
insn=50, live_throughout: 7, 70, dead_or_set: 69
insn=51, live_throughout: 7, dead_or_set: 70
insn=52, live_throughout: 7, dead_or_set: 93
insn=53, live_throughout: 7, dead_or_set: 93
insn=54, live_throughout: 7, dead_or_set: 0
insn=55, live_throughout: 7, dead_or_set: 94
insn=56, live_throughout: 7, dead_or_set: 71, 94
insn=57, live_throughout: 7, 71, dead_or_set: 95
insn=58, live_throughout: 7, 71, dead_or_set: 95
insn=59, live_throughout: 7, 71, dead_or_set: 96
insn=60, live_throughout: 7, 71, dead_or_set: 96
insn=61, live_throughout: 7, dead_or_set: 71
insn=62, live_throughout: 7, dead_or_set: 0
insn=63, live_throughout: 7, dead_or_set: 0, 97
insn=64, live_throughout: 7, dead_or_set: 97
insn=65, live_throughout: 7, dead_or_set: 98
insn=66, live_throughout: 7, dead_or_set: 72, 98
insn=67, live_throughout: 7, 72, dead_or_set: 99
insn=68, live_throughout: 7, 72, dead_or_set: 99
insn=69, live_throughout: 7, dead_or_set: 72
insn=70, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 100
insn=72, live_throughout: 7, dead_or_set: 100
insn=73, live_throughout: 7, dead_or_set: 0
insn=74, live_throughout: 7, dead_or_set: 101
insn=75, live_throughout: 7, dead_or_set: 101
insn=76, live_throughout: 7, dead_or_set: 
insn=168, live_throughout: 7, dead_or_set: 
insn=79, live_throughout: 7, dead_or_set: 
insn=81, live_throughout: 7, dead_or_set: 102
insn=82, live_throughout: 7, 102, dead_or_set: 104
insn=83, live_throughout: 7, 102, dead_or_set: 103, 104
insn=84, live_throughout: 7, dead_or_set: 73, 102, 103
insn=85, live_throughout: 7, dead_or_set: 73
insn=86, live_throughout: 7, dead_or_set: 
insn=87, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 105
insn=90, live_throughout: 7, 105, dead_or_set: 107
insn=91, live_throughout: 7, 105, dead_or_set: 106, 107
insn=92, live_throughout: 7, dead_or_set: 74, 105, 106
insn=93, live_throughout: 7, dead_or_set: 74, 75
insn=94, live_throughout: 7, 75, dead_or_set: 108
insn=95, live_throughout: 7, 75, dead_or_set: 76, 108
insn=96, live_throughout: 7, 75, 76, dead_or_set: 109
insn=97, live_throughout: 7, 75, 76, dead_or_set: 109
insn=98, live_throughout: 7, 75, dead_or_set: 76, 109
insn=99, live_throughout: 7, 75, dead_or_set: 109, 110
insn=100, live_throughout: 7, 75, dead_or_set: 109, 110
insn=101, live_throughout: 7, 75, dead_or_set: 77, 109
insn=102, live_throughout: 7, dead_or_set: 75, 77, 78
insn=103, live_throughout: 7, dead_or_set: 78, 79
insn=104, live_throughout: 7, dead_or_set: 79
insn=170, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 111
insn=110, live_throughout: 7, 111, dead_or_set: 113
insn=111, live_throughout: 7, 111, dead_or_set: 112, 113
insn=112, live_throughout: 7, dead_or_set: 80, 111, 112
insn=113, live_throughout: 7, dead_or_set: 80, 81
insn=114, live_throughout: 7, 81, dead_or_set: 114
insn=115, live_throughout: 7, 81, dead_or_set: 82, 114
insn=116, live_throughout: 7, 81, 82, dead_or_set: 115
insn=117, live_throughout: 7, 81, 82, dead_or_set: 115
insn=118, live_throughout: 7, 81, dead_or_set: 82, 115
insn=119, live_throughout: 7, 81, dead_or_set: 115, 116
insn=120, live_throughout: 7, 81, dead_or_set: 115, 116
insn=121, live_throughout: 7, 81, dead_or_set: 83, 115
insn=122, live_throughout: 7, dead_or_set: 81, 83, 84
insn=123, live_throughout: 7, dead_or_set: 84, 85
insn=124, live_throughout: 7, dead_or_set: 85
insn=125, live_throughout: 7, dead_or_set: 
insn=127, live_throughout: 7, dead_or_set: 117
insn=128, live_throughout: 7, 117, dead_or_set: 118
insn=129, live_throughout: 7, dead_or_set: 86, 117, 118
insn=130, live_throughout: 7, dead_or_set: 86, 87
insn=131, live_throughout: 7, 87, dead_or_set: 119
insn=132, live_throughout: 7, 87, dead_or_set: 119
insn=133, live_throughout: 7, dead_or_set: 87
insn=134, live_throughout: 7, dead_or_set: 120
insn=135, live_throughout: 7, dead_or_set: 120
insn=136, live_throughout: 7, dead_or_set: 121
insn=137, live_throughout: 7, dead_or_set: 121
insn=138, live_throughout: 7, dead_or_set: 
insn=139, live_throughout: 7, dead_or_set: 
insn=140, live_throughout: 7, dead_or_set: 
insn=142, live_throughout: 7, dead_or_set: 122
insn=143, live_throughout: 7, 122, dead_or_set: 123
insn=144, live_throughout: 7, dead_or_set: 59, 122, 123
insn=146, live_throughout: 7, dead_or_set: 59
insn=147, live_throughout: 7, dead_or_set: 
insn=148, live_throughout: 7, dead_or_set: 
insn=150, live_throughout: 7, dead_or_set: 
insn=151, live_throughout: 7, dead_or_set: 
insn=154, live_throughout: 7, dead_or_set: 
insn=155, live_throughout: 7, dead_or_set: 
insn=157, live_throughout: 7, dead_or_set: 124
insn=158, live_throughout: 7, dead_or_set: 124
insn=159, live_throughout: 7, dead_or_set: 
changing reg in insn 144
changing reg in insn 146
changing reg in insn 26
changing reg in insn 27
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 50
changing reg in insn 49
changing reg in insn 51
changing reg in insn 56
changing reg in insn 61
changing reg in insn 66
changing reg in insn 69
changing reg in insn 84
changing reg in insn 85
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 102
changing reg in insn 95
changing reg in insn 98
changing reg in insn 96
changing reg in insn 100
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 103
changing reg in insn 104
changing reg in insn 112
changing reg in insn 113
changing reg in insn 113
changing reg in insn 122
changing reg in insn 115
changing reg in insn 118
changing reg in insn 116
changing reg in insn 120
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 129
changing reg in insn 130
changing reg in insn 130
changing reg in insn 133
changing reg in insn 7
changing reg in insn 8
changing reg in insn 24
changing reg in insn 26
changing reg in insn 25
changing reg in insn 26
changing reg in insn 46
changing reg in insn 48
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 53
changing reg in insn 55
changing reg in insn 56
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 60
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 75
changing reg in insn 81
changing reg in insn 84
changing reg in insn 83
changing reg in insn 84
changing reg in insn 82
changing reg in insn 83
changing reg in insn 89
changing reg in insn 92
changing reg in insn 91
changing reg in insn 92
changing reg in insn 90
changing reg in insn 91
changing reg in insn 94
changing reg in insn 100
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 109
changing reg in insn 112
changing reg in insn 111
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 120
changing reg in insn 118
changing reg in insn 117
changing reg in insn 116
changing reg in insn 121
changing reg in insn 119
changing reg in insn 118
changing reg in insn 117
changing reg in insn 119
changing reg in insn 120
changing reg in insn 127
changing reg in insn 129
changing reg in insn 128
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 142
changing reg in insn 144
changing reg in insn 143
changing reg in insn 144
changing reg in insn 157
changing reg in insn 158
Spilling for insn 102.
Using reg 1 for reload 0

Reloads for insn # 102
Reload 0: reload_in (HI) = (reg:HI 2 cx [orig:75 D.6239 ] [75])
	reload_out (HI) = (reg:HI 0 ax [orig:78 D.6242 ] [78])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:HI 2 cx [orig:75 D.6239 ] [75])
	reload_out_reg: (reg:HI 0 ax [orig:78 D.6242 ] [78])
	reload_reg_rtx: (reg:HI 1 dx)
deleting insn with uid = 7.
deleting insn with uid = 31.
deleting insn with uid = 33.
deleting insn with uid = 40.
deleting insn with uid = 42.
deleting insn with uid = 63.
deleting insn with uid = 100.
deleting insn with uid = 101.
deleting insn with uid = 103.
deleting insn with uid = 120.
deleting insn with uid = 121.
deleting insn with uid = 123.
deleting insn with uid = 130.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 54.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 73.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 159.


Display_Checkers

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={48d,42u} r1={28d,22u,2e} r2={10d,2u} r6={1d,67u} r7={1d,40u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r17={28d,5u} r18={7d} r19={7d} r20={1d,1u,4e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} 
;;    total ref usage 596{411d,179u,6e} in 115{108 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 88

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 2 [0x2])) src/gui.c:442 64 {*movsi_internal}
     (nil))

(call_insn 6 5 8 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:442 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 8 6 9 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 tmp+0 S4 A32])
        (reg/f:SI 0 ax [88])) src/gui.c:442 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 color.r+0 S1 A32])
        (const_int 0 [0])) src/gui.c:443 66 {*movqi_internal}
     (nil))

(insn 10 9 11 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -11 [0xfffffffffffffff5])) [0 color.g+0 S1 A8])
        (const_int 0 [0])) src/gui.c:443 66 {*movqi_internal}
     (nil))

(insn 11 10 12 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -10 [0xfffffffffffffff6])) [0 color.b+0 S1 A16])
        (const_int 0 [0])) src/gui.c:443 66 {*movqi_internal}
     (nil))

(insn 12 11 13 2 (set (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -9 [0xfffffffffffffff7])) [0 color.unused+0 S1 A8])
        (const_int 0 [0])) src/gui.c:443 66 {*movqi_internal}
     (nil))

(insn 13 12 162 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:445 64 {*movsi_internal}
     (nil))

(jump_insn 162 13 163 2 (set (pc)
        (label_ref 151)) src/gui.c:445 606 {jump}
     (nil)
 -> 151)
;; End of basic block 2 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 [100.0%] 

(barrier 163 162 153)

;; Start of basic block ( 15) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  15
(code_label 153 163 16 3 69 "" [1 uses])

(note 16 153 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 164 3 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 0 [0])) src/gui.c:447 64 {*movsi_internal}
     (nil))

(jump_insn 164 17 165 3 (set (pc)
        (label_ref 140)) src/gui.c:447 606 {jump}
     (nil)
 -> 140)
;; End of basic block 3 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 [100.0%] 

(barrier 165 164 145)

;; Start of basic block ( 13) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  13
(code_label 145 165 20 4 68 "" [1 uses])

(note 20 145 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 5 [0x5]))) src/gui.c:449 6 {*cmpsi_1}
     (nil))

(jump_insn 22 21 23 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) src/gui.c:449 591 {*jcc_1}
     (nil)
 -> 79)
;; End of basic block 4 -> ( 5 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  9

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 89 90

;; Pred edge  4 (fallthru)
(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 25 5 (set (reg/f:SI 0 ax [89])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:452 64 {*movsi_internal}
     (nil))

(insn 25 24 26 5 (set (reg:SI 1 dx [90])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:452 64 {*movsi_internal}
     (nil))

(insn 26 25 27 5 (set (reg:SI 0 ax [orig:60 D.6219 ] [60])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [90])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [89]))
                (const_int 4 [0x4])) [0 gameState_6(D)->zones[i_1].nb_checkers+0 S4 A32])) src/gui.c:452 64 {*movsi_internal}
     (nil))

(insn 27 26 28 5 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:60 D.6219 ] [60])
            (const_int 9 [0x9]))) src/gui.c:452 6 {*cmpsi_1}
     (nil))

(jump_insn 28 27 29 5 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) src/gui.c:452 591 {*jcc_1}
     (nil)
 -> 37)
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 61 62 63 64

;; Pred edge  5 (fallthru)
(note 29 28 30 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 32 6 (set (reg:HI 0 ax [orig:61 D.6222 ] [61])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos.x+0 S2 A32])) src/gui.c:454 65 {*movhi_internal}
     (nil))

(insn 32 30 34 6 (parallel [
            (set (reg:HI 0 ax [orig:63 D.6224 ] [63])
                (plus:HI (reg:HI 0 ax [orig:62 D.6223 ] [62])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:454 256 {*addhi_1_lea}
     (nil))

(insn 34 32 166 6 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:64 D.6225 ] [64])) src/gui.c:454 65 {*movhi_internal}
     (nil))

(jump_insn 166 34 167 6 (set (pc)
        (label_ref 44)) 606 {jump}
     (nil)
 -> 44)
;; End of basic block 6 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 [100.0%] 

(barrier 167 166 37)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68

;; Pred edge  5
(code_label 37 167 38 7 63 "" [1 uses])

(note 38 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 41 7 (set (reg:HI 0 ax [orig:65 D.6227 ] [65])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos.x+0 S2 A32])) src/gui.c:457 65 {*movhi_internal}
     (nil))

(insn 41 39 43 7 (parallel [
            (set (reg:HI 0 ax [orig:67 D.6229 ] [67])
                (plus:HI (reg:HI 0 ax [orig:66 D.6228 ] [66])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:457 256 {*addhi_1_lea}
     (nil))

(insn 43 41 44 7 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:68 D.6230 ] [68])) src/gui.c:457 65 {*movhi_internal}
     (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 69 70 71 72 91 92 93 94 95 96 97 98 99 100 101

;; Pred edge  7 (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 44 43 45 8 64 "" [1 uses])

(note 45 44 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 8 (set (reg/f:SI 0 ax [91])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 47 46 48 8 (set (reg:SI 1 dx [92])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 48 47 49 8 (set (reg:SI 1 dx [orig:69 D.6231 ] [69])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [92])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [91]))
                (const_int 4 [0x4])) [0 gameState_6(D)->zones[i_1].nb_checkers+0 S4 A32])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 49 48 50 8 (set (reg/f:SI 0 ax [orig:70 D.6232 ] [70])
        (symbol_ref/f:SI ("*.LC20") [flags 0x2]  <var_decl 0x408fdea0 *.LC20>)) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 50 49 51 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [orig:69 D.6231 ] [69])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 51 50 52 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:70 D.6232 ] [70])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 52 51 53 8 (set (reg/f:SI 0 ax [93])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 tmp+0 S4 A32])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(insn 53 52 54 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [93])) src/gui.c:459 64 {*movsi_internal}
     (nil))

(call_insn 54 53 55 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("sprintf") [flags 0x41]  <function_decl 0x406b4200 sprintf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:459 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 55 54 56 8 (set (reg/f:SI 0 ax [94])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 56 55 57 8 (set (reg/f:SI 0 ax [orig:71 D.6233 ] [71])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [94])
                (const_int 36 [0x24])) [0 display_19(D)->font+0 S4 A32])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 57 56 58 8 (set (reg:SI 1 dx [95])
        (mem/s/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 color+0 S4 A32])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 58 57 59 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 1 dx [95])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 59 58 60 8 (set (reg/f:SI 1 dx [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 tmp+0 S4 A32])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 60 59 61 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 1 dx [96])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 61 60 62 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:71 D.6233 ] [71])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(call_insn 62 61 64 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("TTF_RenderText_Blended") [flags 0x41]  <function_decl 0x40801980 TTF_RenderText_Blended>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:460 927 {*call_value_0}
     (nil)
    (nil))

(insn 64 62 65 8 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 num+0 S4 A32])
        (reg:SI 0 ax [97])) src/gui.c:460 64 {*movsi_internal}
     (nil))

(insn 65 64 66 8 (set (reg/f:SI 0 ax [98])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(insn 66 65 67 8 (set (reg/f:SI 0 ax [orig:72 D.6234 ] [72])
        (mem/s/f/j:SI (reg/f:SI 0 ax [98]) [0 display_19(D)->screen+0 S4 A32])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(insn 67 66 68 8 (parallel [
            (set (reg:SI 1 dx [99])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:461 252 {*addsi_1}
     (nil))

(insn 68 67 69 8 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 1 dx [99])) src/gui.c:461 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))

(insn 69 68 70 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [orig:72 D.6234 ] [72])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(insn 70 69 71 8 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(insn 71 70 72 8 (set (reg/f:SI 0 ax [100])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 num+0 S4 A32])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(insn 72 71 73 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [100])) src/gui.c:461 64 {*movsi_internal}
     (nil))

(call_insn 73 72 74 8 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:461 927 {*call_value_0}
     (nil)
    (nil))

(insn 74 73 75 8 (set (reg/f:SI 0 ax [101])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 num+0 S4 A32])) src/gui.c:462 64 {*movsi_internal}
     (nil))

(insn 75 74 76 8 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [101])) src/gui.c:462 64 {*movsi_internal}
     (nil))

(call_insn 76 75 168 8 (call (mem:QI (symbol_ref:SI ("SDL_FreeSurface") [flags 0x41]  <function_decl 0x407d1000 SDL_FreeSurface>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:462 618 {*call_0}
     (nil)
    (nil))

(jump_insn 168 76 169 8 (set (pc)
        (label_ref 148)) src/gui.c:463 606 {jump}
     (nil)
 -> 148)
;; End of basic block 8 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 [100.0%] 

(barrier 169 168 79)

;; Start of basic block ( 4) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 102 103 104

;; Pred edge  4
(code_label 79 169 80 9 62 "" [1 uses])

(note 80 79 81 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 81 80 82 9 (set (reg/f:SI 0 ax [102])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:467 64 {*movsi_internal}
     (nil))

(insn 82 81 83 9 (set (reg:SI 1 dx [104])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:467 64 {*movsi_internal}
     (nil))

(insn 83 82 84 9 (parallel [
            (set (reg:SI 1 dx [103])
                (plus:SI (reg:SI 1 dx [104])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:467 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 84 83 85 9 (set (reg:HI 0 ax [orig:73 D.6235 ] [73])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [103])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [102]))
                (const_int 4 [0x4])) [0 display_19(D)->positions[i_1].x+0 S2 A32])) src/gui.c:467 65 {*movhi_internal}
     (nil))

(insn 85 84 86 9 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:73 D.6235 ] [73])) src/gui.c:467 65 {*movhi_internal}
     (nil))

(insn 86 85 87 9 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 11 [0xb]))) src/gui.c:468 6 {*cmpsi_1}
     (nil))

(jump_insn 87 86 88 9 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 107)
            (pc))) src/gui.c:468 591 {*jcc_1}
     (nil)
 -> 107)
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  11

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74 75 76 77 78 79 105 106 107 108 109 110

;; Pred edge  9 (fallthru)
(note 88 87 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 89 88 90 10 (set (reg/f:SI 0 ax [105])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:469 64 {*movsi_internal}
     (nil))

(insn 90 89 91 10 (set (reg:SI 1 dx [107])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:469 64 {*movsi_internal}
     (nil))

(insn 91 90 92 10 (parallel [
            (set (reg:SI 1 dx [106])
                (plus:SI (reg:SI 1 dx [107])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:469 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 92 91 93 10 (set (reg:HI 0 ax [orig:74 D.6238 ] [74])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [106])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [105]))
                (const_int 6 [0x6])) [0 display_19(D)->positions[i_1].y+0 S2 A16])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 93 92 94 10 (set (reg:HI 2 cx [orig:75 D.6239 ] [75])
        (reg:HI 0 ax [orig:74 D.6238 ] [74])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 94 93 95 10 (set (reg:SI 0 ax [108])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) src/gui.c:469 64 {*movsi_internal}
     (nil))

(insn 95 94 96 10 (set (reg:HI 1 dx [orig:76 D.6240 ] [76])
        (reg:HI 0 ax [108])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 96 95 97 10 (set (reg:HI 0 ax [109])
        (reg:HI 1 dx [orig:76 D.6240 ] [76])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 97 96 98 10 (parallel [
            (set (reg:HI 0 ax [109])
                (ashift:HI (reg:HI 0 ax [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:469 501 {*ashlhi3_1_lea}
     (nil))

(insn 98 97 99 10 (parallel [
            (set (reg:HI 0 ax [109])
                (plus:HI (reg:HI 0 ax [109])
                    (reg:HI 1 dx [orig:76 D.6240 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:469 256 {*addhi_1_lea}
     (expr_list:REG_EQUAL (mult:HI (reg:HI 1 dx [orig:76 D.6240 ] [76])
            (const_int 5 [0x5]))
        (nil)))

(insn 99 98 173 10 (parallel [
            (set (reg:HI 0 ax [110])
                (ashift:HI (reg:HI 0 ax [109])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:469 501 {*ashlhi3_1_lea}
     (nil))

(insn 173 99 102 10 (set (reg:HI 1 dx)
        (reg:HI 2 cx [orig:75 D.6239 ] [75])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 102 173 174 10 (parallel [
            (set (reg:HI 1 dx)
                (minus:HI (reg:HI 1 dx)
                    (reg:HI 0 ax [orig:77 D.6241 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:469 290 {*subhi_1}
     (nil))

(insn 174 102 104 10 (set (reg:HI 0 ax [orig:78 D.6242 ] [78])
        (reg:HI 1 dx)) src/gui.c:469 65 {*movhi_internal}
     (nil))

(insn 104 174 170 10 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -34 [0xffffffffffffffde])) [0 new_pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:79 D.6243 ] [79])) src/gui.c:469 65 {*movhi_internal}
     (nil))

(jump_insn 170 104 171 10 (set (pc)
        (label_ref 125)) 606 {jump}
     (nil)
 -> 125)
;; End of basic block 10 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 [100.0%] 

(barrier 171 170 107)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 80 81 82 83 84 85 111 112 113 114 115 116

;; Pred edge  9
(code_label 107 171 108 11 66 "" [1 uses])

(note 108 107 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 11 (set (reg/f:SI 0 ax [111])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:471 64 {*movsi_internal}
     (nil))

(insn 110 109 111 11 (set (reg:SI 1 dx [113])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:471 64 {*movsi_internal}
     (nil))

(insn 111 110 112 11 (parallel [
            (set (reg:SI 1 dx [112])
                (plus:SI (reg:SI 1 dx [113])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:471 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 112 111 113 11 (set (reg:HI 0 ax [orig:80 D.6245 ] [80])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [112])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [111]))
                (const_int 6 [0x6])) [0 display_19(D)->positions[i_1].y+0 S2 A16])) src/gui.c:471 65 {*movhi_internal}
     (nil))

(insn 113 112 114 11 (set (reg:HI 2 cx [orig:81 D.6246 ] [81])
        (reg:HI 0 ax [orig:80 D.6245 ] [80])) src/gui.c:471 65 {*movhi_internal}
     (nil))

(insn 114 113 115 11 (set (reg:SI 0 ax [114])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) src/gui.c:471 64 {*movsi_internal}
     (nil))

(insn 115 114 116 11 (set (reg:HI 1 dx [orig:82 D.6247 ] [82])
        (reg:HI 0 ax [114])) src/gui.c:471 65 {*movhi_internal}
     (nil))

(insn 116 115 117 11 (set (reg:HI 0 ax [115])
        (reg:HI 1 dx [orig:82 D.6247 ] [82])) src/gui.c:471 65 {*movhi_internal}
     (nil))

(insn 117 116 118 11 (parallel [
            (set (reg:HI 0 ax [115])
                (ashift:HI (reg:HI 0 ax [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:471 501 {*ashlhi3_1_lea}
     (nil))

(insn 118 117 119 11 (parallel [
            (set (reg:HI 0 ax [115])
                (plus:HI (reg:HI 0 ax [115])
                    (reg:HI 1 dx [orig:82 D.6247 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:471 256 {*addhi_1_lea}
     (expr_list:REG_EQUAL (mult:HI (reg:HI 1 dx [orig:82 D.6247 ] [82])
            (const_int 5 [0x5]))
        (nil)))

(insn 119 118 122 11 (parallel [
            (set (reg:HI 0 ax [116])
                (ashift:HI (reg:HI 0 ax [115])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:471 501 {*ashlhi3_1_lea}
     (nil))

(insn 122 119 124 11 (parallel [
            (set (reg:HI 0 ax [orig:84 D.6249 ] [84])
                (plus:HI (reg:HI 2 cx [orig:81 D.6246 ] [81])
                    (reg:HI 0 ax [orig:83 D.6248 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:471 256 {*addhi_1_lea}
     (nil))

(insn 124 122 125 11 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -34 [0xffffffffffffffde])) [0 new_pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:85 D.6250 ] [85])) src/gui.c:471 65 {*movhi_internal}
     (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 86 87 117 118 119 120 121

;; Pred edge  11 (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 125 124 126 12 67 "" [1 uses])

(note 126 125 127 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 128 12 (set (reg/f:SI 0 ax [117])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 128 127 129 12 (set (reg:SI 1 dx [118])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 129 128 131 12 (set (reg:SI 0 ax [orig:86 D.6251 ] [86])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [118])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [117])) [0 gameState_6(D)->zones[i_1].player+0 S4 A32])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 131 129 132 12 (set (reg/f:SI 1 dx [119])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 game+0 S4 A32])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 132 131 133 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg/f:SI 1 dx [119])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 133 132 134 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 0 ax [orig:87 D.6252 ] [87])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 134 133 135 12 (set (reg:DI 0 ax [120])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 new_pos+0 S8 A32])) src/gui.c:472 63 {*movdi_internal}
     (nil))

(insn 135 134 136 12 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DI 0 ax [120])) src/gui.c:472 63 {*movdi_internal}
     (nil))

(insn 136 135 137 12 (set (reg/f:SI 0 ax [121])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(insn 137 136 138 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [121])) src/gui.c:472 64 {*movsi_internal}
     (nil))

(call_insn 138 137 139 12 (call (mem:QI (symbol_ref:SI ("Checker_Draw") [flags 0x3]  <function_decl 0x4081a200 Checker_Draw>) [0 S1 A8])
        (const_int 20 [0x14])) src/gui.c:472 618 {*call_0}
     (nil)
    (nil))

(insn 139 138 140 12 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:447 252 {*addsi_1}
     (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 12 3) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 122 123

;; Pred edge  12 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 140 139 141 13 61 "" [1 uses])

(note 141 140 142 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 142 141 143 13 (set (reg/f:SI 0 ax [122])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:447 64 {*movsi_internal}
     (nil))

(insn 143 142 144 13 (set (reg:SI 1 dx [123])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:447 64 {*movsi_internal}
     (nil))

(insn 144 143 146 13 (set (reg:SI 0 ax [orig:59 D.6253 ] [59])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [123])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [122]))
                (const_int 4 [0x4])) [0 gameState_6(D)->zones[i_1].nb_checkers+0 S4 A32])) src/gui.c:447 64 {*movsi_internal}
     (nil))

(insn 146 144 147 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:59 D.6253 ] [59])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32]))) src/gui.c:447 6 {*cmpsi_1}
     (nil))

(jump_insn 147 146 148 13 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 145)
            (pc))) src/gui.c:447 591 {*jcc_1}
     (nil)
 -> 145)
;; End of basic block 13 -> ( 4 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4
;; Succ edge  14 (fallthru)

;; Start of basic block ( 13 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  13 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 148 147 149 14 65 "" [1 uses])

(note 149 148 150 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 150 149 151 14 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:445 252 {*addsi_1}
     (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)

;; Start of basic block ( 14 2) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  14 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 151 150 152 15 60 "" [1 uses])

(note 152 151 154 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 154 152 155 15 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 23 [0x17]))) src/gui.c:445 6 {*cmpsi_1}
     (nil))

(jump_insn 155 154 156 15 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 153)
            (pc))) src/gui.c:445 591 {*jcc_1}
     (nil)
 -> 153)
;; End of basic block 15 -> ( 3 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  16 (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 124

;; Pred edge  15 (fallthru)
(note 156 155 157 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 157 156 158 16 (set (reg/f:SI 0 ax [124])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 tmp+0 S4 A32])) src/gui.c:477 64 {*movsi_internal}
     (nil))

(insn 158 157 159 16 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [124])) src/gui.c:477 64 {*movsi_internal}
     (nil))

(call_insn 159 158 172 16 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:477 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;; End of basic block 16 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 172 159 0 NOTE_INSN_DELETED)


;; Function Checker_Move (Checker_Move)

verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 406.
verify found no changes in insn with uid = 420.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 722.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 73 n_edges 112 count 100 (  1.4)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r450: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a157 (r450,l0) best Q_REGS, cover GENERAL_REGS
    r449: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r449,l0) best GENERAL_REGS, cover GENERAL_REGS
    r448: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r448,l0) best GENERAL_REGS, cover GENERAL_REGS
    r447: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r447,l0) best GENERAL_REGS, cover GENERAL_REGS
    r446: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r446,l0) best GENERAL_REGS, cover GENERAL_REGS
    r445: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r445,l0) best GENERAL_REGS, cover GENERAL_REGS
    r444: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r444,l0) best GENERAL_REGS, cover GENERAL_REGS
    r443: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r443,l0) best GENERAL_REGS, cover GENERAL_REGS
    r442: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r442,l0) best GENERAL_REGS, cover GENERAL_REGS
    r441: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r441,l0) best GENERAL_REGS, cover GENERAL_REGS
    r440: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r440,l0) best GENERAL_REGS, cover GENERAL_REGS
    r439: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r439,l0) best GENERAL_REGS, cover GENERAL_REGS
    r438: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r438,l0) best GENERAL_REGS, cover GENERAL_REGS
    r437: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r437,l0) best GENERAL_REGS, cover GENERAL_REGS
    r436: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r436,l0) best GENERAL_REGS, cover GENERAL_REGS
    r433: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r433,l0) best GENERAL_REGS, cover GENERAL_REGS
    r432: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r432,l0) best GENERAL_REGS, cover GENERAL_REGS
    r431: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r431,l0) best GENERAL_REGS, cover GENERAL_REGS
    r430: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r430,l0) best GENERAL_REGS, cover GENERAL_REGS
    r429: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r429,l0) best GENERAL_REGS, cover GENERAL_REGS
    r428: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r428,l0) best GENERAL_REGS, cover GENERAL_REGS
    r427: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r427,l0) best GENERAL_REGS, cover GENERAL_REGS
    r426: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r426,l0) best GENERAL_REGS, cover GENERAL_REGS
    r425: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r425,l0) best GENERAL_REGS, cover GENERAL_REGS
    r422: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r422,l0) best GENERAL_REGS, cover GENERAL_REGS
    r421: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r421,l0) best GENERAL_REGS, cover GENERAL_REGS
    r420: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r420,l0) best GENERAL_REGS, cover GENERAL_REGS
    r419: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r419,l0) best GENERAL_REGS, cover GENERAL_REGS
    r418: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r418,l0) best GENERAL_REGS, cover GENERAL_REGS
    r417: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r417,l0) best GENERAL_REGS, cover GENERAL_REGS
    r416: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r416,l0) best GENERAL_REGS, cover GENERAL_REGS
    r415: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r415,l0) best GENERAL_REGS, cover GENERAL_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r414,l0) best GENERAL_REGS, cover GENERAL_REGS
    r413: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r413,l0) best GENERAL_REGS, cover GENERAL_REGS
    r412: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r412,l0) best GENERAL_REGS, cover GENERAL_REGS
    r411: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r411,l0) best GENERAL_REGS, cover GENERAL_REGS
    r410: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a74 (r410,l0) best GENERAL_REGS, cover GENERAL_REGS
    r409: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r409,l0) best GENERAL_REGS, cover GENERAL_REGS
    r408: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a79 (r408,l0) best GENERAL_REGS, cover GENERAL_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a84 (r407,l0) best GENERAL_REGS, cover GENERAL_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a83 (r406,l0) best GENERAL_REGS, cover GENERAL_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a85 (r405,l0) best GENERAL_REGS, cover GENERAL_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a91 (r404,l0) best GENERAL_REGS, cover GENERAL_REGS
    r403: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a90 (r403,l0) best GENERAL_REGS, cover GENERAL_REGS
    r402: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a92 (r402,l0) best GENERAL_REGS, cover GENERAL_REGS
    r401: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a98 (r401,l0) best GENERAL_REGS, cover GENERAL_REGS
    r400: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a97 (r400,l0) best GENERAL_REGS, cover GENERAL_REGS
    r399: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a99 (r399,l0) best GENERAL_REGS, cover GENERAL_REGS
    r398: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a105 (r398,l0) best GENERAL_REGS, cover GENERAL_REGS
    r397: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a104 (r397,l0) best GENERAL_REGS, cover GENERAL_REGS
    r396: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a106 (r396,l0) best GENERAL_REGS, cover GENERAL_REGS
    r395: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a112 (r395,l0) best GENERAL_REGS, cover GENERAL_REGS
    r394: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a111 (r394,l0) best GENERAL_REGS, cover GENERAL_REGS
    r393: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a113 (r393,l0) best GENERAL_REGS, cover GENERAL_REGS
    r392: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a119 (r392,l0) best GENERAL_REGS, cover GENERAL_REGS
    r391: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a118 (r391,l0) best GENERAL_REGS, cover GENERAL_REGS
    r390: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a120 (r390,l0) best GENERAL_REGS, cover GENERAL_REGS
    r389: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a126 (r389,l0) best GENERAL_REGS, cover GENERAL_REGS
    r388: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a125 (r388,l0) best GENERAL_REGS, cover GENERAL_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a127 (r387,l0) best GENERAL_REGS, cover GENERAL_REGS
    r386: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a133 (r386,l0) best GENERAL_REGS, cover GENERAL_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a132 (r385,l0) best GENERAL_REGS, cover GENERAL_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a134 (r384,l0) best GENERAL_REGS, cover GENERAL_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a136 (r383,l0) best GENERAL_REGS, cover GENERAL_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a137 (r382,l0) best GENERAL_REGS, cover GENERAL_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a139 (r381,l0) best GENERAL_REGS, cover GENERAL_REGS
    r380: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a138 (r380,l0) best GENERAL_REGS, cover GENERAL_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a141 (r379,l0) best GENERAL_REGS, cover GENERAL_REGS
    r378: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a142 (r378,l0) best GENERAL_REGS, cover GENERAL_REGS
    r377: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a143 (r377,l0) best GENERAL_REGS, cover GENERAL_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a145 (r376,l0) best GENERAL_REGS, cover GENERAL_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a147 (r375,l0) best GENERAL_REGS, cover GENERAL_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a150 (r374,l0) best GENERAL_REGS, cover GENERAL_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a151 (r373,l0) best GENERAL_REGS, cover GENERAL_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a152 (r372,l0) best GENERAL_REGS, cover GENERAL_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a153 (r371,l0) best GENERAL_REGS, cover GENERAL_REGS
    r370: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a168 (r370,l0) best GENERAL_REGS, cover GENERAL_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a170 (r369,l0) best GENERAL_REGS, cover GENERAL_REGS
    r368: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a174 (r368,l0) best GENERAL_REGS, cover GENERAL_REGS
    r367: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a176 (r367,l0) best GENERAL_REGS, cover GENERAL_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a178 (r366,l0) best GENERAL_REGS, cover GENERAL_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a180 (r365,l0) best GENERAL_REGS, cover GENERAL_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a182 (r364,l0) best GENERAL_REGS, cover GENERAL_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a186 (r363,l0) best GENERAL_REGS, cover GENERAL_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a188 (r362,l0) best GENERAL_REGS, cover GENERAL_REGS
    r361: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a190 (r361,l0) best FLOAT_REGS, cover FLOAT_REGS
    r360: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a191 (r360,l0) best FLOAT_REGS, cover FLOAT_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a195 (r359,l0) best GENERAL_REGS, cover GENERAL_REGS
    r358: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a197 (r358,l0) best GENERAL_REGS, cover GENERAL_REGS
    r357: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a199 (r357,l0) best FLOAT_REGS, cover FLOAT_REGS
    r356: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a200 (r356,l0) best FLOAT_REGS, cover FLOAT_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a204 (r355,l0) best GENERAL_REGS, cover GENERAL_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a206 (r354,l0) best GENERAL_REGS, cover GENERAL_REGS
    r353: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a208 (r353,l0) best FLOAT_REGS, cover FLOAT_REGS
    r352: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a209 (r352,l0) best FLOAT_REGS, cover FLOAT_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a213 (r351,l0) best GENERAL_REGS, cover GENERAL_REGS
    r350: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a215 (r350,l0) best GENERAL_REGS, cover GENERAL_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a217 (r349,l0) best GENERAL_REGS, cover GENERAL_REGS
    r348: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a219 (r348,l0) best GENERAL_REGS, cover GENERAL_REGS
    r347: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a223 (r347,l0) best GENERAL_REGS, cover GENERAL_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a225 (r346,l0) best GENERAL_REGS, cover GENERAL_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a227 (r345,l0) best GENERAL_REGS, cover GENERAL_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a229 (r344,l0) best GENERAL_REGS, cover GENERAL_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a243 (r343,l0) best GENERAL_REGS, cover GENERAL_REGS
    r342: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a242 (r342,l0) best GENERAL_REGS, cover GENERAL_REGS
    r341: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a247 (r341,l0) best GENERAL_REGS, cover GENERAL_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a246 (r340,l0) best GENERAL_REGS, cover GENERAL_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a252 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    r338: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a251 (r338,l0) best GENERAL_REGS, cover GENERAL_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a254 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a257 (r336,l0) best GENERAL_REGS, cover GENERAL_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a260 (r335,l0) best GENERAL_REGS, cover GENERAL_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a259 (r334,l0) best GENERAL_REGS, cover GENERAL_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a263 (r333,l0) best GENERAL_REGS, cover GENERAL_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a264 (r332,l0) best GENERAL_REGS, cover GENERAL_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a268 (r331,l0) best GENERAL_REGS, cover GENERAL_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a267 (r330,l0) best GENERAL_REGS, cover GENERAL_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a271 (r329,l0) best GENERAL_REGS, cover GENERAL_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a273 (r328,l0) best GENERAL_REGS, cover GENERAL_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a276 (r327,l0) best GENERAL_REGS, cover GENERAL_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a281 (r326,l0) best GENERAL_REGS, cover GENERAL_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a280 (r325,l0) best GENERAL_REGS, cover GENERAL_REGS
    r324: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a283 (r324,l0) best GENERAL_REGS, cover GENERAL_REGS
    r323: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a286 (r323,l0) best GENERAL_REGS, cover GENERAL_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a289 (r322,l0) best GENERAL_REGS, cover GENERAL_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a288 (r321,l0) best GENERAL_REGS, cover GENERAL_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a292 (r320,l0) best GENERAL_REGS, cover GENERAL_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a293 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a297 (r318,l0) best GENERAL_REGS, cover GENERAL_REGS
    r317: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a296 (r317,l0) best GENERAL_REGS, cover GENERAL_REGS
    r316: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a300 (r316,l0) best GENERAL_REGS, cover GENERAL_REGS
    r315: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a302 (r315,l0) best GENERAL_REGS, cover GENERAL_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a305 (r314,l0) best GENERAL_REGS, cover GENERAL_REGS
    r313: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a307 (r313,l0) best GENERAL_REGS, cover GENERAL_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a308 (r312,l0) best GENERAL_REGS, cover GENERAL_REGS
    r311: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a311 (r311,l0) best GENERAL_REGS, cover GENERAL_REGS
    r310: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a310 (r310,l0) best GENERAL_REGS, cover GENERAL_REGS
    r309: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a314 (r309,l0) best GENERAL_REGS, cover GENERAL_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a319 (r308,l0) best GENERAL_REGS, cover GENERAL_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a318 (r307,l0) best GENERAL_REGS, cover GENERAL_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a321 (r306,l0) best GENERAL_REGS, cover GENERAL_REGS
    r305: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a324 (r305,l0) best GENERAL_REGS, cover GENERAL_REGS
    r304: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a327 (r304,l0) best GENERAL_REGS, cover GENERAL_REGS
    r303: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a326 (r303,l0) best GENERAL_REGS, cover GENERAL_REGS
    r302: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a330 (r302,l0) best GENERAL_REGS, cover GENERAL_REGS
    r301: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a331 (r301,l0) best GENERAL_REGS, cover GENERAL_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a335 (r300,l0) best GENERAL_REGS, cover GENERAL_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a334 (r299,l0) best GENERAL_REGS, cover GENERAL_REGS
    r298: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a338 (r298,l0) best GENERAL_REGS, cover GENERAL_REGS
    r297: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a340 (r297,l0) best GENERAL_REGS, cover GENERAL_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a343 (r296,l0) best GENERAL_REGS, cover GENERAL_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a348 (r295,l0) best GENERAL_REGS, cover GENERAL_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a347 (r294,l0) best GENERAL_REGS, cover GENERAL_REGS
    r293: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a350 (r293,l0) best GENERAL_REGS, cover GENERAL_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a353 (r292,l0) best GENERAL_REGS, cover GENERAL_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a356 (r291,l0) best GENERAL_REGS, cover GENERAL_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a355 (r290,l0) best GENERAL_REGS, cover GENERAL_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a359 (r289,l0) best GENERAL_REGS, cover GENERAL_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a360 (r288,l0) best GENERAL_REGS, cover GENERAL_REGS
    r287: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a364 (r287,l0) best GENERAL_REGS, cover GENERAL_REGS
    r286: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a363 (r286,l0) best GENERAL_REGS, cover GENERAL_REGS
    r285: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a367 (r285,l0) best GENERAL_REGS, cover GENERAL_REGS
    r284: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a369 (r284,l0) best GENERAL_REGS, cover GENERAL_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a372 (r283,l0) best GENERAL_REGS, cover GENERAL_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a374 (r282,l0) best GENERAL_REGS, cover GENERAL_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a375 (r281,l0) best GENERAL_REGS, cover GENERAL_REGS
    r280: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a378 (r280,l0) best GENERAL_REGS, cover GENERAL_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a377 (r279,l0) best GENERAL_REGS, cover GENERAL_REGS
    r278: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a381 (r278,l0) best GENERAL_REGS, cover GENERAL_REGS
    r277: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r277,l0) best GENERAL_REGS, cover GENERAL_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    r275: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r275,l0) best GENERAL_REGS, cover GENERAL_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r274,l0) best GENERAL_REGS, cover GENERAL_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r273,l0) best GENERAL_REGS, cover GENERAL_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r272,l0) best GENERAL_REGS, cover GENERAL_REGS
    r271: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r271,l0) best GENERAL_REGS, cover GENERAL_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r270,l0) best GENERAL_REGS, cover GENERAL_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r268,l0) best GENERAL_REGS, cover GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r267,l0) best GENERAL_REGS, cover GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r253,l0) best GENERAL_REGS, cover GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r251,l0) best GENERAL_REGS, cover GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r245,l0) best GENERAL_REGS, cover GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r244,l0) best GENERAL_REGS, cover GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r242,l0) best GENERAL_REGS, cover GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r240,l0) best GENERAL_REGS, cover GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r237,l0) best GENERAL_REGS, cover GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a69 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r235,l0) best GENERAL_REGS, cover GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a73 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a80 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a82 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a81 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a86 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a87 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a89 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a88 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a93 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a94 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a96 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a95 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a100 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a101 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a103 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a102 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a107 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a108 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a110 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a109 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a114 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a115 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a117 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a116 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a121 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a122 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a124 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a123 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a128 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a129 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a131 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a130 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a135 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a140 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a144 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a146 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a148 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a149 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a154 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a155 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    r190: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a156 (r190,l0) best FLOAT_REGS, cover FLOAT_REGS
    r189: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a158 (r189,l0) best FLOAT_REGS, cover FLOAT_REGS
    r188: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a159 (r188,l0) best FLOAT_REGS, cover FLOAT_REGS
    r187: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a160 (r187,l0) best FLOAT_REGS, cover FLOAT_REGS
    r186: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a162 (r186,l0) best FLOAT_REGS, cover FLOAT_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a163 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    r184: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a161 (r184,l0) best FLOAT_REGS, cover FLOAT_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a164 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a165 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a166 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a167 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a169 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a172 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a173 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a171 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a175 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a177 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a179 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a181 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a183 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a185 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a184 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a187 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    r167: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a189 (r167,l0) best Q_REGS, cover GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a192 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a194 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a193 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a196 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    r162: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a198 (r162,l0) best Q_REGS, cover GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a201 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a203 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a202 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a205 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    r157: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a207 (r157,l0) best Q_REGS, cover GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a210 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a212 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a211 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a214 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a216 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a218 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a220 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a222 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a221 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a224 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a226 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a228 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    r144: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a230 (r144,l0) best FLOAT_REGS, cover FLOAT_REGS
    r143: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a231 (r143,l0) best FLOAT_REGS, cover FLOAT_REGS
    r142: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a233 (r142,l0) best FLOAT_REGS, cover FLOAT_REGS
    r141: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a235 (r141,l0) best FLOAT_REGS, cover FLOAT_REGS
    r140: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a234 (r140,l0) best FLOAT_REGS, cover FLOAT_REGS
    r139: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a232 (r139,l0) best FLOAT_REGS, cover FLOAT_REGS
    r138: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a236 (r138,l0) best FLOAT_REGS, cover FLOAT_REGS
    r137: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a237 (r137,l0) best FLOAT_REGS, cover FLOAT_REGS
    r136: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a238 (r136,l0) best FLOAT_REGS, cover FLOAT_REGS
    r135: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a240 (r135,l0) best FLOAT_REGS, cover FLOAT_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a241 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    r133: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a239 (r133,l0) best FLOAT_REGS, cover FLOAT_REGS
    r132: preferred FLOAT_REGS, alternative NO_REGS, cover FLOAT_REGS
    a244 (r132,l0) best FLOAT_REGS, cover FLOAT_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a245 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a248 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a249 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a253 (r128,l0) best GENERAL_REGS, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a255 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a256 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a250 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a258 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a261 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a262 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a265 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a266 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a269 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a270 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a272 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a274 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a275 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a277 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a278 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a282 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a284 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a285 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a279 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a287 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a290 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a291 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a294 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a295 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a298 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a299 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a301 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a303 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a304 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a306 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a309 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a312 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a313 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a315 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a316 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a320 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a322 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a323 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a317 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a325 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a328 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a329 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a332 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a333 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a336 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a337 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a339 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a341 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a342 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a344 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a345 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a349 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a351 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a352 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a346 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a354 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a357 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a358 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a361 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a362 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a365 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a366 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a368 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a370 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a371 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a373 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a376 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a379 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a380 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r449,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r448,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r447,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r446,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r274,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a5(r277,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r445,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r276,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a8(r275,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r444,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r273,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a11(r443,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r442,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r270,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11
  a14(r272,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a15(r271,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a16(r441,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r269,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a18(r440,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r439,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r265,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a21(r268,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r438,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r267,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a24(r266,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r437,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r264,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r436,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r433,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r260,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r432,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r259,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a32(r258,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a33(r431,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r430,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a36(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a37(r429,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r428,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a39(r252,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r255,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r427,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r254,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a43(r253,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a44(r426,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a45(r251,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a46(r425,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r422,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a48(r247,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a49(r421,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r246,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a51(r245,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a52(r420,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a53(r419,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a54(r244,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a55(r243,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a56(r418,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a57(r242,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a58(r417,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a59(r241,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a60(r416,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a61(r240,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a62(r415,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a63(r239,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a64(r414,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a65(r238,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a66(r235,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a67(r413,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a68(r237,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a69(r236,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a70(r412,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a71(r411,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a72(r234,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a73(r233,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a74(r410,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a75(r232,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a76(r409,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a77(r231,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a78(r230,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a79(r408,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a80(r229,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a81(r227,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a82(r228,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a83(r406,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a84(r407,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a85(r405,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a86(r226,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a87(r225,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a88(r223,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a89(r224,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a90(r403,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a91(r404,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a92(r402,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a93(r222,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a94(r221,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a95(r219,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a96(r220,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a97(r400,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a98(r401,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a99(r399,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a100(r218,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a101(r217,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a102(r215,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a103(r216,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a104(r397,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a105(r398,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a106(r396,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a107(r214,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a108(r213,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a109(r211,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a110(r212,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a111(r394,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a112(r395,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a113(r393,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a114(r210,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a115(r209,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a116(r207,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a117(r208,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a118(r391,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a119(r392,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a120(r390,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a121(r206,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a122(r205,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a123(r203,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a124(r204,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a125(r388,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a126(r389,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a127(r387,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a128(r202,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a129(r201,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a130(r199,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a131(r200,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a132(r385,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:20
  a133(r386,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a134(r384,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a135(r198,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a136(r383,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a137(r382,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a138(r380,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a139(r381,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a140(r197,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a141(r379,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a142(r378,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a143(r377,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a144(r196,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a145(r376,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a146(r195,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a147(r375,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a148(r194,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a149(r193,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a150(r374,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a151(r373,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a152(r372,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a153(r371,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a154(r192,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a155(r191,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:9
  a156(r190,l0) costs: CLOBBERED_REGS:72,72 Q_REGS:72,72 NON_Q_REGS:72,72 GENERAL_REGS:72,72 FP_TOP_REG:2,2 FP_SECOND_REG:2,2 FP_TOP_SSE_REGS:2,2 FP_SECOND_SSE_REGS:2,2 FLOAT_REGS:2,2 MEM:22
  a157(r450,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:8,8 DIREG:8,8 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:8,8 GENERAL_REGS:8,8 MEM:24
  a158(r189,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a159(r188,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a160(r187,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a161(r184,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a162(r186,l0) costs: AD_REGS:64,64 CLOBBERED_REGS:64,64 Q_REGS:64,64 NON_Q_REGS:64,64 GENERAL_REGS:64,64 FP_TOP_REG:2,2 FP_SECOND_REG:2,2 FP_TOP_SSE_REGS:2,2 FP_SECOND_SSE_REGS:2,2 FLOAT_REGS:2,2 MEM:19
  a163(r185,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:10
  a164(r183,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a165(r182,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a166(r181,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a167(r180,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a168(r370,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a169(r179,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a170(r369,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a171(r176,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11
  a172(r178,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a173(r177,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a174(r368,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a175(r175,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a176(r367,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a177(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a178(r366,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a179(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a180(r365,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a181(r172,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a182(r364,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a183(r171,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a184(r169,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a185(r170,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a186(r363,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a187(r168,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a188(r362,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a189(r167,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:7
  a190(r361,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a191(r360,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a192(r166,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a193(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a194(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a195(r359,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a196(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a197(r358,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a198(r162,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:7
  a199(r357,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a200(r356,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a201(r161,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a202(r159,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a203(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a204(r355,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a205(r158,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a206(r354,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a207(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:7
  a208(r353,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a209(r352,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:18
  a210(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a211(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a212(r155,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a213(r351,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a214(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a215(r350,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a216(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a217(r349,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a218(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a219(r348,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a220(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a221(r148,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a222(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a223(r347,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a224(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a225(r346,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a226(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a227(r345,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a228(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a229(r344,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a230(r144,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a231(r143,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a232(r139,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a233(r142,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a234(r140,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a235(r141,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:17
  a236(r138,l0) costs: AD_REGS:62,62 CLOBBERED_REGS:62,62 Q_REGS:62,62 NON_Q_REGS:62,62 GENERAL_REGS:62,62 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:17
  a237(r137,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a238(r136,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a239(r133,l0) costs: CLOBBERED_REGS:70,70 Q_REGS:70,70 NON_Q_REGS:70,70 GENERAL_REGS:70,70 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FP_TOP_SSE_REGS:0,0 FP_SECOND_SSE_REGS:0,0 FLOAT_REGS:0,0 MEM:20
  a240(r135,l0) costs: AD_REGS:64,64 CLOBBERED_REGS:64,64 Q_REGS:64,64 NON_Q_REGS:64,64 GENERAL_REGS:64,64 FP_TOP_REG:2,2 FP_SECOND_REG:2,2 FP_TOP_SSE_REGS:2,2 FP_SECOND_SSE_REGS:2,2 FLOAT_REGS:2,2 MEM:19
  a241(r134,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:9
  a242(r342,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a243(r343,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a244(r132,l0) costs: AD_REGS:64,64 CLOBBERED_REGS:64,64 Q_REGS:64,64 NON_Q_REGS:64,64 GENERAL_REGS:64,64 FP_TOP_REG:2,2 FP_SECOND_REG:2,2 FP_TOP_SSE_REGS:2,2 FP_SECOND_SSE_REGS:2,2 FLOAT_REGS:2,2 MEM:19
  a245(r131,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:9
  a246(r340,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a247(r341,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a248(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a249(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a250(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a251(r338,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a252(r339,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a253(r128,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a254(r337,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a255(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a256(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a257(r336,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a258(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a259(r334,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a260(r335,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a261(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a262(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a263(r333,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a264(r332,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a265(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a266(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a267(r330,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a268(r331,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a269(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a270(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a271(r329,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a272(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a273(r328,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a274(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a275(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a276(r327,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a277(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a278(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a279(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a280(r325,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a281(r326,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a282(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a283(r324,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a284(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a285(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a286(r323,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a287(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a288(r321,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a289(r322,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a290(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a291(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a292(r320,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a293(r319,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a294(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a295(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a296(r317,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a297(r318,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a298(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a299(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a300(r316,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a301(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a302(r315,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a303(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a304(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a305(r314,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a306(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a307(r313,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a308(r312,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a309(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a310(r310,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a311(r311,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a312(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a313(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a314(r309,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a315(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a316(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a317(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a318(r307,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a319(r308,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a320(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a321(r306,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a322(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a323(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a324(r305,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a325(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a326(r303,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a327(r304,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a328(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a329(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a330(r302,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a331(r301,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a332(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a333(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a334(r299,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a335(r300,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a336(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a337(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a338(r298,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a339(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a340(r297,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a341(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a342(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a343(r296,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a344(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a345(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a346(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a347(r294,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a348(r295,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a349(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a350(r293,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a351(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a352(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a353(r292,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a354(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a355(r290,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a356(r291,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a357(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a358(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a359(r289,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a360(r288,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a361(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a362(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a363(r286,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a364(r287,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a365(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a366(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a367(r285,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a368(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a369(r284,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a370(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a371(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a372(r283,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a373(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a374(r282,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a375(r281,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a376(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a377(r279,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a378(r280,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a379(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a380(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a381(r278,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 722(l0): point = 0
   Insn 721(l0): point = 2
   Insn 720(l0): point = 4
   Insn 719(l0): point = 6
   Insn 718(l0): point = 8
   Insn 717(l0): point = 10
   Insn 716(l0): point = 12
   Insn 713(l0): point = 15
   Insn 712(l0): point = 17
   Insn 711(l0): point = 19
   Insn 710(l0): point = 21
   Insn 709(l0): point = 23
   Insn 708(l0): point = 25
   Insn 707(l0): point = 27
   Insn 706(l0): point = 29
   Insn 705(l0): point = 31
   Insn 704(l0): point = 33
   Insn 703(l0): point = 35
   Insn 702(l0): point = 37
   Insn 701(l0): point = 39
   Insn 700(l0): point = 41
   Insn 699(l0): point = 43
   Insn 698(l0): point = 45
   Insn 697(l0): point = 47
   Insn 696(l0): point = 49
   Insn 772(l0): point = 52
   Insn 689(l0): point = 54
   Insn 688(l0): point = 56
   Insn 687(l0): point = 58
   Insn 686(l0): point = 60
   Insn 685(l0): point = 62
   Insn 684(l0): point = 64
   Insn 683(l0): point = 66
   Insn 682(l0): point = 68
   Insn 681(l0): point = 70
   Insn 680(l0): point = 72
   Insn 674(l0): point = 74
   Insn 673(l0): point = 76
   Insn 672(l0): point = 78
   Insn 671(l0): point = 80
   Insn 670(l0): point = 82
   Insn 669(l0): point = 84
   Insn 668(l0): point = 86
   Insn 667(l0): point = 88
   Insn 666(l0): point = 90
   Insn 665(l0): point = 92
   Insn 664(l0): point = 94
   Insn 663(l0): point = 96
   Insn 770(l0): point = 99
   Insn 658(l0): point = 101
   Insn 657(l0): point = 103
   Insn 656(l0): point = 105
   Insn 655(l0): point = 107
   Insn 654(l0): point = 109
   Insn 653(l0): point = 111
   Insn 652(l0): point = 113
   Insn 651(l0): point = 115
   Insn 650(l0): point = 117
   Insn 649(l0): point = 119
   Insn 643(l0): point = 121
   Insn 642(l0): point = 123
   Insn 641(l0): point = 125
   Insn 640(l0): point = 127
   Insn 639(l0): point = 129
   Insn 638(l0): point = 131
   Insn 637(l0): point = 133
   Insn 636(l0): point = 135
   Insn 635(l0): point = 137
   Insn 634(l0): point = 139
   Insn 633(l0): point = 141
   Insn 632(l0): point = 143
   Insn 630(l0): point = 146
   Insn 629(l0): point = 148
   Insn 628(l0): point = 150
   Insn 627(l0): point = 152
   Insn 626(l0): point = 154
   Insn 625(l0): point = 156
   Insn 623(l0): point = 159
   Insn 622(l0): point = 161
   Insn 621(l0): point = 163
   Insn 620(l0): point = 165
   Insn 619(l0): point = 167
   Insn 618(l0): point = 169
   Insn 616(l0): point = 172
   Insn 615(l0): point = 174
   Insn 614(l0): point = 176
   Insn 613(l0): point = 178
   Insn 612(l0): point = 180
   Insn 611(l0): point = 182
   Insn 610(l0): point = 184
   Insn 609(l0): point = 186
   Insn 608(l0): point = 188
   Insn 607(l0): point = 190
   Insn 606(l0): point = 192
   Insn 605(l0): point = 194
   Insn 603(l0): point = 197
   Insn 602(l0): point = 199
   Insn 601(l0): point = 201
   Insn 600(l0): point = 203
   Insn 599(l0): point = 205
   Insn 598(l0): point = 207
   Insn 597(l0): point = 209
   Insn 595(l0): point = 212
   Insn 594(l0): point = 214
   Insn 813(l0): point = 217
   Insn 809(l0): point = 220
   Insn 808(l0): point = 222
   Insn 804(l0): point = 225
   Insn 803(l0): point = 227
   Insn 799(l0): point = 230
   Insn 798(l0): point = 232
   Insn 794(l0): point = 235
   Insn 793(l0): point = 237
   Insn 789(l0): point = 240
   Insn 788(l0): point = 242
   Insn 784(l0): point = 245
   Insn 783(l0): point = 247
   Insn 779(l0): point = 250
   Insn 778(l0): point = 252
   Insn 774(l0): point = 255
   Insn 590(l0): point = 257
   Insn 768(l0): point = 260
   Insn 583(l0): point = 262
   Insn 581(l0): point = 265
   Insn 580(l0): point = 267
   Insn 579(l0): point = 269
   Insn 578(l0): point = 271
   Insn 577(l0): point = 273
   Insn 576(l0): point = 275
   Insn 575(l0): point = 277
   Insn 574(l0): point = 279
   Insn 573(l0): point = 281
   Insn 572(l0): point = 283
   Insn 571(l0): point = 285
   Insn 766(l0): point = 288
   Insn 564(l0): point = 290
   Insn 562(l0): point = 293
   Insn 561(l0): point = 295
   Insn 560(l0): point = 297
   Insn 559(l0): point = 299
   Insn 558(l0): point = 301
   Insn 557(l0): point = 303
   Insn 556(l0): point = 305
   Insn 555(l0): point = 307
   Insn 554(l0): point = 309
   Insn 553(l0): point = 311
   Insn 552(l0): point = 313
   Insn 764(l0): point = 316
   Insn 545(l0): point = 318
   Insn 543(l0): point = 321
   Insn 542(l0): point = 323
   Insn 541(l0): point = 325
   Insn 540(l0): point = 327
   Insn 539(l0): point = 329
   Insn 538(l0): point = 331
   Insn 537(l0): point = 333
   Insn 536(l0): point = 335
   Insn 535(l0): point = 337
   Insn 534(l0): point = 339
   Insn 533(l0): point = 341
   Insn 762(l0): point = 344
   Insn 526(l0): point = 346
   Insn 524(l0): point = 349
   Insn 523(l0): point = 351
   Insn 522(l0): point = 353
   Insn 521(l0): point = 355
   Insn 520(l0): point = 357
   Insn 519(l0): point = 359
   Insn 518(l0): point = 361
   Insn 517(l0): point = 363
   Insn 516(l0): point = 365
   Insn 515(l0): point = 367
   Insn 514(l0): point = 369
   Insn 760(l0): point = 372
   Insn 507(l0): point = 374
   Insn 505(l0): point = 377
   Insn 504(l0): point = 379
   Insn 503(l0): point = 381
   Insn 502(l0): point = 383
   Insn 501(l0): point = 385
   Insn 500(l0): point = 387
   Insn 499(l0): point = 389
   Insn 498(l0): point = 391
   Insn 497(l0): point = 393
   Insn 496(l0): point = 395
   Insn 495(l0): point = 397
   Insn 758(l0): point = 400
   Insn 488(l0): point = 402
   Insn 486(l0): point = 405
   Insn 485(l0): point = 407
   Insn 484(l0): point = 409
   Insn 483(l0): point = 411
   Insn 482(l0): point = 413
   Insn 481(l0): point = 415
   Insn 480(l0): point = 417
   Insn 479(l0): point = 419
   Insn 478(l0): point = 421
   Insn 477(l0): point = 423
   Insn 476(l0): point = 425
   Insn 756(l0): point = 428
   Insn 469(l0): point = 430
   Insn 467(l0): point = 433
   Insn 466(l0): point = 435
   Insn 465(l0): point = 437
   Insn 464(l0): point = 439
   Insn 463(l0): point = 441
   Insn 462(l0): point = 443
   Insn 461(l0): point = 445
   Insn 460(l0): point = 447
   Insn 459(l0): point = 449
   Insn 458(l0): point = 451
   Insn 457(l0): point = 453
   Insn 754(l0): point = 456
   Insn 450(l0): point = 458
   Insn 448(l0): point = 461
   Insn 447(l0): point = 463
   Insn 446(l0): point = 465
   Insn 445(l0): point = 467
   Insn 444(l0): point = 469
   Insn 443(l0): point = 471
   Insn 442(l0): point = 473
   Insn 441(l0): point = 475
   Insn 440(l0): point = 477
   Insn 439(l0): point = 479
   Insn 438(l0): point = 481
   Insn 431(l0): point = 484
   Insn 430(l0): point = 486
   Insn 429(l0): point = 488
   Insn 428(l0): point = 490
   Insn 427(l0): point = 492
   Insn 426(l0): point = 495
   Insn 425(l0): point = 497
   Insn 424(l0): point = 499
   Insn 423(l0): point = 501
   Insn 422(l0): point = 503
   Insn 421(l0): point = 505
   Insn 420(l0): point = 507
   Insn 419(l0): point = 509
   Insn 418(l0): point = 511
   Insn 417(l0): point = 513
   Insn 416(l0): point = 515
   Insn 415(l0): point = 517
   Insn 414(l0): point = 519
   Insn 413(l0): point = 521
   Insn 412(l0): point = 523
   Insn 411(l0): point = 525
   Insn 410(l0): point = 527
   Insn 409(l0): point = 529
   Insn 408(l0): point = 531
   Insn 407(l0): point = 533
   Insn 406(l0): point = 535
   Insn 405(l0): point = 537
   Insn 404(l0): point = 539
   Insn 403(l0): point = 541
   Insn 402(l0): point = 543
   Insn 401(l0): point = 545
   Insn 400(l0): point = 547
   Insn 399(l0): point = 549
   Insn 398(l0): point = 551
   Insn 815(l0): point = 553
   Insn 823(l0): point = 555
   Insn 822(l0): point = 557
   Insn 821(l0): point = 559
   Insn 820(l0): point = 561
   Insn 396(l0): point = 563
   Insn 395(l0): point = 565
   Insn 394(l0): point = 567
   Insn 393(l0): point = 569
   Insn 814(l0): point = 571
   Insn 391(l0): point = 573
   Insn 390(l0): point = 575
   Insn 389(l0): point = 577
   Insn 388(l0): point = 579
   Insn 387(l0): point = 581
   Insn 386(l0): point = 583
   Insn 385(l0): point = 585
   Insn 384(l0): point = 587
   Insn 383(l0): point = 589
   Insn 752(l0): point = 592
   Insn 379(l0): point = 594
   Insn 378(l0): point = 596
   Insn 377(l0): point = 598
   Insn 376(l0): point = 600
   Insn 375(l0): point = 602
   Insn 374(l0): point = 604
   Insn 373(l0): point = 606
   Insn 372(l0): point = 608
   Insn 371(l0): point = 610
   Insn 370(l0): point = 612
   Insn 369(l0): point = 614
   Insn 368(l0): point = 616
   Insn 367(l0): point = 618
   Insn 366(l0): point = 620
   Insn 365(l0): point = 622
   Insn 364(l0): point = 624
   Insn 363(l0): point = 626
   Insn 362(l0): point = 628
   Insn 361(l0): point = 630
   Insn 360(l0): point = 632
   Insn 357(l0): point = 635
   Insn 356(l0): point = 637
   Insn 750(l0): point = 640
   Insn 351(l0): point = 642
   Insn 350(l0): point = 644
   Insn 348(l0): point = 647
   Insn 347(l0): point = 649
   Insn 346(l0): point = 651
   Insn 345(l0): point = 653
   Insn 344(l0): point = 655
   Insn 343(l0): point = 657
   Insn 342(l0): point = 659
   Insn 341(l0): point = 661
   Insn 339(l0): point = 664
   Insn 338(l0): point = 666
   Insn 337(l0): point = 668
   Insn 336(l0): point = 670
   Insn 335(l0): point = 672
   Insn 334(l0): point = 674
   Insn 748(l0): point = 677
   Insn 329(l0): point = 679
   Insn 327(l0): point = 682
   Insn 326(l0): point = 684
   Insn 325(l0): point = 686
   Insn 324(l0): point = 688
   Insn 323(l0): point = 690
   Insn 322(l0): point = 692
   Insn 321(l0): point = 694
   Insn 320(l0): point = 696
   Insn 318(l0): point = 699
   Insn 317(l0): point = 701
   Insn 316(l0): point = 703
   Insn 315(l0): point = 705
   Insn 314(l0): point = 707
   Insn 313(l0): point = 709
   Insn 746(l0): point = 712
   Insn 308(l0): point = 714
   Insn 306(l0): point = 717
   Insn 305(l0): point = 719
   Insn 304(l0): point = 721
   Insn 303(l0): point = 723
   Insn 302(l0): point = 725
   Insn 301(l0): point = 727
   Insn 300(l0): point = 729
   Insn 299(l0): point = 731
   Insn 297(l0): point = 734
   Insn 296(l0): point = 736
   Insn 295(l0): point = 738
   Insn 294(l0): point = 740
   Insn 293(l0): point = 742
   Insn 292(l0): point = 744
   Insn 744(l0): point = 747
   Insn 285(l0): point = 749
   Insn 284(l0): point = 751
   Insn 742(l0): point = 754
   Insn 279(l0): point = 756
   Insn 277(l0): point = 759
   Insn 276(l0): point = 761
   Insn 275(l0): point = 763
   Insn 274(l0): point = 765
   Insn 273(l0): point = 767
   Insn 272(l0): point = 769
   Insn 271(l0): point = 771
   Insn 270(l0): point = 773
   Insn 268(l0): point = 776
   Insn 267(l0): point = 778
   Insn 266(l0): point = 780
   Insn 265(l0): point = 782
   Insn 263(l0): point = 785
   Insn 262(l0): point = 787
   Insn 261(l0): point = 789
   Insn 260(l0): point = 791
   Insn 740(l0): point = 794
   Insn 253(l0): point = 796
   Insn 252(l0): point = 798
   Insn 738(l0): point = 801
   Insn 247(l0): point = 803
   Insn 245(l0): point = 806
   Insn 244(l0): point = 808
   Insn 243(l0): point = 810
   Insn 242(l0): point = 812
   Insn 241(l0): point = 814
   Insn 240(l0): point = 816
   Insn 239(l0): point = 818
   Insn 238(l0): point = 820
   Insn 236(l0): point = 823
   Insn 235(l0): point = 825
   Insn 234(l0): point = 827
   Insn 233(l0): point = 829
   Insn 231(l0): point = 832
   Insn 230(l0): point = 834
   Insn 229(l0): point = 836
   Insn 228(l0): point = 838
   Insn 227(l0): point = 840
   Insn 819(l0): point = 842
   Insn 225(l0): point = 844
   Insn 224(l0): point = 846
   Insn 223(l0): point = 848
   Insn 222(l0): point = 850
   Insn 221(l0): point = 852
   Insn 220(l0): point = 854
   Insn 219(l0): point = 856
   Insn 818(l0): point = 858
   Insn 217(l0): point = 860
   Insn 216(l0): point = 862
   Insn 817(l0): point = 864
   Insn 214(l0): point = 866
   Insn 213(l0): point = 868
   Insn 212(l0): point = 870
   Insn 211(l0): point = 872
   Insn 816(l0): point = 874
   Insn 209(l0): point = 876
   Insn 208(l0): point = 878
   Insn 207(l0): point = 880
   Insn 204(l0): point = 883
   Insn 203(l0): point = 885
   Insn 202(l0): point = 887
   Insn 201(l0): point = 889
   Insn 200(l0): point = 891
   Insn 199(l0): point = 893
   Insn 198(l0): point = 895
   Insn 197(l0): point = 897
   Insn 196(l0): point = 899
   Insn 195(l0): point = 901
   Insn 194(l0): point = 903
   Insn 193(l0): point = 905
   Insn 192(l0): point = 907
   Insn 191(l0): point = 909
   Insn 190(l0): point = 911
   Insn 189(l0): point = 913
   Insn 188(l0): point = 915
   Insn 187(l0): point = 917
   Insn 186(l0): point = 919
   Insn 185(l0): point = 921
   Insn 736(l0): point = 924
   Insn 180(l0): point = 926
   Insn 179(l0): point = 928
   Insn 178(l0): point = 930
   Insn 177(l0): point = 932
   Insn 176(l0): point = 934
   Insn 175(l0): point = 936
   Insn 174(l0): point = 938
   Insn 173(l0): point = 940
   Insn 172(l0): point = 942
   Insn 170(l0): point = 945
   Insn 169(l0): point = 947
   Insn 168(l0): point = 949
   Insn 167(l0): point = 951
   Insn 166(l0): point = 953
   Insn 165(l0): point = 955
   Insn 164(l0): point = 957
   Insn 734(l0): point = 960
   Insn 159(l0): point = 962
   Insn 158(l0): point = 964
   Insn 157(l0): point = 966
   Insn 156(l0): point = 968
   Insn 155(l0): point = 970
   Insn 154(l0): point = 972
   Insn 153(l0): point = 974
   Insn 152(l0): point = 976
   Insn 151(l0): point = 978
   Insn 150(l0): point = 980
   Insn 149(l0): point = 982
   Insn 148(l0): point = 984
   Insn 147(l0): point = 986
   Insn 146(l0): point = 988
   Insn 145(l0): point = 990
   Insn 144(l0): point = 992
   Insn 143(l0): point = 994
   Insn 142(l0): point = 996
   Insn 141(l0): point = 998
   Insn 140(l0): point = 1000
   Insn 732(l0): point = 1003
   Insn 135(l0): point = 1005
   Insn 134(l0): point = 1007
   Insn 133(l0): point = 1009
   Insn 132(l0): point = 1011
   Insn 131(l0): point = 1013
   Insn 130(l0): point = 1015
   Insn 129(l0): point = 1017
   Insn 128(l0): point = 1019
   Insn 127(l0): point = 1021
   Insn 125(l0): point = 1024
   Insn 124(l0): point = 1026
   Insn 123(l0): point = 1028
   Insn 122(l0): point = 1030
   Insn 121(l0): point = 1032
   Insn 120(l0): point = 1034
   Insn 119(l0): point = 1036
   Insn 117(l0): point = 1039
   Insn 116(l0): point = 1041
   Insn 115(l0): point = 1043
   Insn 114(l0): point = 1045
   Insn 113(l0): point = 1047
   Insn 112(l0): point = 1049
   Insn 111(l0): point = 1051
   Insn 110(l0): point = 1053
   Insn 109(l0): point = 1055
   Insn 108(l0): point = 1057
   Insn 107(l0): point = 1059
   Insn 106(l0): point = 1061
   Insn 103(l0): point = 1064
   Insn 102(l0): point = 1066
   Insn 101(l0): point = 1068
   Insn 100(l0): point = 1070
   Insn 99(l0): point = 1072
   Insn 98(l0): point = 1074
   Insn 97(l0): point = 1076
   Insn 96(l0): point = 1078
   Insn 95(l0): point = 1080
   Insn 94(l0): point = 1082
   Insn 93(l0): point = 1084
   Insn 92(l0): point = 1086
   Insn 91(l0): point = 1088
   Insn 90(l0): point = 1090
   Insn 89(l0): point = 1092
   Insn 88(l0): point = 1094
   Insn 87(l0): point = 1096
   Insn 86(l0): point = 1098
   Insn 85(l0): point = 1100
   Insn 84(l0): point = 1102
   Insn 730(l0): point = 1105
   Insn 79(l0): point = 1107
   Insn 78(l0): point = 1109
   Insn 77(l0): point = 1111
   Insn 76(l0): point = 1113
   Insn 75(l0): point = 1115
   Insn 74(l0): point = 1117
   Insn 73(l0): point = 1119
   Insn 72(l0): point = 1121
   Insn 71(l0): point = 1123
   Insn 69(l0): point = 1126
   Insn 68(l0): point = 1128
   Insn 67(l0): point = 1130
   Insn 66(l0): point = 1132
   Insn 65(l0): point = 1134
   Insn 64(l0): point = 1136
   Insn 63(l0): point = 1138
   Insn 728(l0): point = 1141
   Insn 58(l0): point = 1143
   Insn 57(l0): point = 1145
   Insn 56(l0): point = 1147
   Insn 55(l0): point = 1149
   Insn 54(l0): point = 1151
   Insn 53(l0): point = 1153
   Insn 52(l0): point = 1155
   Insn 51(l0): point = 1157
   Insn 50(l0): point = 1159
   Insn 49(l0): point = 1161
   Insn 48(l0): point = 1163
   Insn 47(l0): point = 1165
   Insn 46(l0): point = 1167
   Insn 45(l0): point = 1169
   Insn 44(l0): point = 1171
   Insn 43(l0): point = 1173
   Insn 42(l0): point = 1175
   Insn 41(l0): point = 1177
   Insn 40(l0): point = 1179
   Insn 39(l0): point = 1181
   Insn 726(l0): point = 1184
   Insn 34(l0): point = 1186
   Insn 33(l0): point = 1188
   Insn 32(l0): point = 1190
   Insn 31(l0): point = 1192
   Insn 30(l0): point = 1194
   Insn 29(l0): point = 1196
   Insn 28(l0): point = 1198
   Insn 27(l0): point = 1200
   Insn 26(l0): point = 1202
   Insn 24(l0): point = 1205
   Insn 23(l0): point = 1207
   Insn 22(l0): point = 1209
   Insn 21(l0): point = 1211
   Insn 20(l0): point = 1213
   Insn 19(l0): point = 1215
   Insn 18(l0): point = 1217
   Insn 16(l0): point = 1220
   Insn 15(l0): point = 1222
   Insn 14(l0): point = 1224
   Insn 13(l0): point = 1226
   Insn 12(l0): point = 1228
   Insn 11(l0): point = 1230
   Insn 10(l0): point = 1232
   Insn 9(l0): point = 1234
   Insn 8(l0): point = 1236
   Insn 7(l0): point = 1238
   Insn 6(l0): point = 1240
   Insn 5(l0): point = 1242
 a0(r449): [3..4]
 a1(r448): [7..8]
 a2(r447): [11..12]
 a3(r446): [16..17]
 a4(r274): [16..29]
 a5(r277): [16..19]
 a6(r445): [20..21]
 a7(r276): [20..23]
 a8(r275): [24..25]
 a9(r444): [26..27]
 a10(r273): [30..31]
 a11(r443): [32..33]
 a12(r442): [36..37]
 a13(r270): [36..45]
 a14(r272): [36..39]
 a15(r271): [40..41]
 a16(r441): [42..43]
 a17(r269): [46..47]
 a18(r440): [48..49]
 a19(r439): [55..56]
 a20(r265): [55..68]
 a21(r268): [55..58]
 a22(r438): [59..60]
 a23(r267): [59..62]
 a24(r266): [63..64]
 a25(r437): [65..66]
 a26(r264): [69..70]
 a27(r436): [71..72]
 a28(r433): [75..76]
 a29(r260): [75..78]
 a30(r432): [79..80]
 a31(r259): [79..82]
 a32(r258): [83..84]
 a33(r431): [85..86]
 a34(r430): [89..90]
 a35(r257): [89..92]
 a36(r256): [93..94]
 a37(r429): [95..96]
 a38(r428): [102..103]
 a39(r252): [102..115]
 a40(r255): [102..105]
 a41(r427): [106..107]
 a42(r254): [106..109]
 a43(r253): [110..111]
 a44(r426): [112..113]
 a45(r251): [116..117]
 a46(r425): [118..119]
 a47(r422): [122..123]
 a48(r247): [122..125]
 a49(r421): [126..127]
 a50(r246): [126..129]
 a51(r245): [130..131]
 a52(r420): [132..133]
 a53(r419): [136..137]
 a54(r244): [136..139]
 a55(r243): [140..141]
 a56(r418): [142..143]
 a57(r242): [149..150]
 a58(r417): [151..152]
 a59(r241): [151..154]
 a60(r416): [155..156]
 a61(r240): [162..163]
 a62(r415): [164..165]
 a63(r239): [164..167]
 a64(r414): [168..169]
 a65(r238): [175..176]
 a66(r235): [175..186]
 a67(r413): [177..178]
 a68(r237): [177..180]
 a69(r236): [181..182]
 a70(r412): [183..184]
 a71(r411): [187..188]
 a72(r234): [187..190]
 a73(r233): [191..192]
 a74(r410): [193..194]
 a75(r232): [200..201]
 a76(r409): [202..203]
 a77(r231): [202..205]
 a78(r230): [206..207]
 a79(r408): [208..209]
 a80(r229): [268..269]
 a81(r227): [268..283]
 a82(r228): [270..271]
 a83(r406): [276..279] [272..273]
 a84(r407): [274..275]
 a85(r405): [278..281]
 a86(r226): [284..285]
 a87(r225): [296..297]
 a88(r223): [296..311]
 a89(r224): [298..299]
 a90(r403): [304..307] [300..301]
 a91(r404): [302..303]
 a92(r402): [306..309]
 a93(r222): [312..313]
 a94(r221): [324..325]
 a95(r219): [324..339]
 a96(r220): [326..327]
 a97(r400): [332..335] [328..329]
 a98(r401): [330..331]
 a99(r399): [334..337]
 a100(r218): [340..341]
 a101(r217): [352..353]
 a102(r215): [352..367]
 a103(r216): [354..355]
 a104(r397): [360..363] [356..357]
 a105(r398): [358..359]
 a106(r396): [362..365]
 a107(r214): [368..369]
 a108(r213): [380..381]
 a109(r211): [380..395]
 a110(r212): [382..383]
 a111(r394): [388..391] [384..385]
 a112(r395): [386..387]
 a113(r393): [390..393]
 a114(r210): [396..397]
 a115(r209): [408..409]
 a116(r207): [408..423]
 a117(r208): [410..411]
 a118(r391): [416..419] [412..413]
 a119(r392): [414..415]
 a120(r390): [418..421]
 a121(r206): [424..425]
 a122(r205): [436..437]
 a123(r203): [436..451]
 a124(r204): [438..439]
 a125(r388): [444..447] [440..441]
 a126(r389): [442..443]
 a127(r387): [446..449]
 a128(r202): [452..453]
 a129(r201): [464..465]
 a130(r199): [464..479]
 a131(r200): [466..467]
 a132(r385): [472..475] [468..469]
 a133(r386): [470..471]
 a134(r384): [474..477]
 a135(r198): [480..481]
 a136(r383): [485..486]
 a137(r382): [487..488]
 a138(r380): [489..490]
 a139(r381): [491..492]
 a140(r197): [502..503]
 a141(r379): [504..505]
 a142(r378): [510..511]
 a143(r377 [0]): [514..515]
 a143(r377 [1]): [514..515]
 a144(r196): [518..523]
 a145(r376): [520..521]
 a146(r195): [524..525]
 a147(r375): [526..527]
 a148(r194): [526..529]
 a149(r193): [530..531]
 a150(r374): [532..533]
 a151(r373): [538..539]
 a152(r372): [542..543]
 a153(r371): [546..547]
 a154(r192): [550..551]
 a155(r191): [552..553]
 a156(r190): [554..563]
 a157(r450): [556..559]
 a158(r189): [564..565]
 a159(r188): [564..567]
 a160(r187): [568..569]
 a161(r184): [568..575]
 a162(r186): [570..571]
 a163(r185): [572..573]
 a164(r183): [578..579]
 a165(r182): [580..581]
 a166(r181): [582..583]
 a167(r180): [582..587]
 a168(r370): [584..585]
 a169(r179): [588..589]
 a170(r369): [595..596]
 a171(r176): [595..604]
 a172(r178): [595..598]
 a173(r177): [599..600]
 a174(r368): [601..602]
 a175(r175): [605..606]
 a176(r367): [607..608]
 a177(r174): [613..614]
 a178(r366): [615..616]
 a179(r173): [619..620]
 a180(r365): [621..622]
 a181(r172): [627..632]
 a182(r364): [629..630]
 a183(r171): [650..651]
 a184(r169): [650..657]
 a185(r170): [652..653]
 a186(r363): [654..655]
 a187(r168): [658..659]
 a188(r362): [660..661]
 a189(r167): [667..668]
 a190(r361): [671..672]
 a191(r360): [671..674]
 a192(r166): [685..686]
 a193(r164): [685..692]
 a194(r165): [687..688]
 a195(r359): [689..690]
 a196(r163): [693..694]
 a197(r358): [695..696]
 a198(r162): [702..703]
 a199(r357): [706..707]
 a200(r356): [706..709]
 a201(r161): [720..721]
 a202(r159): [720..727]
 a203(r160): [722..723]
 a204(r355): [724..725]
 a205(r158): [728..729]
 a206(r354): [730..731]
 a207(r157): [737..738]
 a208(r353): [741..742]
 a209(r352): [741..744]
 a210(r156): [762..763]
 a211(r154): [762..769]
 a212(r155): [764..765]
 a213(r351): [766..767]
 a214(r153): [770..771]
 a215(r350): [772..773]
 a216(r152): [779..780]
 a217(r349): [781..782]
 a218(r151): [788..789]
 a219(r348): [790..791]
 a220(r150): [809..810]
 a221(r148): [809..816]
 a222(r149): [811..812]
 a223(r347): [813..814]
 a224(r147): [817..818]
 a225(r346): [819..820]
 a226(r146): [826..827]
 a227(r345): [828..829]
 a228(r145): [835..836]
 a229(r344): [837..838]
 a230(r144): [843..844]
 a231(r143): [845..846]
 a232(r139): [845..854]
 a233(r142): [847..848]
 a234(r140): [847..852]
 a235(r141): [849..850]
 a236(r138): [855..856]
 a237(r137): [859..860]
 a238(r136): [861..862]
 a239(r133): [861..872]
 a240(r135): [863..864]
 a241(r134): [865..866]
 a242(r342): [867..870]
 a243(r343): [867..868]
 a244(r132): [873..874]
 a245(r131): [875..876]
 a246(r340): [877..880]
 a247(r341): [877..878]
 a248(r130): [884..885]
 a249(r129): [886..887]
 a250(r125): [886..909]
 a251(r338): [892..897] [888..889]
 a252(r339): [890..891]
 a253(r128): [894..899]
 a254(r337): [900..901]
 a255(r127): [900..903]
 a256(r126): [904..905]
 a257(r336): [906..907]
 a258(r124): [910..911]
 a259(r334): [912..915]
 a260(r335): [912..913]
 a261(r123): [914..917]
 a262(r122): [918..919]
 a263(r333): [920..921]
 a264(r332): [927..928]
 a265(r121): [929..930]
 a266(r120): [931..932]
 a267(r330): [933..936]
 a268(r331): [933..934]
 a269(r119): [935..938]
 a270(r118): [939..940]
 a271(r329): [941..942]
 a272(r117): [948..949]
 a273(r328): [950..951]
 a274(r116): [950..953]
 a275(r115): [954..955]
 a276(r327): [956..957]
 a277(r114): [963..964]
 a278(r113): [965..966]
 a279(r109): [965..988]
 a280(r325): [971..976] [967..968]
 a281(r326): [969..970]
 a282(r112): [973..978]
 a283(r324): [979..980]
 a284(r111): [979..982]
 a285(r110): [983..984]
 a286(r323): [985..986]
 a287(r108): [989..990]
 a288(r321): [991..994]
 a289(r322): [991..992]
 a290(r107): [993..996]
 a291(r106): [997..998]
 a292(r320): [999..1000]
 a293(r319): [1006..1007]
 a294(r105): [1008..1009]
 a295(r104): [1010..1011]
 a296(r317): [1012..1015]
 a297(r318): [1012..1013]
 a298(r103): [1014..1017]
 a299(r102): [1018..1019]
 a300(r316): [1020..1021]
 a301(r101): [1027..1028]
 a302(r315): [1029..1030]
 a303(r100): [1029..1032]
 a304(r99): [1033..1034]
 a305(r314): [1035..1036]
 a306(r98): [1042..1043]
 a307(r313): [1044..1045]
 a308(r312): [1048..1049]
 a309(r97): [1050..1051]
 a310(r310): [1052..1055]
 a311(r311): [1052..1053]
 a312(r96): [1054..1057]
 a313(r95): [1058..1059]
 a314(r309): [1060..1061]
 a315(r94): [1065..1066]
 a316(r93): [1067..1068]
 a317(r89): [1067..1090]
 a318(r307): [1073..1078] [1069..1070]
 a319(r308): [1071..1072]
 a320(r92): [1075..1080]
 a321(r306): [1081..1082]
 a322(r91): [1081..1084]
 a323(r90): [1085..1086]
 a324(r305): [1087..1088]
 a325(r88): [1091..1092]
 a326(r303): [1093..1096]
 a327(r304): [1093..1094]
 a328(r87): [1095..1098]
 a329(r86): [1099..1100]
 a330(r302): [1101..1102]
 a331(r301): [1108..1109]
 a332(r85): [1110..1111]
 a333(r84): [1112..1113]
 a334(r299): [1114..1117]
 a335(r300): [1114..1115]
 a336(r83): [1116..1119]
 a337(r82): [1120..1121]
 a338(r298): [1122..1123]
 a339(r81): [1129..1130]
 a340(r297): [1131..1132]
 a341(r80): [1131..1134]
 a342(r79): [1135..1136]
 a343(r296): [1137..1138]
 a344(r78): [1144..1145]
 a345(r77): [1146..1147]
 a346(r73): [1146..1169]
 a347(r294): [1152..1157] [1148..1149]
 a348(r295): [1150..1151]
 a349(r76): [1154..1159]
 a350(r293): [1160..1161]
 a351(r75): [1160..1163]
 a352(r74): [1164..1165]
 a353(r292): [1166..1167]
 a354(r72): [1170..1171]
 a355(r290): [1172..1175]
 a356(r291): [1172..1173]
 a357(r71): [1174..1177]
 a358(r70): [1178..1179]
 a359(r289): [1180..1181]
 a360(r288): [1187..1188]
 a361(r69): [1189..1190]
 a362(r68): [1191..1192]
 a363(r286): [1193..1196]
 a364(r287): [1193..1194]
 a365(r67): [1195..1198]
 a366(r66): [1199..1200]
 a367(r285): [1201..1202]
 a368(r65): [1208..1209]
 a369(r284): [1210..1211]
 a370(r64): [1210..1213]
 a371(r63): [1214..1215]
 a372(r283): [1216..1217]
 a373(r62): [1223..1224]
 a374(r282): [1225..1226]
 a375(r281): [1229..1230]
 a376(r61): [1231..1232]
 a377(r279): [1233..1236]
 a378(r280): [1233..1234]
 a379(r60): [1235..1238]
 a380(r59): [1239..1240]
 a381(r278): [1241..1242]
Compressing live ranges: from 1245 to 614 - 49%
Ranges after the compression:
 a0(r449): [0..1]
 a1(r448): [2..3]
 a2(r447): [4..5]
 a3(r446): [6..7]
 a4(r274): [6..13]
 a5(r277): [6..7]
 a6(r445): [8..9]
 a7(r276): [8..9]
 a8(r275): [10..11]
 a9(r444): [12..13]
 a10(r273): [14..15]
 a11(r443): [16..17]
 a12(r442): [18..19]
 a13(r270): [18..23]
 a14(r272): [18..19]
 a15(r271): [20..21]
 a16(r441): [22..23]
 a17(r269): [24..25]
 a18(r440): [26..27]
 a19(r439): [28..29]
 a20(r265): [28..35]
 a21(r268): [28..29]
 a22(r438): [30..31]
 a23(r267): [30..31]
 a24(r266): [32..33]
 a25(r437): [34..35]
 a26(r264): [36..37]
 a27(r436): [38..39]
 a28(r433): [40..41]
 a29(r260): [40..41]
 a30(r432): [42..43]
 a31(r259): [42..43]
 a32(r258): [44..45]
 a33(r431): [46..47]
 a34(r430): [48..49]
 a35(r257): [48..49]
 a36(r256): [50..51]
 a37(r429): [52..53]
 a38(r428): [54..55]
 a39(r252): [54..61]
 a40(r255): [54..55]
 a41(r427): [56..57]
 a42(r254): [56..57]
 a43(r253): [58..59]
 a44(r426): [60..61]
 a45(r251): [62..63]
 a46(r425): [64..65]
 a47(r422): [66..67]
 a48(r247): [66..67]
 a49(r421): [68..69]
 a50(r246): [68..69]
 a51(r245): [70..71]
 a52(r420): [72..73]
 a53(r419): [74..75]
 a54(r244): [74..75]
 a55(r243): [76..77]
 a56(r418): [78..79]
 a57(r242): [80..81]
 a58(r417): [82..83]
 a59(r241): [82..83]
 a60(r416): [84..85]
 a61(r240): [86..87]
 a62(r415): [88..89]
 a63(r239): [88..89]
 a64(r414): [90..91]
 a65(r238): [92..93]
 a66(r235): [92..99]
 a67(r413): [94..95]
 a68(r237): [94..95]
 a69(r236): [96..97]
 a70(r412): [98..99]
 a71(r411): [100..101]
 a72(r234): [100..101]
 a73(r233): [102..103]
 a74(r410): [104..105]
 a75(r232): [106..107]
 a76(r409): [108..109]
 a77(r231): [108..109]
 a78(r230): [110..111]
 a79(r408): [112..113]
 a80(r229): [114..115]
 a81(r227): [114..123]
 a82(r228): [116..117]
 a83(r406): [122..123] [118..119]
 a84(r407): [120..121]
 a85(r405): [122..123]
 a86(r226): [124..125]
 a87(r225): [126..127]
 a88(r223): [126..135]
 a89(r224): [128..129]
 a90(r403): [134..135] [130..131]
 a91(r404): [132..133]
 a92(r402): [134..135]
 a93(r222): [136..137]
 a94(r221): [138..139]
 a95(r219): [138..147]
 a96(r220): [140..141]
 a97(r400): [146..147] [142..143]
 a98(r401): [144..145]
 a99(r399): [146..147]
 a100(r218): [148..149]
 a101(r217): [150..151]
 a102(r215): [150..159]
 a103(r216): [152..153]
 a104(r397): [158..159] [154..155]
 a105(r398): [156..157]
 a106(r396): [158..159]
 a107(r214): [160..161]
 a108(r213): [162..163]
 a109(r211): [162..171]
 a110(r212): [164..165]
 a111(r394): [170..171] [166..167]
 a112(r395): [168..169]
 a113(r393): [170..171]
 a114(r210): [172..173]
 a115(r209): [174..175]
 a116(r207): [174..183]
 a117(r208): [176..177]
 a118(r391): [182..183] [178..179]
 a119(r392): [180..181]
 a120(r390): [182..183]
 a121(r206): [184..185]
 a122(r205): [186..187]
 a123(r203): [186..195]
 a124(r204): [188..189]
 a125(r388): [194..195] [190..191]
 a126(r389): [192..193]
 a127(r387): [194..195]
 a128(r202): [196..197]
 a129(r201): [198..199]
 a130(r199): [198..207]
 a131(r200): [200..201]
 a132(r385): [206..207] [202..203]
 a133(r386): [204..205]
 a134(r384): [206..207]
 a135(r198): [208..209]
 a136(r383): [210..211]
 a137(r382): [212..213]
 a138(r380): [214..215]
 a139(r381): [216..217]
 a140(r197): [218..219]
 a141(r379): [220..221]
 a142(r378): [222..223]
 a143(r377 [0]): [224..225]
 a143(r377 [1]): [224..225]
 a144(r196): [226..227]
 a145(r376): [226..227]
 a146(r195): [228..229]
 a147(r375): [230..231]
 a148(r194): [230..231]
 a149(r193): [232..233]
 a150(r374): [234..235]
 a151(r373): [236..237]
 a152(r372): [238..239]
 a153(r371): [240..241]
 a154(r192): [242..243]
 a155(r191): [244..245]
 a156(r190): [246..247]
 a157(r450): [246..247]
 a158(r189): [248..249]
 a159(r188): [248..249]
 a160(r187): [250..251]
 a161(r184): [250..255]
 a162(r186): [252..253]
 a163(r185): [254..255]
 a164(r183): [256..257]
 a165(r182): [258..259]
 a166(r181): [260..261]
 a167(r180): [260..263]
 a168(r370): [262..263]
 a169(r179): [264..265]
 a170(r369): [266..267]
 a171(r176): [266..271]
 a172(r178): [266..267]
 a173(r177): [268..269]
 a174(r368): [270..271]
 a175(r175): [272..273]
 a176(r367): [274..275]
 a177(r174): [276..277]
 a178(r366): [278..279]
 a179(r173): [280..281]
 a180(r365): [282..283]
 a181(r172): [284..285]
 a182(r364): [284..285]
 a183(r171): [286..287]
 a184(r169): [286..291]
 a185(r170): [288..289]
 a186(r363): [290..291]
 a187(r168): [292..293]
 a188(r362): [294..295]
 a189(r167): [296..297]
 a190(r361): [298..299]
 a191(r360): [298..299]
 a192(r166): [300..301]
 a193(r164): [300..305]
 a194(r165): [302..303]
 a195(r359): [304..305]
 a196(r163): [306..307]
 a197(r358): [308..309]
 a198(r162): [310..311]
 a199(r357): [312..313]
 a200(r356): [312..313]
 a201(r161): [314..315]
 a202(r159): [314..319]
 a203(r160): [316..317]
 a204(r355): [318..319]
 a205(r158): [320..321]
 a206(r354): [322..323]
 a207(r157): [324..325]
 a208(r353): [326..327]
 a209(r352): [326..327]
 a210(r156): [328..329]
 a211(r154): [328..333]
 a212(r155): [330..331]
 a213(r351): [332..333]
 a214(r153): [334..335]
 a215(r350): [336..337]
 a216(r152): [338..339]
 a217(r349): [340..341]
 a218(r151): [342..343]
 a219(r348): [344..345]
 a220(r150): [346..347]
 a221(r148): [346..351]
 a222(r149): [348..349]
 a223(r347): [350..351]
 a224(r147): [352..353]
 a225(r346): [354..355]
 a226(r146): [356..357]
 a227(r345): [358..359]
 a228(r145): [360..361]
 a229(r344): [362..363]
 a230(r144): [364..365]
 a231(r143): [366..367]
 a232(r139): [366..371]
 a233(r142): [368..369]
 a234(r140): [368..371]
 a235(r141): [370..371]
 a236(r138): [372..373]
 a237(r137): [374..375]
 a238(r136): [376..377]
 a239(r133): [376..383]
 a240(r135): [378..379]
 a241(r134): [380..381]
 a242(r342): [382..383]
 a243(r343): [382..383]
 a244(r132): [384..385]
 a245(r131): [386..387]
 a246(r340): [388..389]
 a247(r341): [388..389]
 a248(r130): [390..391]
 a249(r129): [392..393]
 a250(r125): [392..405]
 a251(r338): [398..399] [394..395]
 a252(r339): [396..397]
 a253(r128): [398..399]
 a254(r337): [400..401]
 a255(r127): [400..401]
 a256(r126): [402..403]
 a257(r336): [404..405]
 a258(r124): [406..407]
 a259(r334): [408..411]
 a260(r335): [408..409]
 a261(r123): [410..411]
 a262(r122): [412..413]
 a263(r333): [414..415]
 a264(r332): [416..417]
 a265(r121): [418..419]
 a266(r120): [420..421]
 a267(r330): [422..425]
 a268(r331): [422..423]
 a269(r119): [424..425]
 a270(r118): [426..427]
 a271(r329): [428..429]
 a272(r117): [430..431]
 a273(r328): [432..433]
 a274(r116): [432..433]
 a275(r115): [434..435]
 a276(r327): [436..437]
 a277(r114): [438..439]
 a278(r113): [440..441]
 a279(r109): [440..453]
 a280(r325): [446..447] [442..443]
 a281(r326): [444..445]
 a282(r112): [446..447]
 a283(r324): [448..449]
 a284(r111): [448..449]
 a285(r110): [450..451]
 a286(r323): [452..453]
 a287(r108): [454..455]
 a288(r321): [456..459]
 a289(r322): [456..457]
 a290(r107): [458..459]
 a291(r106): [460..461]
 a292(r320): [462..463]
 a293(r319): [464..465]
 a294(r105): [466..467]
 a295(r104): [468..469]
 a296(r317): [470..473]
 a297(r318): [470..471]
 a298(r103): [472..473]
 a299(r102): [474..475]
 a300(r316): [476..477]
 a301(r101): [478..479]
 a302(r315): [480..481]
 a303(r100): [480..481]
 a304(r99): [482..483]
 a305(r314): [484..485]
 a306(r98): [486..487]
 a307(r313): [488..489]
 a308(r312): [490..491]
 a309(r97): [492..493]
 a310(r310): [494..497]
 a311(r311): [494..495]
 a312(r96): [496..497]
 a313(r95): [498..499]
 a314(r309): [500..501]
 a315(r94): [502..503]
 a316(r93): [504..505]
 a317(r89): [504..517]
 a318(r307): [510..511] [506..507]
 a319(r308): [508..509]
 a320(r92): [510..511]
 a321(r306): [512..513]
 a322(r91): [512..513]
 a323(r90): [514..515]
 a324(r305): [516..517]
 a325(r88): [518..519]
 a326(r303): [520..523]
 a327(r304): [520..521]
 a328(r87): [522..523]
 a329(r86): [524..525]
 a330(r302): [526..527]
 a331(r301): [528..529]
 a332(r85): [530..531]
 a333(r84): [532..533]
 a334(r299): [534..537]
 a335(r300): [534..535]
 a336(r83): [536..537]
 a337(r82): [538..539]
 a338(r298): [540..541]
 a339(r81): [542..543]
 a340(r297): [544..545]
 a341(r80): [544..545]
 a342(r79): [546..547]
 a343(r296): [548..549]
 a344(r78): [550..551]
 a345(r77): [552..553]
 a346(r73): [552..565]
 a347(r294): [558..559] [554..555]
 a348(r295): [556..557]
 a349(r76): [558..559]
 a350(r293): [560..561]
 a351(r75): [560..561]
 a352(r74): [562..563]
 a353(r292): [564..565]
 a354(r72): [566..567]
 a355(r290): [568..571]
 a356(r291): [568..569]
 a357(r71): [570..571]
 a358(r70): [572..573]
 a359(r289): [574..575]
 a360(r288): [576..577]
 a361(r69): [578..579]
 a362(r68): [580..581]
 a363(r286): [582..585]
 a364(r287): [582..583]
 a365(r67): [584..585]
 a366(r66): [586..587]
 a367(r285): [588..589]
 a368(r65): [590..591]
 a369(r284): [592..593]
 a370(r64): [592..593]
 a371(r63): [594..595]
 a372(r283): [596..597]
 a373(r62): [598..599]
 a374(r282): [600..601]
 a375(r281): [602..603]
 a376(r61): [604..605]
 a377(r279): [606..609]
 a378(r280): [606..607]
 a379(r60): [608..609]
 a380(r59): [610..611]
 a381(r278): [612..613]
  regions=2, blocks=73, points=614
    allocnos=382 (big 1), copies=0, conflicts=0, ranges=395
Disposition:
  380:r59  l0     0  379:r60  l0     1  376:r61  l0     0  373:r62  l0     0
  371:r63  l0     0  370:r64  l0     1  368:r65  l0     0  366:r66  l0     0
  365:r67  l0     1  362:r68  l0     0  361:r69  l0     0  358:r70  l0     0
  357:r71  l0     1  354:r72  l0     0  346:r73  l0     2  352:r74  l0     0
  351:r75  l0     1  349:r76  l0     1  345:r77  l0     0  344:r78  l0     0
  342:r79  l0     0  341:r80  l0     1  339:r81  l0     0  337:r82  l0     0
  336:r83  l0     1  333:r84  l0     0  332:r85  l0     0  329:r86  l0     0
  328:r87  l0     1  325:r88  l0     0  317:r89  l0     2  323:r90  l0     0
  322:r91  l0     1  320:r92  l0     1  316:r93  l0     0  315:r94  l0     0
  313:r95  l0     0  312:r96  l0     1  309:r97  l0     0  306:r98  l0     0
  304:r99  l0     0  303:r100 l0     1  301:r101 l0     0  299:r102 l0     0
  298:r103 l0     1  295:r104 l0     0  294:r105 l0     0  291:r106 l0     0
  290:r107 l0     1  287:r108 l0     0  279:r109 l0     2  285:r110 l0     0
  284:r111 l0     1  282:r112 l0     1  278:r113 l0     0  277:r114 l0     0
  275:r115 l0     0  274:r116 l0     1  272:r117 l0     0  270:r118 l0     0
  269:r119 l0     1  266:r120 l0     0  265:r121 l0     0  262:r122 l0     0
  261:r123 l0     1  258:r124 l0     0  250:r125 l0     2  256:r126 l0     0
  255:r127 l0     1  253:r128 l0     1  249:r129 l0     0  248:r130 l0     0
  245:r131 l0     0  244:r132 l0     8  239:r133 l0     9  241:r134 l0     0
  240:r135 l0     8  238:r136 l0     8  237:r137 l0     8  236:r138 l0     8
  232:r139 l0     9  234:r140 l0    10  235:r141 l0     8  233:r142 l0     8
  231:r143 l0     8  230:r144 l0     8  228:r145 l0     0  226:r146 l0     0
  224:r147 l0     0  221:r148 l0     1  222:r149 l0     0  220:r150 l0     0
  218:r151 l0     0  216:r152 l0     0  214:r153 l0     0  211:r154 l0     1
  212:r155 l0     0  210:r156 l0     0  207:r157 l0     0  205:r158 l0     0
  202:r159 l0     1  203:r160 l0     0  201:r161 l0     0  198:r162 l0     0
  196:r163 l0     0  193:r164 l0     1  194:r165 l0     0  192:r166 l0     0
  189:r167 l0     0  187:r168 l0     0  184:r169 l0     1  185:r170 l0     0
  183:r171 l0     0  181:r172 l0     0  179:r173 l0     0  177:r174 l0     0
  175:r175 l0     0  171:r176 l0     0  173:r177 l0     1  172:r178 l0     2
  169:r179 l0     0  167:r180 l0     1  166:r181 l0     0  165:r182 l0     0
  164:r183 l0     0  161:r184 l0     9  163:r185 l0     0  162:r186 l0     8
  160:r187 l0     8  159:r188 l0     9  158:r189 l0     8  156:r190 l0     8
  155:r191 l0     0  154:r192 l0     0  149:r193 l0     0  148:r194 l0     1
  146:r195 l0     0  144:r196 l0     0  140:r197 l0     0  135:r198 l0     0
  130:r199 l0     1  131:r200 l0     0  129:r201 l0     0  128:r202 l0     0
  123:r203 l0     1  124:r204 l0     0  122:r205 l0     0  121:r206 l0     0
  116:r207 l0     1  117:r208 l0     0  115:r209 l0     0  114:r210 l0     0
  109:r211 l0     1  110:r212 l0     0  108:r213 l0     0  107:r214 l0     0
  102:r215 l0     1  103:r216 l0     0  101:r217 l0     0  100:r218 l0     0
   95:r219 l0     1   96:r220 l0     0   94:r221 l0     0   93:r222 l0     0
   88:r223 l0     1   89:r224 l0     0   87:r225 l0     0   86:r226 l0     0
   81:r227 l0     1   82:r228 l0     0   80:r229 l0     0   78:r230 l0     0
   77:r231 l0     1   75:r232 l0     0   73:r233 l0     0   72:r234 l0     1
   66:r235 l0     1   69:r236 l0     0   68:r237 l0     2   65:r238 l0     0
   63:r239 l0     1   61:r240 l0     0   59:r241 l0     1   57:r242 l0     0
   55:r243 l0     0   54:r244 l0     1   51:r245 l0     0   50:r246 l0     1
   48:r247 l0     1   45:r251 l0     0   39:r252 l0     2   43:r253 l0     0
   42:r254 l0     1   40:r255 l0     1   36:r256 l0     0   35:r257 l0     1
   32:r258 l0     0   31:r259 l0     1   29:r260 l0     1   26:r264 l0     0
   20:r265 l0     2   24:r266 l0     0   23:r267 l0     1   21:r268 l0     1
   17:r269 l0     0   13:r270 l0     0   15:r271 l0     1   14:r272 l0     2
   10:r273 l0     0    4:r274 l0     2    8:r275 l0     0    7:r276 l0     1
    5:r277 l0     1  381:r278 l0     0  377:r279 l0     0  378:r280 l0     1
  375:r281 l0     0  374:r282 l0     0  372:r283 l0     0  369:r284 l0     0
  367:r285 l0     0  363:r286 l0     0  364:r287 l0     1  360:r288 l0     0
  359:r289 l0     0  355:r290 l0     0  356:r291 l0     1  353:r292 l0     0
  350:r293 l0     0  347:r294 l0     0  348:r295 l0     0  343:r296 l0     0
  340:r297 l0     0  338:r298 l0     0  334:r299 l0     0  335:r300 l0     1
  331:r301 l0     0  330:r302 l0     0  326:r303 l0     0  327:r304 l0     1
  324:r305 l0     0  321:r306 l0     0  318:r307 l0     0  319:r308 l0     0
  314:r309 l0     0  310:r310 l0     0  311:r311 l0     1  308:r312 l0     0
  307:r313 l0     0  305:r314 l0     0  302:r315 l0     0  300:r316 l0     0
  296:r317 l0     0  297:r318 l0     1  293:r319 l0     0  292:r320 l0     0
  288:r321 l0     0  289:r322 l0     1  286:r323 l0     0  283:r324 l0     0
  280:r325 l0     0  281:r326 l0     0  276:r327 l0     0  273:r328 l0     0
  271:r329 l0     0  267:r330 l0     0  268:r331 l0     1  264:r332 l0     0
  263:r333 l0     0  259:r334 l0     0  260:r335 l0     1  257:r336 l0     0
  254:r337 l0     0  251:r338 l0     0  252:r339 l0     0  246:r340 l0     0
  247:r341 l0     1  242:r342 l0     0  243:r343 l0     1  229:r344 l0     0
  227:r345 l0     0  225:r346 l0     0  223:r347 l0     0  219:r348 l0     0
  217:r349 l0     0  215:r350 l0     0  213:r351 l0     0  209:r352 l0     9
  208:r353 l0     8  206:r354 l0     0  204:r355 l0     0  200:r356 l0     9
  199:r357 l0     8  197:r358 l0     0  195:r359 l0     0  191:r360 l0     9
  190:r361 l0     8  188:r362 l0     0  186:r363 l0     0  182:r364 l0     1
  180:r365 l0     0  178:r366 l0     0  176:r367 l0     0  174:r368 l0     1
  170:r369 l0     1  168:r370 l0     0  153:r371 l0     0  152:r372 l0     0
  151:r373 l0     0  150:r374 l0     0  147:r375 l0     0  145:r376 l0     1
  143:r377 l0     0  142:r378 l0     0  141:r379 l0     0  138:r380 l0     0
  139:r381 l0     0  137:r382 l0     0  136:r383 l0     0  134:r384 l0     2
  132:r385 l0     0  133:r386 l0     0  127:r387 l0     2  125:r388 l0     0
  126:r389 l0     0  120:r390 l0     2  118:r391 l0     0  119:r392 l0     0
  113:r393 l0     2  111:r394 l0     0  112:r395 l0     0  106:r396 l0     2
  104:r397 l0     0  105:r398 l0     0   99:r399 l0     2   97:r400 l0     0
   98:r401 l0     0   92:r402 l0     2   90:r403 l0     0   91:r404 l0     0
   85:r405 l0     2   83:r406 l0     0   84:r407 l0     0   79:r408 l0     0
   76:r409 l0     0   74:r410 l0     0   71:r411 l0     0   70:r412 l0     0
   67:r413 l0     0   64:r414 l0     0   62:r415 l0     0   60:r416 l0     0
   58:r417 l0     0   56:r418 l0     0   53:r419 l0     0   52:r420 l0     0
   49:r421 l0     0   47:r422 l0     0   46:r425 l0     0   44:r426 l0     0
   41:r427 l0     0   38:r428 l0     0   37:r429 l0     0   34:r430 l0     0
   33:r431 l0     0   30:r432 l0     0   28:r433 l0     0   27:r436 l0     0
   25:r437 l0     0   22:r438 l0     0   19:r439 l0     0   18:r440 l0     0
   16:r441 l0     1   12:r442 l0     1   11:r443 l0     0    9:r444 l0     0
    6:r445 l0     0    3:r446 l0     0    2:r447 l0     0    1:r448 l0     0
    0:r449 l0     0  157:r450 l0     0
+++Costs: overall 16, reg 16, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 278
insn=6, live_throughout: 7, dead_or_set: 59, 278
insn=7, live_throughout: 7, dead_or_set: 59, 60
insn=8, live_throughout: 7, 60, dead_or_set: 279
insn=9, live_throughout: 7, 279, dead_or_set: 60, 280
insn=10, live_throughout: 7, dead_or_set: 61, 279, 280
insn=11, live_throughout: 7, dead_or_set: 61, 281
insn=12, live_throughout: 7, dead_or_set: 281
insn=13, live_throughout: 7, dead_or_set: 282
insn=14, live_throughout: 7, dead_or_set: 62, 282
insn=15, live_throughout: 7, dead_or_set: 62
insn=16, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 283
insn=19, live_throughout: 7, dead_or_set: 63, 283
insn=20, live_throughout: 7, dead_or_set: 63, 64
insn=21, live_throughout: 7, 64, dead_or_set: 284
insn=22, live_throughout: 7, dead_or_set: 64, 65, 284
insn=23, live_throughout: 7, dead_or_set: 65
insn=24, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 285
insn=27, live_throughout: 7, dead_or_set: 66, 285
insn=28, live_throughout: 7, dead_or_set: 66, 67
insn=29, live_throughout: 7, 67, dead_or_set: 286
insn=30, live_throughout: 7, 286, dead_or_set: 67, 287
insn=31, live_throughout: 7, dead_or_set: 68, 286, 287
insn=32, live_throughout: 7, dead_or_set: 68, 69
insn=33, live_throughout: 7, dead_or_set: 69, 288
insn=34, live_throughout: 7, dead_or_set: 288
insn=726, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 289
insn=40, live_throughout: 7, dead_or_set: 70, 289
insn=41, live_throughout: 7, dead_or_set: 70, 71
insn=42, live_throughout: 7, 71, dead_or_set: 290
insn=43, live_throughout: 7, 290, dead_or_set: 71, 291
insn=44, live_throughout: 7, dead_or_set: 72, 290, 291
insn=45, live_throughout: 7, dead_or_set: 72, 73
insn=46, live_throughout: 7, 73, dead_or_set: 292
insn=47, live_throughout: 7, 73, dead_or_set: 74, 292
insn=48, live_throughout: 7, 73, dead_or_set: 74, 75
insn=49, live_throughout: 7, 73, 75, dead_or_set: 293
insn=50, live_throughout: 7, 73, dead_or_set: 75, 76, 293
insn=51, live_throughout: 7, 73, 76, dead_or_set: 294
insn=52, live_throughout: 7, 73, 76, dead_or_set: 294
insn=53, live_throughout: 7, 73, dead_or_set: 76, 294
insn=54, live_throughout: 7, 73, dead_or_set: 294, 295
insn=55, live_throughout: 7, 73, dead_or_set: 294, 295
insn=56, live_throughout: 7, 73, dead_or_set: 77, 294
insn=57, live_throughout: 7, dead_or_set: 73, 77, 78
insn=58, live_throughout: 7, dead_or_set: 78
insn=728, live_throughout: 7, dead_or_set: 
insn=61, live_throughout: 7, dead_or_set: 
insn=63, live_throughout: 7, dead_or_set: 296
insn=64, live_throughout: 7, dead_or_set: 79, 296
insn=65, live_throughout: 7, dead_or_set: 79, 80
insn=66, live_throughout: 7, 80, dead_or_set: 297
insn=67, live_throughout: 7, dead_or_set: 80, 81, 297
insn=68, live_throughout: 7, dead_or_set: 81
insn=69, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 298
insn=72, live_throughout: 7, dead_or_set: 82, 298
insn=73, live_throughout: 7, dead_or_set: 82, 83
insn=74, live_throughout: 7, 83, dead_or_set: 299
insn=75, live_throughout: 7, 299, dead_or_set: 83, 300
insn=76, live_throughout: 7, dead_or_set: 84, 299, 300
insn=77, live_throughout: 7, dead_or_set: 84, 85
insn=78, live_throughout: 7, dead_or_set: 85, 301
insn=79, live_throughout: 7, dead_or_set: 301
insn=730, live_throughout: 7, dead_or_set: 
insn=82, live_throughout: 7, dead_or_set: 
insn=84, live_throughout: 7, dead_or_set: 302
insn=85, live_throughout: 7, dead_or_set: 86, 302
insn=86, live_throughout: 7, dead_or_set: 86, 87
insn=87, live_throughout: 7, 87, dead_or_set: 303
insn=88, live_throughout: 7, 303, dead_or_set: 87, 304
insn=89, live_throughout: 7, dead_or_set: 88, 303, 304
insn=90, live_throughout: 7, dead_or_set: 88, 89
insn=91, live_throughout: 7, 89, dead_or_set: 305
insn=92, live_throughout: 7, 89, dead_or_set: 90, 305
insn=93, live_throughout: 7, 89, dead_or_set: 90, 91
insn=94, live_throughout: 7, 89, 91, dead_or_set: 306
insn=95, live_throughout: 7, 89, dead_or_set: 91, 92, 306
insn=96, live_throughout: 7, 89, 92, dead_or_set: 307
insn=97, live_throughout: 7, 89, 92, dead_or_set: 307
insn=98, live_throughout: 7, 89, dead_or_set: 92, 307
insn=99, live_throughout: 7, 89, dead_or_set: 307, 308
insn=100, live_throughout: 7, 89, dead_or_set: 307, 308
insn=101, live_throughout: 7, 89, dead_or_set: 93, 307
insn=102, live_throughout: 7, dead_or_set: 89, 93, 94
insn=103, live_throughout: 7, dead_or_set: 94
insn=104, live_throughout: 7, dead_or_set: 
insn=106, live_throughout: 7, dead_or_set: 309
insn=107, live_throughout: 7, dead_or_set: 95, 309
insn=108, live_throughout: 7, dead_or_set: 95, 96
insn=109, live_throughout: 7, 96, dead_or_set: 310
insn=110, live_throughout: 7, 310, dead_or_set: 96, 311
insn=111, live_throughout: 7, dead_or_set: 97, 310, 311
insn=112, live_throughout: 7, dead_or_set: 97, 312
insn=113, live_throughout: 7, dead_or_set: 312
insn=114, live_throughout: 7, dead_or_set: 313
insn=115, live_throughout: 7, dead_or_set: 98, 313
insn=116, live_throughout: 7, dead_or_set: 98
insn=117, live_throughout: 7, dead_or_set: 
insn=119, live_throughout: 7, dead_or_set: 314
insn=120, live_throughout: 7, dead_or_set: 99, 314
insn=121, live_throughout: 7, dead_or_set: 99, 100
insn=122, live_throughout: 7, 100, dead_or_set: 315
insn=123, live_throughout: 7, dead_or_set: 100, 101, 315
insn=124, live_throughout: 7, dead_or_set: 101
insn=125, live_throughout: 7, dead_or_set: 
insn=127, live_throughout: 7, dead_or_set: 316
insn=128, live_throughout: 7, dead_or_set: 102, 316
insn=129, live_throughout: 7, dead_or_set: 102, 103
insn=130, live_throughout: 7, 103, dead_or_set: 317
insn=131, live_throughout: 7, 317, dead_or_set: 103, 318
insn=132, live_throughout: 7, dead_or_set: 104, 317, 318
insn=133, live_throughout: 7, dead_or_set: 104, 105
insn=134, live_throughout: 7, dead_or_set: 105, 319
insn=135, live_throughout: 7, dead_or_set: 319
insn=732, live_throughout: 7, dead_or_set: 
insn=138, live_throughout: 7, dead_or_set: 
insn=140, live_throughout: 7, dead_or_set: 320
insn=141, live_throughout: 7, dead_or_set: 106, 320
insn=142, live_throughout: 7, dead_or_set: 106, 107
insn=143, live_throughout: 7, 107, dead_or_set: 321
insn=144, live_throughout: 7, 321, dead_or_set: 107, 322
insn=145, live_throughout: 7, dead_or_set: 108, 321, 322
insn=146, live_throughout: 7, dead_or_set: 108, 109
insn=147, live_throughout: 7, 109, dead_or_set: 323
insn=148, live_throughout: 7, 109, dead_or_set: 110, 323
insn=149, live_throughout: 7, 109, dead_or_set: 110, 111
insn=150, live_throughout: 7, 109, 111, dead_or_set: 324
insn=151, live_throughout: 7, 109, dead_or_set: 111, 112, 324
insn=152, live_throughout: 7, 109, 112, dead_or_set: 325
insn=153, live_throughout: 7, 109, 112, dead_or_set: 325
insn=154, live_throughout: 7, 109, dead_or_set: 112, 325
insn=155, live_throughout: 7, 109, dead_or_set: 325, 326
insn=156, live_throughout: 7, 109, dead_or_set: 325, 326
insn=157, live_throughout: 7, 109, dead_or_set: 113, 325
insn=158, live_throughout: 7, dead_or_set: 109, 113, 114
insn=159, live_throughout: 7, dead_or_set: 114
insn=734, live_throughout: 7, dead_or_set: 
insn=162, live_throughout: 7, dead_or_set: 
insn=164, live_throughout: 7, dead_or_set: 327
insn=165, live_throughout: 7, dead_or_set: 115, 327
insn=166, live_throughout: 7, dead_or_set: 115, 116
insn=167, live_throughout: 7, 116, dead_or_set: 328
insn=168, live_throughout: 7, dead_or_set: 116, 117, 328
insn=169, live_throughout: 7, dead_or_set: 117
insn=170, live_throughout: 7, dead_or_set: 
insn=172, live_throughout: 7, dead_or_set: 329
insn=173, live_throughout: 7, dead_or_set: 118, 329
insn=174, live_throughout: 7, dead_or_set: 118, 119
insn=175, live_throughout: 7, 119, dead_or_set: 330
insn=176, live_throughout: 7, 330, dead_or_set: 119, 331
insn=177, live_throughout: 7, dead_or_set: 120, 330, 331
insn=178, live_throughout: 7, dead_or_set: 120, 121
insn=179, live_throughout: 7, dead_or_set: 121, 332
insn=180, live_throughout: 7, dead_or_set: 332
insn=736, live_throughout: 7, dead_or_set: 
insn=183, live_throughout: 7, dead_or_set: 
insn=185, live_throughout: 7, dead_or_set: 333
insn=186, live_throughout: 7, dead_or_set: 122, 333
insn=187, live_throughout: 7, dead_or_set: 122, 123
insn=188, live_throughout: 7, 123, dead_or_set: 334
insn=189, live_throughout: 7, 334, dead_or_set: 123, 335
insn=190, live_throughout: 7, dead_or_set: 124, 334, 335
insn=191, live_throughout: 7, dead_or_set: 124, 125
insn=192, live_throughout: 7, 125, dead_or_set: 336
insn=193, live_throughout: 7, 125, dead_or_set: 126, 336
insn=194, live_throughout: 7, 125, dead_or_set: 126, 127
insn=195, live_throughout: 7, 125, 127, dead_or_set: 337
insn=196, live_throughout: 7, 125, dead_or_set: 127, 128, 337
insn=197, live_throughout: 7, 125, 128, dead_or_set: 338
insn=198, live_throughout: 7, 125, 128, dead_or_set: 338
insn=199, live_throughout: 7, 125, dead_or_set: 128, 338
insn=200, live_throughout: 7, 125, dead_or_set: 338, 339
insn=201, live_throughout: 7, 125, dead_or_set: 338, 339
insn=202, live_throughout: 7, 125, dead_or_set: 129, 338
insn=203, live_throughout: 7, dead_or_set: 125, 129, 130
insn=204, live_throughout: 7, dead_or_set: 130
insn=205, live_throughout: 7, dead_or_set: 
insn=207, live_throughout: 7, dead_or_set: 340
insn=208, live_throughout: 7, 340, dead_or_set: 341
insn=209, live_throughout: 7, dead_or_set: 131, 340, 341
insn=816, live_throughout: 7, dead_or_set: 131, 132
insn=211, live_throughout: 7, dead_or_set: 132, 133
insn=212, live_throughout: 7, 133, dead_or_set: 342
insn=213, live_throughout: 7, 133, 342, dead_or_set: 343
insn=214, live_throughout: 7, 133, dead_or_set: 134, 342, 343
insn=817, live_throughout: 7, 133, dead_or_set: 134, 135
insn=216, live_throughout: 7, 133, dead_or_set: 135, 136
insn=217, live_throughout: 7, dead_or_set: 133, 136, 137
insn=818, live_throughout: 7, dead_or_set: 137
insn=219, live_throughout: 7, dead_or_set: 138
insn=220, live_throughout: 7, dead_or_set: 138, 139
insn=221, live_throughout: 7, 139, dead_or_set: 140
insn=222, live_throughout: 7, 139, 140, dead_or_set: 141
insn=223, live_throughout: 7, 139, 140, dead_or_set: 141, 142
insn=224, live_throughout: 7, 139, dead_or_set: 140, 142, 143
insn=225, live_throughout: 7, dead_or_set: 139, 143, 144
insn=819, live_throughout: 7, dead_or_set: 144
insn=227, live_throughout: 7, dead_or_set: 
insn=228, live_throughout: 7, dead_or_set: 344
insn=229, live_throughout: 7, dead_or_set: 145, 344
insn=230, live_throughout: 7, dead_or_set: 145
insn=231, live_throughout: 7, dead_or_set: 
insn=233, live_throughout: 7, dead_or_set: 345
insn=234, live_throughout: 7, dead_or_set: 146, 345
insn=235, live_throughout: 7, dead_or_set: 146
insn=236, live_throughout: 7, dead_or_set: 
insn=238, live_throughout: 7, dead_or_set: 346
insn=239, live_throughout: 7, dead_or_set: 147, 346
insn=240, live_throughout: 7, dead_or_set: 147, 148
insn=241, live_throughout: 7, 148, dead_or_set: 347
insn=242, live_throughout: 7, 148, dead_or_set: 149, 347
insn=243, live_throughout: 7, 148, dead_or_set: 149, 150
insn=244, live_throughout: 7, dead_or_set: 148, 150
insn=245, live_throughout: 7, dead_or_set: 
insn=247, live_throughout: 7, dead_or_set: 
insn=738, live_throughout: 7, dead_or_set: 
insn=250, live_throughout: 7, dead_or_set: 
insn=252, live_throughout: 7, dead_or_set: 
insn=253, live_throughout: 7, dead_or_set: 
insn=740, live_throughout: 7, dead_or_set: 
insn=258, live_throughout: 7, dead_or_set: 
insn=260, live_throughout: 7, dead_or_set: 348
insn=261, live_throughout: 7, dead_or_set: 151, 348
insn=262, live_throughout: 7, dead_or_set: 151
insn=263, live_throughout: 7, dead_or_set: 
insn=265, live_throughout: 7, dead_or_set: 349
insn=266, live_throughout: 7, dead_or_set: 152, 349
insn=267, live_throughout: 7, dead_or_set: 152
insn=268, live_throughout: 7, dead_or_set: 
insn=270, live_throughout: 7, dead_or_set: 350
insn=271, live_throughout: 7, dead_or_set: 153, 350
insn=272, live_throughout: 7, dead_or_set: 153, 154
insn=273, live_throughout: 7, 154, dead_or_set: 351
insn=274, live_throughout: 7, 154, dead_or_set: 155, 351
insn=275, live_throughout: 7, 154, dead_or_set: 155, 156
insn=276, live_throughout: 7, dead_or_set: 154, 156
insn=277, live_throughout: 7, dead_or_set: 
insn=279, live_throughout: 7, dead_or_set: 
insn=742, live_throughout: 7, dead_or_set: 
insn=282, live_throughout: 7, dead_or_set: 
insn=284, live_throughout: 7, dead_or_set: 
insn=285, live_throughout: 7, dead_or_set: 
insn=744, live_throughout: 7, dead_or_set: 
insn=290, live_throughout: 7, dead_or_set: 
insn=292, live_throughout: 7, dead_or_set: 352
insn=293, live_throughout: 7, 352, dead_or_set: 353
insn=294, live_throughout: 7, dead_or_set: 352, 353
insn=295, live_throughout: 7, dead_or_set: 157
insn=296, live_throughout: 7, dead_or_set: 157
insn=297, live_throughout: 7, dead_or_set: 
insn=299, live_throughout: 7, dead_or_set: 354
insn=300, live_throughout: 7, dead_or_set: 158, 354
insn=301, live_throughout: 7, dead_or_set: 158, 159
insn=302, live_throughout: 7, 159, dead_or_set: 355
insn=303, live_throughout: 7, 159, dead_or_set: 160, 355
insn=304, live_throughout: 7, 159, dead_or_set: 160, 161
insn=305, live_throughout: 7, dead_or_set: 159, 161
insn=306, live_throughout: 7, dead_or_set: 
insn=308, live_throughout: 7, dead_or_set: 
insn=746, live_throughout: 7, dead_or_set: 
insn=311, live_throughout: 7, dead_or_set: 
insn=313, live_throughout: 7, dead_or_set: 356
insn=314, live_throughout: 7, 356, dead_or_set: 357
insn=315, live_throughout: 7, dead_or_set: 356, 357
insn=316, live_throughout: 7, dead_or_set: 162
insn=317, live_throughout: 7, dead_or_set: 162
insn=318, live_throughout: 7, dead_or_set: 
insn=320, live_throughout: 7, dead_or_set: 358
insn=321, live_throughout: 7, dead_or_set: 163, 358
insn=322, live_throughout: 7, dead_or_set: 163, 164
insn=323, live_throughout: 7, 164, dead_or_set: 359
insn=324, live_throughout: 7, 164, dead_or_set: 165, 359
insn=325, live_throughout: 7, 164, dead_or_set: 165, 166
insn=326, live_throughout: 7, dead_or_set: 164, 166
insn=327, live_throughout: 7, dead_or_set: 
insn=329, live_throughout: 7, dead_or_set: 
insn=748, live_throughout: 7, dead_or_set: 
insn=332, live_throughout: 7, dead_or_set: 
insn=334, live_throughout: 7, dead_or_set: 360
insn=335, live_throughout: 7, 360, dead_or_set: 361
insn=336, live_throughout: 7, dead_or_set: 360, 361
insn=337, live_throughout: 7, dead_or_set: 167
insn=338, live_throughout: 7, dead_or_set: 167
insn=339, live_throughout: 7, dead_or_set: 
insn=341, live_throughout: 7, dead_or_set: 362
insn=342, live_throughout: 7, dead_or_set: 168, 362
insn=343, live_throughout: 7, dead_or_set: 168, 169
insn=344, live_throughout: 7, 169, dead_or_set: 363
insn=345, live_throughout: 7, 169, dead_or_set: 170, 363
insn=346, live_throughout: 7, 169, dead_or_set: 170, 171
insn=347, live_throughout: 7, dead_or_set: 169, 171
insn=348, live_throughout: 7, dead_or_set: 
insn=350, live_throughout: 7, dead_or_set: 
insn=351, live_throughout: 7, dead_or_set: 
insn=750, live_throughout: 7, dead_or_set: 
insn=354, live_throughout: 7, dead_or_set: 
insn=356, live_throughout: 7, dead_or_set: 
insn=357, live_throughout: 7, dead_or_set: 
insn=358, live_throughout: 7, dead_or_set: 
insn=360, live_throughout: 7, dead_or_set: 172
insn=361, live_throughout: 7, 172, dead_or_set: 364
insn=362, live_throughout: 7, 172, dead_or_set: 364
insn=363, live_throughout: 7, dead_or_set: 172
insn=364, live_throughout: 7, dead_or_set: 0
insn=365, live_throughout: 7, 19, dead_or_set: 365
insn=366, live_throughout: 7, 19, dead_or_set: 173, 365
insn=367, live_throughout: 7, 19, dead_or_set: 173
insn=368, live_throughout: 7, 19, dead_or_set: 366
insn=369, live_throughout: 7, 19, dead_or_set: 174, 366
insn=370, live_throughout: 7, 19, dead_or_set: 174
insn=371, live_throughout: 7, 19, dead_or_set: 
insn=372, live_throughout: 7, 19, dead_or_set: 367
insn=373, live_throughout: 7, 19, dead_or_set: 175, 367
insn=374, live_throughout: 7, 19, dead_or_set: 175, 176
insn=375, live_throughout: 7, 19, 176, dead_or_set: 368
insn=376, live_throughout: 7, 19, 176, dead_or_set: 177, 368
insn=377, live_throughout: 7, 19, 176, dead_or_set: 177, 178
insn=378, live_throughout: 7, 19, 176, 178, dead_or_set: 369
insn=379, live_throughout: 7, 19, dead_or_set: 176, 178, 369
insn=752, live_throughout: 7, 19, dead_or_set: 
insn=593, live_throughout: 7, 19, dead_or_set: 
insn=383, live_throughout: 7, 19, dead_or_set: 179
insn=384, live_throughout: 7, 19, dead_or_set: 179, 180
insn=385, live_throughout: 7, 19, 180, dead_or_set: 370
insn=386, live_throughout: 7, 19, 180, dead_or_set: 181, 370
insn=387, live_throughout: 7, 19, dead_or_set: 180, 181, 182
insn=388, live_throughout: 7, 19, dead_or_set: 182, 183
insn=389, live_throughout: 7, 19, dead_or_set: 183
insn=390, live_throughout: 7, 19, dead_or_set: 184
insn=391, live_throughout: 7, 19, 184, dead_or_set: 185
insn=814, live_throughout: 7, 19, 184, dead_or_set: 185, 186
insn=393, live_throughout: 7, 19, 184, dead_or_set: 186, 187
insn=394, live_throughout: 7, 19, dead_or_set: 184, 187, 188
insn=395, live_throughout: 7, 19, 188, dead_or_set: 189
insn=396, live_throughout: 7, 19, dead_or_set: 188, 189, 190
insn=820, live_throughout: 7, 190, dead_or_set: 
insn=821, live_throughout: 7, 190, dead_or_set: 450
insn=822, live_throughout: 7, 190, 450, dead_or_set: 450
insn=823, live_throughout: 7, 190, dead_or_set: 450
insn=815, live_throughout: 7, dead_or_set: 190, 191
insn=398, live_throughout: 7, dead_or_set: 191, 192
insn=399, live_throughout: 7, dead_or_set: 192
insn=400, live_throughout: 7, dead_or_set: 371
insn=401, live_throughout: 7, dead_or_set: 371
insn=402, live_throughout: 7, dead_or_set: 372
insn=403, live_throughout: 7, dead_or_set: 372
insn=404, live_throughout: 7, dead_or_set: 373
insn=405, live_throughout: 7, dead_or_set: 373
insn=406, live_throughout: 7, dead_or_set: 
insn=407, live_throughout: 7, dead_or_set: 374
insn=408, live_throughout: 7, dead_or_set: 193, 374
insn=409, live_throughout: 7, dead_or_set: 193, 194
insn=410, live_throughout: 7, 194, dead_or_set: 375
insn=411, live_throughout: 7, dead_or_set: 194, 195, 375
insn=412, live_throughout: 7, dead_or_set: 195, 196
insn=413, live_throughout: 7, 196, dead_or_set: 376
insn=414, live_throughout: 7, 196, dead_or_set: 376
insn=415, live_throughout: 7, dead_or_set: 196
insn=416, live_throughout: 7, dead_or_set: 377
insn=417, live_throughout: 7, dead_or_set: 377
insn=418, live_throughout: 7, dead_or_set: 378
insn=419, live_throughout: 7, dead_or_set: 378
insn=420, live_throughout: 7, dead_or_set: 
insn=421, live_throughout: 7, dead_or_set: 379
insn=422, live_throughout: 7, dead_or_set: 197, 379
insn=423, live_throughout: 7, dead_or_set: 197
insn=424, live_throughout: 7, dead_or_set: 0
insn=425, live_throughout: 7, 19, dead_or_set: 
insn=426, live_throughout: 7, 19, dead_or_set: 
insn=427, live_throughout: 7, 19, dead_or_set: 381
insn=428, live_throughout: 7, 19, dead_or_set: 380, 381
insn=429, live_throughout: 7, 19, dead_or_set: 380, 382
insn=430, live_throughout: 7, 19, dead_or_set: 382, 383
insn=431, live_throughout: 7, 19, dead_or_set: 383
insn=433, live_throughout: 7, 19, dead_or_set: 
insn=434, live_throughout: 7, 19, dead_or_set: 
insn=436, live_throughout: 7, 19, dead_or_set: 
insn=438, live_throughout: 7, 19, dead_or_set: 198
insn=439, live_throughout: 7, 19, dead_or_set: 198, 199
insn=440, live_throughout: 7, 19, 199, dead_or_set: 384
insn=441, live_throughout: 7, 19, 199, 384, dead_or_set: 385
insn=442, live_throughout: 7, 19, 199, dead_or_set: 384, 385
insn=443, live_throughout: 7, 19, 199, dead_or_set: 385, 386
insn=444, live_throughout: 7, 19, 199, dead_or_set: 385, 386
insn=445, live_throughout: 7, 19, 199, dead_or_set: 200, 385
insn=446, live_throughout: 7, 19, 199, dead_or_set: 200, 201
insn=447, live_throughout: 7, 19, dead_or_set: 199, 201
insn=448, live_throughout: 7, 19, dead_or_set: 
insn=450, live_throughout: 7, 19, dead_or_set: 
insn=754, live_throughout: 7, 19, dead_or_set: 
insn=455, live_throughout: 7, 19, dead_or_set: 
insn=457, live_throughout: 7, 19, dead_or_set: 202
insn=458, live_throughout: 7, 19, dead_or_set: 202, 203
insn=459, live_throughout: 7, 19, 203, dead_or_set: 387
insn=460, live_throughout: 7, 19, 203, 387, dead_or_set: 388
insn=461, live_throughout: 7, 19, 203, dead_or_set: 387, 388
insn=462, live_throughout: 7, 19, 203, dead_or_set: 388, 389
insn=463, live_throughout: 7, 19, 203, dead_or_set: 388, 389
insn=464, live_throughout: 7, 19, 203, dead_or_set: 204, 388
insn=465, live_throughout: 7, 19, 203, dead_or_set: 204, 205
insn=466, live_throughout: 7, 19, dead_or_set: 203, 205
insn=467, live_throughout: 7, 19, dead_or_set: 
insn=469, live_throughout: 7, 19, dead_or_set: 
insn=756, live_throughout: 7, 19, dead_or_set: 
insn=474, live_throughout: 7, 19, dead_or_set: 
insn=476, live_throughout: 7, 19, dead_or_set: 206
insn=477, live_throughout: 7, 19, dead_or_set: 206, 207
insn=478, live_throughout: 7, 19, 207, dead_or_set: 390
insn=479, live_throughout: 7, 19, 207, 390, dead_or_set: 391
insn=480, live_throughout: 7, 19, 207, dead_or_set: 390, 391
insn=481, live_throughout: 7, 19, 207, dead_or_set: 391, 392
insn=482, live_throughout: 7, 19, 207, dead_or_set: 391, 392
insn=483, live_throughout: 7, 19, 207, dead_or_set: 208, 391
insn=484, live_throughout: 7, 19, 207, dead_or_set: 208, 209
insn=485, live_throughout: 7, 19, dead_or_set: 207, 209
insn=486, live_throughout: 7, 19, dead_or_set: 
insn=488, live_throughout: 7, 19, dead_or_set: 
insn=758, live_throughout: 7, 19, dead_or_set: 
insn=493, live_throughout: 7, 19, dead_or_set: 
insn=495, live_throughout: 7, 19, dead_or_set: 210
insn=496, live_throughout: 7, 19, dead_or_set: 210, 211
insn=497, live_throughout: 7, 19, 211, dead_or_set: 393
insn=498, live_throughout: 7, 19, 211, 393, dead_or_set: 394
insn=499, live_throughout: 7, 19, 211, dead_or_set: 393, 394
insn=500, live_throughout: 7, 19, 211, dead_or_set: 394, 395
insn=501, live_throughout: 7, 19, 211, dead_or_set: 394, 395
insn=502, live_throughout: 7, 19, 211, dead_or_set: 212, 394
insn=503, live_throughout: 7, 19, 211, dead_or_set: 212, 213
insn=504, live_throughout: 7, 19, dead_or_set: 211, 213
insn=505, live_throughout: 7, 19, dead_or_set: 
insn=507, live_throughout: 7, 19, dead_or_set: 
insn=760, live_throughout: 7, 19, dead_or_set: 
insn=512, live_throughout: 7, 19, dead_or_set: 
insn=514, live_throughout: 7, 19, dead_or_set: 214
insn=515, live_throughout: 7, 19, dead_or_set: 214, 215
insn=516, live_throughout: 7, 19, 215, dead_or_set: 396
insn=517, live_throughout: 7, 19, 215, 396, dead_or_set: 397
insn=518, live_throughout: 7, 19, 215, dead_or_set: 396, 397
insn=519, live_throughout: 7, 19, 215, dead_or_set: 397, 398
insn=520, live_throughout: 7, 19, 215, dead_or_set: 397, 398
insn=521, live_throughout: 7, 19, 215, dead_or_set: 216, 397
insn=522, live_throughout: 7, 19, 215, dead_or_set: 216, 217
insn=523, live_throughout: 7, 19, dead_or_set: 215, 217
insn=524, live_throughout: 7, 19, dead_or_set: 
insn=526, live_throughout: 7, 19, dead_or_set: 
insn=762, live_throughout: 7, 19, dead_or_set: 
insn=531, live_throughout: 7, 19, dead_or_set: 
insn=533, live_throughout: 7, 19, dead_or_set: 218
insn=534, live_throughout: 7, 19, dead_or_set: 218, 219
insn=535, live_throughout: 7, 19, 219, dead_or_set: 399
insn=536, live_throughout: 7, 19, 219, 399, dead_or_set: 400
insn=537, live_throughout: 7, 19, 219, dead_or_set: 399, 400
insn=538, live_throughout: 7, 19, 219, dead_or_set: 400, 401
insn=539, live_throughout: 7, 19, 219, dead_or_set: 400, 401
insn=540, live_throughout: 7, 19, 219, dead_or_set: 220, 400
insn=541, live_throughout: 7, 19, 219, dead_or_set: 220, 221
insn=542, live_throughout: 7, 19, dead_or_set: 219, 221
insn=543, live_throughout: 7, 19, dead_or_set: 
insn=545, live_throughout: 7, 19, dead_or_set: 
insn=764, live_throughout: 7, 19, dead_or_set: 
insn=550, live_throughout: 7, 19, dead_or_set: 
insn=552, live_throughout: 7, 19, dead_or_set: 222
insn=553, live_throughout: 7, 19, dead_or_set: 222, 223
insn=554, live_throughout: 7, 19, 223, dead_or_set: 402
insn=555, live_throughout: 7, 19, 223, 402, dead_or_set: 403
insn=556, live_throughout: 7, 19, 223, dead_or_set: 402, 403
insn=557, live_throughout: 7, 19, 223, dead_or_set: 403, 404
insn=558, live_throughout: 7, 19, 223, dead_or_set: 403, 404
insn=559, live_throughout: 7, 19, 223, dead_or_set: 224, 403
insn=560, live_throughout: 7, 19, 223, dead_or_set: 224, 225
insn=561, live_throughout: 7, 19, dead_or_set: 223, 225
insn=562, live_throughout: 7, 19, dead_or_set: 
insn=564, live_throughout: 7, 19, dead_or_set: 
insn=766, live_throughout: 7, 19, dead_or_set: 
insn=569, live_throughout: 7, 19, dead_or_set: 
insn=571, live_throughout: 7, 19, dead_or_set: 226
insn=572, live_throughout: 7, 19, dead_or_set: 226, 227
insn=573, live_throughout: 7, 19, 227, dead_or_set: 405
insn=574, live_throughout: 7, 19, 227, 405, dead_or_set: 406
insn=575, live_throughout: 7, 19, 227, dead_or_set: 405, 406
insn=576, live_throughout: 7, 19, 227, dead_or_set: 406, 407
insn=577, live_throughout: 7, 19, 227, dead_or_set: 406, 407
insn=578, live_throughout: 7, 19, 227, dead_or_set: 228, 406
insn=579, live_throughout: 7, 19, 227, dead_or_set: 228, 229
insn=580, live_throughout: 7, 19, dead_or_set: 227, 229
insn=581, live_throughout: 7, 19, dead_or_set: 
insn=583, live_throughout: 7, 19, dead_or_set: 
insn=768, live_throughout: 7, 19, dead_or_set: 
insn=588, live_throughout: 7, 19, dead_or_set: 
insn=590, live_throughout: 7, 19, dead_or_set: 
insn=774, live_throughout: 7, 19, dead_or_set: 
insn=777, live_throughout: 7, 19, dead_or_set: 
insn=778, live_throughout: 7, 19, dead_or_set: 
insn=779, live_throughout: 7, 19, dead_or_set: 
insn=782, live_throughout: 7, 19, dead_or_set: 
insn=783, live_throughout: 7, 19, dead_or_set: 
insn=784, live_throughout: 7, 19, dead_or_set: 
insn=787, live_throughout: 7, 19, dead_or_set: 
insn=788, live_throughout: 7, 19, dead_or_set: 
insn=789, live_throughout: 7, 19, dead_or_set: 
insn=792, live_throughout: 7, 19, dead_or_set: 
insn=793, live_throughout: 7, 19, dead_or_set: 
insn=794, live_throughout: 7, 19, dead_or_set: 
insn=797, live_throughout: 7, 19, dead_or_set: 
insn=798, live_throughout: 7, 19, dead_or_set: 
insn=799, live_throughout: 7, 19, dead_or_set: 
insn=802, live_throughout: 7, 19, dead_or_set: 
insn=803, live_throughout: 7, 19, dead_or_set: 
insn=804, live_throughout: 7, 19, dead_or_set: 
insn=807, live_throughout: 7, 19, dead_or_set: 
insn=808, live_throughout: 7, 19, dead_or_set: 
insn=809, live_throughout: 7, 19, dead_or_set: 
insn=812, live_throughout: 7, 19, dead_or_set: 
insn=813, live_throughout: 7, 19, dead_or_set: 
insn=591, live_throughout: 7, 19, dead_or_set: 
insn=594, live_throughout: 7, 19, dead_or_set: 
insn=595, live_throughout: 7, 19, dead_or_set: 
insn=597, live_throughout: 7, dead_or_set: 408
insn=598, live_throughout: 7, dead_or_set: 230, 408
insn=599, live_throughout: 7, dead_or_set: 230, 231
insn=600, live_throughout: 7, 231, dead_or_set: 409
insn=601, live_throughout: 7, dead_or_set: 231, 232, 409
insn=602, live_throughout: 7, dead_or_set: 232
insn=603, live_throughout: 7, dead_or_set: 
insn=605, live_throughout: 7, dead_or_set: 410
insn=606, live_throughout: 7, dead_or_set: 233, 410
insn=607, live_throughout: 7, dead_or_set: 233, 234
insn=608, live_throughout: 7, 234, dead_or_set: 411
insn=609, live_throughout: 7, dead_or_set: 234, 235, 411
insn=610, live_throughout: 7, 235, dead_or_set: 412
insn=611, live_throughout: 7, 235, dead_or_set: 236, 412
insn=612, live_throughout: 7, 235, dead_or_set: 236, 237
insn=613, live_throughout: 7, 235, 237, dead_or_set: 413
insn=614, live_throughout: 7, 235, dead_or_set: 237, 238, 413
insn=615, live_throughout: 7, dead_or_set: 235, 238
insn=616, live_throughout: 7, dead_or_set: 
insn=618, live_throughout: 7, dead_or_set: 414
insn=619, live_throughout: 7, dead_or_set: 239, 414
insn=620, live_throughout: 7, 239, dead_or_set: 415
insn=621, live_throughout: 7, dead_or_set: 239, 240, 415
insn=622, live_throughout: 7, dead_or_set: 240
insn=623, live_throughout: 7, dead_or_set: 
insn=625, live_throughout: 7, dead_or_set: 416
insn=626, live_throughout: 7, dead_or_set: 241, 416
insn=627, live_throughout: 7, 241, dead_or_set: 417
insn=628, live_throughout: 7, dead_or_set: 241, 242, 417
insn=629, live_throughout: 7, dead_or_set: 242
insn=630, live_throughout: 7, dead_or_set: 
insn=632, live_throughout: 7, dead_or_set: 418
insn=633, live_throughout: 7, dead_or_set: 243, 418
insn=634, live_throughout: 7, dead_or_set: 243, 244
insn=635, live_throughout: 7, 244, dead_or_set: 419
insn=636, live_throughout: 7, dead_or_set: 244, 419
insn=637, live_throughout: 7, dead_or_set: 420
insn=638, live_throughout: 7, dead_or_set: 245, 420
insn=639, live_throughout: 7, dead_or_set: 245, 246
insn=640, live_throughout: 7, 246, dead_or_set: 421
insn=641, live_throughout: 7, dead_or_set: 246, 247, 421
insn=642, live_throughout: 7, 247, dead_or_set: 422
insn=643, live_throughout: 7, dead_or_set: 247, 422
insn=649, live_throughout: 7, dead_or_set: 425
insn=650, live_throughout: 7, dead_or_set: 251, 425
insn=651, live_throughout: 7, dead_or_set: 251, 252
insn=652, live_throughout: 7, 252, dead_or_set: 426
insn=653, live_throughout: 7, 252, dead_or_set: 253, 426
insn=654, live_throughout: 7, 252, dead_or_set: 253, 254
insn=655, live_throughout: 7, 252, 254, dead_or_set: 427
insn=656, live_throughout: 7, 252, dead_or_set: 254, 255, 427
insn=657, live_throughout: 7, 252, 255, dead_or_set: 428
insn=658, live_throughout: 7, dead_or_set: 252, 255, 428
insn=770, live_throughout: 7, dead_or_set: 
insn=661, live_throughout: 7, dead_or_set: 
insn=663, live_throughout: 7, dead_or_set: 429
insn=664, live_throughout: 7, dead_or_set: 256, 429
insn=665, live_throughout: 7, dead_or_set: 256, 257
insn=666, live_throughout: 7, 257, dead_or_set: 430
insn=667, live_throughout: 7, dead_or_set: 257, 430
insn=668, live_throughout: 7, dead_or_set: 431
insn=669, live_throughout: 7, dead_or_set: 258, 431
insn=670, live_throughout: 7, dead_or_set: 258, 259
insn=671, live_throughout: 7, 259, dead_or_set: 432
insn=672, live_throughout: 7, dead_or_set: 259, 260, 432
insn=673, live_throughout: 7, 260, dead_or_set: 433
insn=674, live_throughout: 7, dead_or_set: 260, 433
insn=680, live_throughout: 7, dead_or_set: 436
insn=681, live_throughout: 7, dead_or_set: 264, 436
insn=682, live_throughout: 7, dead_or_set: 264, 265
insn=683, live_throughout: 7, 265, dead_or_set: 437
insn=684, live_throughout: 7, 265, dead_or_set: 266, 437
insn=685, live_throughout: 7, 265, dead_or_set: 266, 267
insn=686, live_throughout: 7, 265, 267, dead_or_set: 438
insn=687, live_throughout: 7, 265, dead_or_set: 267, 268, 438
insn=688, live_throughout: 7, 265, 268, dead_or_set: 439
insn=689, live_throughout: 7, dead_or_set: 265, 268, 439
insn=772, live_throughout: 7, dead_or_set: 
insn=694, live_throughout: 7, dead_or_set: 
insn=696, live_throughout: 7, dead_or_set: 440
insn=697, live_throughout: 7, dead_or_set: 269, 440
insn=698, live_throughout: 7, dead_or_set: 269, 270
insn=699, live_throughout: 7, 270, dead_or_set: 441
insn=700, live_throughout: 7, 270, dead_or_set: 271, 441
insn=701, live_throughout: 7, 270, dead_or_set: 271, 272
insn=702, live_throughout: 7, 270, 272, dead_or_set: 442
insn=703, live_throughout: 7, dead_or_set: 270, 272, 442
insn=704, live_throughout: 7, dead_or_set: 443
insn=705, live_throughout: 7, dead_or_set: 273, 443
insn=706, live_throughout: 7, dead_or_set: 273, 274
insn=707, live_throughout: 7, 274, dead_or_set: 444
insn=708, live_throughout: 7, 274, dead_or_set: 275, 444
insn=709, live_throughout: 7, 274, dead_or_set: 275, 276
insn=710, live_throughout: 7, 274, 276, dead_or_set: 445
insn=711, live_throughout: 7, 274, dead_or_set: 276, 277, 445
insn=712, live_throughout: 7, 274, 277, dead_or_set: 446
insn=713, live_throughout: 7, dead_or_set: 274, 277, 446
insn=714, live_throughout: 7, dead_or_set: 
insn=716, live_throughout: 7, dead_or_set: 447
insn=717, live_throughout: 7, dead_or_set: 447
insn=718, live_throughout: 7, dead_or_set: 448
insn=719, live_throughout: 7, dead_or_set: 448
insn=720, live_throughout: 7, dead_or_set: 449
insn=721, live_throughout: 7, dead_or_set: 449
insn=722, live_throughout: 7, dead_or_set: 
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 43
changing reg in insn 44
changing reg in insn 45
changing reg in insn 45
changing reg in insn 57
changing reg in insn 47
changing reg in insn 48
changing reg in insn 48
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 51
changing reg in insn 55
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 67
changing reg in insn 67
changing reg in insn 68
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 88
changing reg in insn 89
changing reg in insn 90
changing reg in insn 90
changing reg in insn 102
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 95
changing reg in insn 95
changing reg in insn 98
changing reg in insn 96
changing reg in insn 100
changing reg in insn 98
changing reg in insn 101
changing reg in insn 102
changing reg in insn 102
changing reg in insn 103
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 115
changing reg in insn 116
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 123
changing reg in insn 123
changing reg in insn 124
changing reg in insn 128
changing reg in insn 129
changing reg in insn 129
changing reg in insn 131
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 135
changing reg in insn 141
changing reg in insn 142
changing reg in insn 142
changing reg in insn 144
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 158
changing reg in insn 148
changing reg in insn 149
changing reg in insn 149
changing reg in insn 151
changing reg in insn 151
changing reg in insn 154
changing reg in insn 152
changing reg in insn 156
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 168
changing reg in insn 168
changing reg in insn 169
changing reg in insn 173
changing reg in insn 174
changing reg in insn 174
changing reg in insn 176
changing reg in insn 177
changing reg in insn 178
changing reg in insn 178
changing reg in insn 179
changing reg in insn 180
changing reg in insn 186
changing reg in insn 187
changing reg in insn 187
changing reg in insn 189
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 203
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 196
changing reg in insn 196
changing reg in insn 199
changing reg in insn 197
changing reg in insn 201
changing reg in insn 199
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 204
changing reg in insn 209
changing reg in insn 816
changing reg in insn 816
changing reg in insn 211
changing reg in insn 211
changing reg in insn 217
changing reg in insn 214
changing reg in insn 817
changing reg in insn 817
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 818
changing reg in insn 219
changing reg in insn 220
changing reg in insn 220
changing reg in insn 225
changing reg in insn 221
changing reg in insn 224
changing reg in insn 222
changing reg in insn 223
changing reg in insn 223
changing reg in insn 224
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 819
changing reg in insn 229
changing reg in insn 230
changing reg in insn 234
changing reg in insn 235
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 244
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 261
changing reg in insn 262
changing reg in insn 266
changing reg in insn 267
changing reg in insn 271
changing reg in insn 272
changing reg in insn 272
changing reg in insn 276
changing reg in insn 274
changing reg in insn 275
changing reg in insn 275
changing reg in insn 276
changing reg in insn 295
changing reg in insn 296
changing reg in insn 300
changing reg in insn 301
changing reg in insn 301
changing reg in insn 305
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 316
changing reg in insn 317
changing reg in insn 321
changing reg in insn 322
changing reg in insn 322
changing reg in insn 326
changing reg in insn 324
changing reg in insn 325
changing reg in insn 325
changing reg in insn 326
changing reg in insn 337
changing reg in insn 338
changing reg in insn 342
changing reg in insn 343
changing reg in insn 343
changing reg in insn 347
changing reg in insn 345
changing reg in insn 346
changing reg in insn 346
changing reg in insn 347
changing reg in insn 360
changing reg in insn 363
changing reg in insn 366
changing reg in insn 367
changing reg in insn 369
changing reg in insn 370
changing reg in insn 373
changing reg in insn 374
changing reg in insn 374
changing reg in insn 379
changing reg in insn 376
changing reg in insn 376
changing reg in insn 377
changing reg in insn 377
changing reg in insn 379
changing reg in insn 383
changing reg in insn 384
changing reg in insn 384
changing reg in insn 387
changing reg in insn 386
changing reg in insn 387
changing reg in insn 387
changing reg in insn 388
changing reg in insn 388
changing reg in insn 389
changing reg in insn 390
changing reg in insn 394
changing reg in insn 391
changing reg in insn 814
changing reg in insn 814
changing reg in insn 393
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 396
changing reg in insn 395
changing reg in insn 396
changing reg in insn 396
changing reg in insn 815
changing reg in insn 815
changing reg in insn 398
changing reg in insn 399
changing reg in insn 408
changing reg in insn 409
changing reg in insn 409
changing reg in insn 411
changing reg in insn 411
changing reg in insn 412
changing reg in insn 412
changing reg in insn 415
changing reg in insn 422
changing reg in insn 423
changing reg in insn 438
changing reg in insn 439
changing reg in insn 439
changing reg in insn 447
changing reg in insn 445
changing reg in insn 446
changing reg in insn 446
changing reg in insn 447
changing reg in insn 457
changing reg in insn 458
changing reg in insn 458
changing reg in insn 466
changing reg in insn 464
changing reg in insn 465
changing reg in insn 465
changing reg in insn 466
changing reg in insn 476
changing reg in insn 477
changing reg in insn 477
changing reg in insn 485
changing reg in insn 483
changing reg in insn 484
changing reg in insn 484
changing reg in insn 485
changing reg in insn 495
changing reg in insn 496
changing reg in insn 496
changing reg in insn 504
changing reg in insn 502
changing reg in insn 503
changing reg in insn 503
changing reg in insn 504
changing reg in insn 514
changing reg in insn 515
changing reg in insn 515
changing reg in insn 523
changing reg in insn 521
changing reg in insn 522
changing reg in insn 522
changing reg in insn 523
changing reg in insn 533
changing reg in insn 534
changing reg in insn 534
changing reg in insn 542
changing reg in insn 540
changing reg in insn 541
changing reg in insn 541
changing reg in insn 542
changing reg in insn 552
changing reg in insn 553
changing reg in insn 553
changing reg in insn 561
changing reg in insn 559
changing reg in insn 560
changing reg in insn 560
changing reg in insn 561
changing reg in insn 571
changing reg in insn 572
changing reg in insn 572
changing reg in insn 580
changing reg in insn 578
changing reg in insn 579
changing reg in insn 579
changing reg in insn 580
changing reg in insn 598
changing reg in insn 599
changing reg in insn 599
changing reg in insn 601
changing reg in insn 601
changing reg in insn 602
changing reg in insn 606
changing reg in insn 607
changing reg in insn 607
changing reg in insn 609
changing reg in insn 609
changing reg in insn 615
changing reg in insn 611
changing reg in insn 612
changing reg in insn 612
changing reg in insn 614
changing reg in insn 614
changing reg in insn 615
changing reg in insn 619
changing reg in insn 621
changing reg in insn 621
changing reg in insn 622
changing reg in insn 626
changing reg in insn 628
changing reg in insn 628
changing reg in insn 629
changing reg in insn 633
changing reg in insn 634
changing reg in insn 634
changing reg in insn 636
changing reg in insn 638
changing reg in insn 639
changing reg in insn 639
changing reg in insn 641
changing reg in insn 641
changing reg in insn 643
changing reg in insn 650
changing reg in insn 651
changing reg in insn 651
changing reg in insn 658
changing reg in insn 653
changing reg in insn 654
changing reg in insn 654
changing reg in insn 656
changing reg in insn 656
changing reg in insn 658
changing reg in insn 664
changing reg in insn 665
changing reg in insn 665
changing reg in insn 667
changing reg in insn 669
changing reg in insn 670
changing reg in insn 670
changing reg in insn 672
changing reg in insn 672
changing reg in insn 674
changing reg in insn 681
changing reg in insn 682
changing reg in insn 682
changing reg in insn 689
changing reg in insn 684
changing reg in insn 685
changing reg in insn 685
changing reg in insn 687
changing reg in insn 687
changing reg in insn 689
changing reg in insn 697
changing reg in insn 698
changing reg in insn 698
changing reg in insn 703
changing reg in insn 700
changing reg in insn 700
changing reg in insn 701
changing reg in insn 701
changing reg in insn 703
changing reg in insn 705
changing reg in insn 706
changing reg in insn 706
changing reg in insn 713
changing reg in insn 708
changing reg in insn 709
changing reg in insn 709
changing reg in insn 711
changing reg in insn 711
changing reg in insn 713
changing reg in insn 5
changing reg in insn 6
changing reg in insn 8
changing reg in insn 10
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 26
changing reg in insn 27
changing reg in insn 29
changing reg in insn 31
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 39
changing reg in insn 40
changing reg in insn 42
changing reg in insn 44
changing reg in insn 43
changing reg in insn 44
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 55
changing reg in insn 53
changing reg in insn 52
changing reg in insn 51
changing reg in insn 56
changing reg in insn 54
changing reg in insn 53
changing reg in insn 52
changing reg in insn 54
changing reg in insn 55
changing reg in insn 63
changing reg in insn 64
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 74
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 78
changing reg in insn 79
changing reg in insn 84
changing reg in insn 85
changing reg in insn 87
changing reg in insn 89
changing reg in insn 88
changing reg in insn 89
changing reg in insn 91
changing reg in insn 92
changing reg in insn 94
changing reg in insn 95
changing reg in insn 100
changing reg in insn 98
changing reg in insn 97
changing reg in insn 96
changing reg in insn 101
changing reg in insn 99
changing reg in insn 98
changing reg in insn 97
changing reg in insn 99
changing reg in insn 100
changing reg in insn 106
changing reg in insn 107
changing reg in insn 109
changing reg in insn 111
changing reg in insn 110
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 114
changing reg in insn 115
changing reg in insn 119
changing reg in insn 120
changing reg in insn 122
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 130
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 134
changing reg in insn 135
changing reg in insn 140
changing reg in insn 141
changing reg in insn 143
changing reg in insn 145
changing reg in insn 144
changing reg in insn 145
changing reg in insn 147
changing reg in insn 148
changing reg in insn 150
changing reg in insn 151
changing reg in insn 156
changing reg in insn 154
changing reg in insn 153
changing reg in insn 152
changing reg in insn 157
changing reg in insn 155
changing reg in insn 154
changing reg in insn 153
changing reg in insn 155
changing reg in insn 156
changing reg in insn 164
changing reg in insn 165
changing reg in insn 167
changing reg in insn 168
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 177
changing reg in insn 176
changing reg in insn 177
changing reg in insn 179
changing reg in insn 180
changing reg in insn 185
changing reg in insn 186
changing reg in insn 188
changing reg in insn 190
changing reg in insn 189
changing reg in insn 190
changing reg in insn 192
changing reg in insn 193
changing reg in insn 195
changing reg in insn 196
changing reg in insn 201
changing reg in insn 199
changing reg in insn 198
changing reg in insn 197
changing reg in insn 202
changing reg in insn 200
changing reg in insn 199
changing reg in insn 198
changing reg in insn 200
changing reg in insn 201
changing reg in insn 207
changing reg in insn 209
changing reg in insn 208
changing reg in insn 209
changing reg in insn 212
changing reg in insn 214
changing reg in insn 213
changing reg in insn 214
changing reg in insn 228
changing reg in insn 229
changing reg in insn 233
changing reg in insn 234
changing reg in insn 238
changing reg in insn 239
changing reg in insn 241
changing reg in insn 242
changing reg in insn 260
changing reg in insn 261
changing reg in insn 265
changing reg in insn 266
changing reg in insn 270
changing reg in insn 271
changing reg in insn 273
changing reg in insn 274
changing reg in insn 292
changing reg in insn 294
changing reg in insn 293
changing reg in insn 294
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 303
changing reg in insn 313
changing reg in insn 315
changing reg in insn 314
changing reg in insn 315
changing reg in insn 320
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 334
changing reg in insn 336
changing reg in insn 335
changing reg in insn 336
changing reg in insn 341
changing reg in insn 342
changing reg in insn 344
changing reg in insn 345
changing reg in insn 361
changing reg in insn 362
changing reg in insn 365
changing reg in insn 368
changing reg in insn 372
changing reg in insn 373
changing reg in insn 375
changing reg in insn 376
changing reg in insn 378
changing reg in insn 379
changing reg in insn 385
changing reg in insn 400
changing reg in insn 401
changing reg in insn 402
changing reg in insn 403
changing reg in insn 404
changing reg in insn 405
changing reg in insn 407
changing reg in insn 408
changing reg in insn 410
changing reg in insn 411
changing reg in insn 413
changing reg in insn 414
changing reg in insn 416
changing reg in insn 417
changing reg in insn 418
changing reg in insn 419
changing reg in insn 421
changing reg in insn 422
changing reg in insn 428
changing reg in insn 429
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 430
changing reg in insn 431
changing reg in insn 440
changing reg in insn 442
changing reg in insn 444
changing reg in insn 442
changing reg in insn 444
changing reg in insn 442
changing reg in insn 441
changing reg in insn 445
changing reg in insn 443
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 459
changing reg in insn 461
changing reg in insn 463
changing reg in insn 461
changing reg in insn 463
changing reg in insn 461
changing reg in insn 460
changing reg in insn 464
changing reg in insn 462
changing reg in insn 461
changing reg in insn 462
changing reg in insn 463
changing reg in insn 478
changing reg in insn 480
changing reg in insn 482
changing reg in insn 480
changing reg in insn 482
changing reg in insn 480
changing reg in insn 479
changing reg in insn 483
changing reg in insn 481
changing reg in insn 480
changing reg in insn 481
changing reg in insn 482
changing reg in insn 497
changing reg in insn 499
changing reg in insn 501
changing reg in insn 499
changing reg in insn 501
changing reg in insn 499
changing reg in insn 498
changing reg in insn 502
changing reg in insn 500
changing reg in insn 499
changing reg in insn 500
changing reg in insn 501
changing reg in insn 516
changing reg in insn 518
changing reg in insn 520
changing reg in insn 518
changing reg in insn 520
changing reg in insn 518
changing reg in insn 517
changing reg in insn 521
changing reg in insn 519
changing reg in insn 518
changing reg in insn 519
changing reg in insn 520
changing reg in insn 535
changing reg in insn 537
changing reg in insn 539
changing reg in insn 537
changing reg in insn 539
changing reg in insn 537
changing reg in insn 536
changing reg in insn 540
changing reg in insn 538
changing reg in insn 537
changing reg in insn 538
changing reg in insn 539
changing reg in insn 554
changing reg in insn 556
changing reg in insn 558
changing reg in insn 556
changing reg in insn 558
changing reg in insn 556
changing reg in insn 555
changing reg in insn 559
changing reg in insn 557
changing reg in insn 556
changing reg in insn 557
changing reg in insn 558
changing reg in insn 573
changing reg in insn 575
changing reg in insn 577
changing reg in insn 575
changing reg in insn 577
changing reg in insn 575
changing reg in insn 574
changing reg in insn 578
changing reg in insn 576
changing reg in insn 575
changing reg in insn 576
changing reg in insn 577
changing reg in insn 597
changing reg in insn 598
changing reg in insn 600
changing reg in insn 601
changing reg in insn 605
changing reg in insn 606
changing reg in insn 608
changing reg in insn 609
changing reg in insn 610
changing reg in insn 611
changing reg in insn 613
changing reg in insn 614
changing reg in insn 618
changing reg in insn 619
changing reg in insn 620
changing reg in insn 621
changing reg in insn 625
changing reg in insn 626
changing reg in insn 627
changing reg in insn 628
changing reg in insn 632
changing reg in insn 633
changing reg in insn 635
changing reg in insn 636
changing reg in insn 637
changing reg in insn 638
changing reg in insn 640
changing reg in insn 641
changing reg in insn 642
changing reg in insn 643
changing reg in insn 649
changing reg in insn 650
changing reg in insn 652
changing reg in insn 653
changing reg in insn 655
changing reg in insn 656
changing reg in insn 657
changing reg in insn 658
changing reg in insn 663
changing reg in insn 664
changing reg in insn 666
changing reg in insn 667
changing reg in insn 668
changing reg in insn 669
changing reg in insn 671
changing reg in insn 672
changing reg in insn 673
changing reg in insn 674
changing reg in insn 680
changing reg in insn 681
changing reg in insn 683
changing reg in insn 684
changing reg in insn 686
changing reg in insn 687
changing reg in insn 688
changing reg in insn 689
changing reg in insn 696
changing reg in insn 697
changing reg in insn 699
changing reg in insn 700
changing reg in insn 702
changing reg in insn 703
changing reg in insn 704
changing reg in insn 705
changing reg in insn 707
changing reg in insn 708
changing reg in insn 710
changing reg in insn 711
changing reg in insn 712
changing reg in insn 713
changing reg in insn 716
changing reg in insn 717
changing reg in insn 718
changing reg in insn 719
changing reg in insn 720
changing reg in insn 721
changing reg in insn 822
changing reg in insn 821
changing reg in insn 823
changing reg in insn 822
Spilling for insn 102.
Using reg 1 for reload 0
Spilling for insn 203.
Using reg 1 for reload 0
Spilling for insn 209.
Using reg 2 for reload 0
Spilling for insn 214.
Using reg 2 for reload 0

Reloads for insn # 102
Reload 0: reload_in (SI) = (reg:SI 2 cx [orig:89 D.5969 ] [89])
	reload_out (SI) = (reg:SI 0 ax [orig:94 D.5974 ] [94])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 2 cx [orig:89 D.5969 ] [89])
	reload_out_reg: (reg:SI 0 ax [orig:94 D.5974 ] [94])
	reload_reg_rtx: (reg:SI 1 dx)

Reloads for insn # 203
Reload 0: reload_in (SI) = (reg:SI 2 cx [orig:125 D.6014 ] [125])
	reload_out (SI) = (reg:SI 0 ax [orig:130 D.6019 ] [130])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 2 cx [orig:125 D.6014 ] [125])
	reload_out_reg: (reg:SI 0 ax [orig:130 D.6019 ] [130])
	reload_reg_rtx: (reg:SI 1 dx)

Reloads for insn # 209
Reload 0: reload_in (SI) = (reg:SI 1 dx [341])
	reload_out (SI) = (reg:SI 0 ax [orig:131 D.6020 ] [131])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 1 dx [341])
	reload_out_reg: (reg:SI 0 ax [orig:131 D.6020 ] [131])
	reload_reg_rtx: (reg:SI 2 cx)

Reloads for insn # 214
Reload 0: reload_in (SI) = (reg:SI 1 dx [343])
	reload_out (SI) = (reg:SI 0 ax [orig:134 D.6023 ] [134])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 1 dx [343])
	reload_out_reg: (reg:SI 0 ax [orig:134 D.6023 ] [134])
	reload_reg_rtx: (reg:SI 2 cx)
deleting insn with uid = 55.
deleting insn with uid = 56.
deleting insn with uid = 100.
deleting insn with uid = 101.
deleting insn with uid = 156.
deleting insn with uid = 157.
deleting insn with uid = 201.
deleting insn with uid = 202.
deleting insn with uid = 388.
deleting insn with uid = 412.
deleting insn with uid = 444.
deleting insn with uid = 445.
deleting insn with uid = 463.
deleting insn with uid = 464.
deleting insn with uid = 482.
deleting insn with uid = 483.
deleting insn with uid = 501.
deleting insn with uid = 502.
deleting insn with uid = 520.
deleting insn with uid = 521.
deleting insn with uid = 539.
deleting insn with uid = 540.
deleting insn with uid = 558.
deleting insn with uid = 559.
deleting insn with uid = 577.
deleting insn with uid = 578.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 364.
verify found no changes in insn with uid = 406.
verify found no changes in insn with uid = 420.
verify found no changes in insn with uid = 424.
verify found no changes in insn with uid = 722.


Checker_Move

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 8[st] 9[st(1)] 10[st(2)] 17[flags] 19[fpcr]
;;  ref usage 	r0={275d,271u,4e} r1={85d,83u,4e} r2={28d,22u,8e} r6={1d,271u} r7={1d,90u} r8={21d,16u} r9={12d,7u} r10={6d,1u} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r17={149d,35u} r18={5d} r19={5d,1u} r20={1d,1u,5e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 1593{774d,798u,21e} in 569{564 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 278 279 280 281 282

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [278])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:490 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 0 ax [orig:59 D.5930 ] [59])
        (mem/s/j:SI (reg/f:SI 0 ax [278]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:490 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (parallel [
            (set (reg:SI 1 dx [orig:60 D.5931 ] [60])
                (plus:SI (reg:SI 0 ax [orig:59 D.5930 ] [59])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:490 252 {*addsi_1}
     (nil))

(insn 8 7 9 2 (set (reg/f:SI 0 ax [279])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:490 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (parallel [
            (set (reg:SI 1 dx [280])
                (plus:SI (reg:SI 1 dx [orig:60 D.5931 ] [60])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:490 252 {*addsi_1}
     (nil))

(insn 10 9 11 2 (set (reg:HI 0 ax [orig:61 D.5932 ] [61])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [280])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [279]))
                (const_int 4 [0x4])) [0 display_21(D)->positions[D.5931_20].x+0 S2 A32])) src/gui.c:490 65 {*movhi_internal}
     (nil))

(insn 11 10 12 2 (set (reg:SI 0 ax [281])
        (sign_extend:SI (reg:HI 0 ax [orig:61 D.5932 ] [61]))) src/gui.c:490 130 {extendhisi2}
     (nil))

(insn 12 11 13 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 pos_src_x+0 S4 A32])
        (reg:SI 0 ax [281])) src/gui.c:490 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (reg/f:SI 0 ax [282])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:492 64 {*movsi_internal}
     (nil))

(insn 14 13 15 2 (set (reg:SI 0 ax [orig:62 D.5933 ] [62])
        (mem/s/j:SI (reg/f:SI 0 ax [282]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:492 64 {*movsi_internal}
     (nil))

(insn 15 14 16 2 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:62 D.5933 ] [62])
            (const_int 12 [0xc]))) src/gui.c:492 6 {*cmpsi_1}
     (nil))

(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 61)
            (pc))) src/gui.c:492 591 {*jcc_1}
     (nil)
 -> 61)
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  6

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 64 65 283 284

;; Pred edge  2 (fallthru)
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 3 (set (reg/f:SI 0 ax [283])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:494 64 {*movsi_internal}
     (nil))

(insn 19 18 20 3 (set (reg:SI 0 ax [orig:63 D.5936 ] [63])
        (mem/s/j:SI (reg/f:SI 0 ax [283]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:494 64 {*movsi_internal}
     (nil))

(insn 20 19 21 3 (parallel [
            (set (reg:SI 1 dx [orig:64 D.5937 ] [64])
                (plus:SI (reg:SI 0 ax [orig:63 D.5936 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:494 252 {*addsi_1}
     (nil))

(insn 21 20 22 3 (set (reg/f:SI 0 ax [284])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:494 64 {*movsi_internal}
     (nil))

(insn 22 21 23 3 (set (reg:SI 0 ax [orig:65 D.5938 ] [65])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:64 D.5937 ] [64])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [284]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5937_26].nb_checkers+0 S4 A32])) src/gui.c:494 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:65 D.5938 ] [65])
            (const_int 6 [0x6]))) src/gui.c:494 6 {*cmpsi_1}
     (nil))

(jump_insn 24 23 25 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) src/gui.c:494 591 {*jcc_1}
     (nil)
 -> 37)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 68 69 285 286 287 288

;; Pred edge  3 (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 4 (set (reg/f:SI 0 ax [285])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:495 64 {*movsi_internal}
     (nil))

(insn 27 26 28 4 (set (reg:SI 0 ax [orig:66 D.5941 ] [66])
        (mem/s/j:SI (reg/f:SI 0 ax [285]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:495 64 {*movsi_internal}
     (nil))

(insn 28 27 29 4 (parallel [
            (set (reg:SI 1 dx [orig:67 D.5942 ] [67])
                (plus:SI (reg:SI 0 ax [orig:66 D.5941 ] [66])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:495 252 {*addsi_1}
     (nil))

(insn 29 28 30 4 (set (reg/f:SI 0 ax [286])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:495 64 {*movsi_internal}
     (nil))

(insn 30 29 31 4 (parallel [
            (set (reg:SI 1 dx [287])
                (plus:SI (reg:SI 1 dx [orig:67 D.5942 ] [67])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:495 252 {*addsi_1}
     (nil))

(insn 31 30 32 4 (set (reg:HI 0 ax [orig:68 D.5943 ] [68])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [287])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [286]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5942_30].y+0 S2 A16])) src/gui.c:495 65 {*movhi_internal}
     (nil))

(insn 32 31 33 4 (set (reg:SI 0 ax [orig:69 D.5944 ] [69])
        (sign_extend:SI (reg:HI 0 ax [orig:68 D.5943 ] [68]))) src/gui.c:495 130 {extendhisi2}
     (nil))

(insn 33 32 34 4 (parallel [
            (set (reg:SI 0 ax [288])
                (plus:SI (reg:SI 0 ax [orig:69 D.5944 ] [69])
                    (const_int 120 [0x78])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:495 252 {*addsi_1}
     (nil))

(insn 34 33 726 4 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])
        (reg:SI 0 ax [288])) src/gui.c:495 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:69 D.5944 ] [69])
            (const_int 120 [0x78]))
        (nil)))

(jump_insn 726 34 727 4 (set (pc)
        (label_ref 104)) 606 {jump}
     (nil)
 -> 104)
;; End of basic block 4 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 727 726 37)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 71 72 73 74 75 76 77 78 289 290 291 292 293 294 295

;; Pred edge  3
(code_label 37 727 38 5 72 "" [1 uses])

(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 5 (set (reg/f:SI 0 ax [289])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 40 39 41 5 (set (reg:SI 0 ax [orig:70 D.5946 ] [70])
        (mem/s/j:SI (reg/f:SI 0 ax [289]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 41 40 42 5 (parallel [
            (set (reg:SI 1 dx [orig:71 D.5947 ] [71])
                (plus:SI (reg:SI 0 ax [orig:70 D.5946 ] [70])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 252 {*addsi_1}
     (nil))

(insn 42 41 43 5 (set (reg/f:SI 0 ax [290])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 43 42 44 5 (parallel [
            (set (reg:SI 1 dx [291])
                (plus:SI (reg:SI 1 dx [orig:71 D.5947 ] [71])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 252 {*addsi_1}
     (nil))

(insn 44 43 45 5 (set (reg:HI 0 ax [orig:72 D.5948 ] [72])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [291])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [290]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5947_35].y+0 S2 A16])) src/gui.c:497 65 {*movhi_internal}
     (nil))

(insn 45 44 46 5 (set (reg:SI 2 cx [orig:73 D.5949 ] [73])
        (sign_extend:SI (reg:HI 0 ax [orig:72 D.5948 ] [72]))) src/gui.c:497 130 {extendhisi2}
     (nil))

(insn 46 45 47 5 (set (reg/f:SI 0 ax [292])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 47 46 48 5 (set (reg:SI 0 ax [orig:74 D.5950 ] [74])
        (mem/s/j:SI (reg/f:SI 0 ax [292]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 48 47 49 5 (parallel [
            (set (reg:SI 1 dx [orig:75 D.5951 ] [75])
                (plus:SI (reg:SI 0 ax [orig:74 D.5950 ] [74])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 252 {*addsi_1}
     (nil))

(insn 49 48 50 5 (set (reg/f:SI 0 ax [293])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 50 49 51 5 (set (reg:SI 1 dx [orig:76 D.5952 ] [76])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:75 D.5951 ] [75])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [293]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5951_39].nb_checkers+0 S4 A32])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 51 50 52 5 (set (reg:SI 0 ax [294])
        (reg:SI 1 dx [orig:76 D.5952 ] [76])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(insn 52 51 53 5 (parallel [
            (set (reg:SI 0 ax [294])
                (ashift:SI (reg:SI 0 ax [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 497 {*ashlsi3_1}
     (nil))

(insn 53 52 54 5 (parallel [
            (set (reg:SI 0 ax [294])
                (plus:SI (reg:SI 0 ax [294])
                    (reg:SI 1 dx [orig:76 D.5952 ] [76])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:76 D.5952 ] [76])
            (const_int 5 [0x5]))
        (nil)))

(insn 54 53 57 5 (parallel [
            (set (reg:SI 0 ax [295])
                (ashift:SI (reg:SI 0 ax [294])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 497 {*ashlsi3_1}
     (nil))

(insn 57 54 58 5 (parallel [
            (set (reg:SI 0 ax [orig:78 D.5954 ] [78])
                (plus:SI (reg:SI 2 cx [orig:73 D.5949 ] [73])
                    (reg:SI 0 ax [orig:77 D.5953 ] [77])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:497 252 {*addsi_1}
     (nil))

(insn 58 57 728 5 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])
        (reg:SI 0 ax [orig:78 D.5954 ] [78])) src/gui.c:497 64 {*movsi_internal}
     (nil))

(jump_insn 728 58 729 5 (set (pc)
        (label_ref 104)) 606 {jump}
     (nil)
 -> 104)
;; End of basic block 5 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 729 728 61)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 81 296 297

;; Pred edge  2
(code_label 61 729 62 6 71 "" [1 uses])

(note 62 61 63 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 63 62 64 6 (set (reg/f:SI 0 ax [296])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:501 64 {*movsi_internal}
     (nil))

(insn 64 63 65 6 (set (reg:SI 0 ax [orig:79 D.5956 ] [79])
        (mem/s/j:SI (reg/f:SI 0 ax [296]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:501 64 {*movsi_internal}
     (nil))

(insn 65 64 66 6 (parallel [
            (set (reg:SI 1 dx [orig:80 D.5957 ] [80])
                (plus:SI (reg:SI 0 ax [orig:79 D.5956 ] [79])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:501 252 {*addsi_1}
     (nil))

(insn 66 65 67 6 (set (reg/f:SI 0 ax [297])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:501 64 {*movsi_internal}
     (nil))

(insn 67 66 68 6 (set (reg:SI 0 ax [orig:81 D.5958 ] [81])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:80 D.5957 ] [80])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [297]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5957_45].nb_checkers+0 S4 A32])) src/gui.c:501 64 {*movsi_internal}
     (nil))

(insn 68 67 69 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:81 D.5958 ] [81])
            (const_int 6 [0x6]))) src/gui.c:501 6 {*cmpsi_1}
     (nil))

(jump_insn 69 68 70 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) src/gui.c:501 591 {*jcc_1}
     (nil)
 -> 82)
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82 83 84 85 298 299 300 301

;; Pred edge  6 (fallthru)
(note 70 69 71 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 71 70 72 7 (set (reg/f:SI 0 ax [298])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:502 64 {*movsi_internal}
     (nil))

(insn 72 71 73 7 (set (reg:SI 0 ax [orig:82 D.5961 ] [82])
        (mem/s/j:SI (reg/f:SI 0 ax [298]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:502 64 {*movsi_internal}
     (nil))

(insn 73 72 74 7 (parallel [
            (set (reg:SI 1 dx [orig:83 D.5962 ] [83])
                (plus:SI (reg:SI 0 ax [orig:82 D.5961 ] [82])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:502 252 {*addsi_1}
     (nil))

(insn 74 73 75 7 (set (reg/f:SI 0 ax [299])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:502 64 {*movsi_internal}
     (nil))

(insn 75 74 76 7 (parallel [
            (set (reg:SI 1 dx [300])
                (plus:SI (reg:SI 1 dx [orig:83 D.5962 ] [83])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:502 252 {*addsi_1}
     (nil))

(insn 76 75 77 7 (set (reg:HI 0 ax [orig:84 D.5963 ] [84])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [300])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [299]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5962_48].y+0 S2 A16])) src/gui.c:502 65 {*movhi_internal}
     (nil))

(insn 77 76 78 7 (set (reg:SI 0 ax [orig:85 D.5964 ] [85])
        (sign_extend:SI (reg:HI 0 ax [orig:84 D.5963 ] [84]))) src/gui.c:502 130 {extendhisi2}
     (nil))

(insn 78 77 79 7 (parallel [
            (set (reg:SI 0 ax [301])
                (plus:SI (reg:SI 0 ax [orig:85 D.5964 ] [85])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:502 252 {*addsi_1}
     (nil))

(insn 79 78 730 7 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])
        (reg:SI 0 ax [301])) src/gui.c:502 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:85 D.5964 ] [85])
            (const_int -120 [0xffffffffffffff88]))
        (nil)))

(jump_insn 730 79 731 7 (set (pc)
        (label_ref 104)) 606 {jump}
     (nil)
 -> 104)
;; End of basic block 7 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 731 730 82)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 86 87 88 89 90 91 92 93 94 302 303 304 305 306 307 308

;; Pred edge  6
(code_label 82 731 83 8 74 "" [1 uses])

(note 83 82 84 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 84 83 85 8 (set (reg/f:SI 0 ax [302])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 85 84 86 8 (set (reg:SI 0 ax [orig:86 D.5966 ] [86])
        (mem/s/j:SI (reg/f:SI 0 ax [302]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 86 85 87 8 (parallel [
            (set (reg:SI 1 dx [orig:87 D.5967 ] [87])
                (plus:SI (reg:SI 0 ax [orig:86 D.5966 ] [86])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 252 {*addsi_1}
     (nil))

(insn 87 86 88 8 (set (reg/f:SI 0 ax [303])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 88 87 89 8 (parallel [
            (set (reg:SI 1 dx [304])
                (plus:SI (reg:SI 1 dx [orig:87 D.5967 ] [87])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 252 {*addsi_1}
     (nil))

(insn 89 88 90 8 (set (reg:HI 0 ax [orig:88 D.5968 ] [88])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [304])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [303]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5967_53].y+0 S2 A16])) src/gui.c:504 65 {*movhi_internal}
     (nil))

(insn 90 89 91 8 (set (reg:SI 2 cx [orig:89 D.5969 ] [89])
        (sign_extend:SI (reg:HI 0 ax [orig:88 D.5968 ] [88]))) src/gui.c:504 130 {extendhisi2}
     (nil))

(insn 91 90 92 8 (set (reg/f:SI 0 ax [305])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 92 91 93 8 (set (reg:SI 0 ax [orig:90 D.5970 ] [90])
        (mem/s/j:SI (reg/f:SI 0 ax [305]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 93 92 94 8 (parallel [
            (set (reg:SI 1 dx [orig:91 D.5971 ] [91])
                (plus:SI (reg:SI 0 ax [orig:90 D.5970 ] [90])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 252 {*addsi_1}
     (nil))

(insn 94 93 95 8 (set (reg/f:SI 0 ax [306])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 95 94 96 8 (set (reg:SI 1 dx [orig:92 D.5972 ] [92])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:91 D.5971 ] [91])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [306]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5971_57].nb_checkers+0 S4 A32])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 96 95 97 8 (set (reg:SI 0 ax [307])
        (reg:SI 1 dx [orig:92 D.5972 ] [92])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 97 96 98 8 (parallel [
            (set (reg:SI 0 ax [307])
                (ashift:SI (reg:SI 0 ax [307])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 497 {*ashlsi3_1}
     (nil))

(insn 98 97 99 8 (parallel [
            (set (reg:SI 0 ax [307])
                (plus:SI (reg:SI 0 ax [307])
                    (reg:SI 1 dx [orig:92 D.5972 ] [92])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:92 D.5972 ] [92])
            (const_int 5 [0x5]))
        (nil)))

(insn 99 98 825 8 (parallel [
            (set (reg:SI 0 ax [308])
                (ashift:SI (reg:SI 0 ax [307])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 497 {*ashlsi3_1}
     (nil))

(insn 825 99 102 8 (set (reg:SI 1 dx)
        (reg:SI 2 cx [orig:89 D.5969 ] [89])) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 102 825 826 8 (parallel [
            (set (reg:SI 1 dx)
                (minus:SI (reg:SI 1 dx)
                    (reg:SI 0 ax [orig:93 D.5973 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:504 291 {*subsi_1}
     (nil))

(insn 826 102 103 8 (set (reg:SI 0 ax [orig:94 D.5974 ] [94])
        (reg:SI 1 dx)) src/gui.c:504 64 {*movsi_internal}
     (nil))

(insn 103 826 104 8 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])
        (reg:SI 0 ax [orig:94 D.5974 ] [94])) src/gui.c:504 64 {*movsi_internal}
     (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 4 5 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 98 309 310 311 312 313

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  8 (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 104 103 105 9 73 "" [3 uses])

(note 105 104 106 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 107 9 (set (reg/f:SI 0 ax [309])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:507 64 {*movsi_internal}
     (nil))

(insn 107 106 108 9 (set (reg:SI 0 ax [orig:95 D.5975 ] [95])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [309])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:507 64 {*movsi_internal}
     (nil))

(insn 108 107 109 9 (parallel [
            (set (reg:SI 1 dx [orig:96 D.5976 ] [96])
                (plus:SI (reg:SI 0 ax [orig:95 D.5975 ] [95])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:507 252 {*addsi_1}
     (nil))

(insn 109 108 110 9 (set (reg/f:SI 0 ax [310])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:507 64 {*movsi_internal}
     (nil))

(insn 110 109 111 9 (parallel [
            (set (reg:SI 1 dx [311])
                (plus:SI (reg:SI 1 dx [orig:96 D.5976 ] [96])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:507 252 {*addsi_1}
     (nil))

(insn 111 110 112 9 (set (reg:HI 0 ax [orig:97 D.5977 ] [97])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [311])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [310]))
                (const_int 4 [0x4])) [0 display_21(D)->positions[D.5976_63].x+0 S2 A32])) src/gui.c:507 65 {*movhi_internal}
     (nil))

(insn 112 111 113 9 (set (reg:SI 0 ax [312])
        (sign_extend:SI (reg:HI 0 ax [orig:97 D.5977 ] [97]))) src/gui.c:507 130 {extendhisi2}
     (nil))

(insn 113 112 114 9 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])
        (reg:SI 0 ax [312])) src/gui.c:507 64 {*movsi_internal}
     (nil))

(insn 114 113 115 9 (set (reg/f:SI 0 ax [313])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:509 64 {*movsi_internal}
     (nil))

(insn 115 114 116 9 (set (reg:SI 0 ax [orig:98 D.5978 ] [98])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [313])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:509 64 {*movsi_internal}
     (nil))

(insn 116 115 117 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:98 D.5978 ] [98])
            (const_int 12 [0xc]))) src/gui.c:509 6 {*cmpsi_1}
     (nil))

(jump_insn 117 116 118 9 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 162)
            (pc))) src/gui.c:509 591 {*jcc_1}
     (nil)
 -> 162)
;; End of basic block 9 -> ( 10 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  13

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 314 315

;; Pred edge  9 (fallthru)
(note 118 117 119 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 119 118 120 10 (set (reg/f:SI 0 ax [314])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:511 64 {*movsi_internal}
     (nil))

(insn 120 119 121 10 (set (reg:SI 0 ax [orig:99 D.5981 ] [99])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [314])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:511 64 {*movsi_internal}
     (nil))

(insn 121 120 122 10 (parallel [
            (set (reg:SI 1 dx [orig:100 D.5982 ] [100])
                (plus:SI (reg:SI 0 ax [orig:99 D.5981 ] [99])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:511 252 {*addsi_1}
     (nil))

(insn 122 121 123 10 (set (reg/f:SI 0 ax [315])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:511 64 {*movsi_internal}
     (nil))

(insn 123 122 124 10 (set (reg:SI 0 ax [orig:101 D.5983 ] [101])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:100 D.5982 ] [100])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [315]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5982_68].nb_checkers+0 S4 A32])) src/gui.c:511 64 {*movsi_internal}
     (nil))

(insn 124 123 125 10 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:101 D.5983 ] [101])
            (const_int 6 [0x6]))) src/gui.c:511 6 {*cmpsi_1}
     (nil))

(jump_insn 125 124 126 10 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 138)
            (pc))) src/gui.c:511 591 {*jcc_1}
     (nil)
 -> 138)
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)
;; Succ edge  12

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 102 103 104 105 316 317 318 319

;; Pred edge  10 (fallthru)
(note 126 125 127 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 128 11 (set (reg/f:SI 0 ax [316])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:512 64 {*movsi_internal}
     (nil))

(insn 128 127 129 11 (set (reg:SI 0 ax [orig:102 D.5986 ] [102])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [316])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:512 64 {*movsi_internal}
     (nil))

(insn 129 128 130 11 (parallel [
            (set (reg:SI 1 dx [orig:103 D.5987 ] [103])
                (plus:SI (reg:SI 0 ax [orig:102 D.5986 ] [102])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:512 252 {*addsi_1}
     (nil))

(insn 130 129 131 11 (set (reg/f:SI 0 ax [317])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:512 64 {*movsi_internal}
     (nil))

(insn 131 130 132 11 (parallel [
            (set (reg:SI 1 dx [318])
                (plus:SI (reg:SI 1 dx [orig:103 D.5987 ] [103])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:512 252 {*addsi_1}
     (nil))

(insn 132 131 133 11 (set (reg:HI 0 ax [orig:104 D.5988 ] [104])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [318])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [317]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5987_71].y+0 S2 A16])) src/gui.c:512 65 {*movhi_internal}
     (nil))

(insn 133 132 134 11 (set (reg:SI 0 ax [orig:105 D.5989 ] [105])
        (sign_extend:SI (reg:HI 0 ax [orig:104 D.5988 ] [104]))) src/gui.c:512 130 {extendhisi2}
     (nil))

(insn 134 133 135 11 (parallel [
            (set (reg:SI 0 ax [319])
                (plus:SI (reg:SI 0 ax [orig:105 D.5989 ] [105])
                    (const_int 120 [0x78])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:512 252 {*addsi_1}
     (nil))

(insn 135 134 732 11 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32])
        (reg:SI 0 ax [319])) src/gui.c:512 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:105 D.5989 ] [105])
            (const_int 120 [0x78]))
        (nil)))

(jump_insn 732 135 733 11 (set (pc)
        (label_ref 205)) 606 {jump}
     (nil)
 -> 205)
;; End of basic block 11 -> ( 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 [100.0%] 

(barrier 733 732 138)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 106 107 108 109 110 111 112 113 114 320 321 322 323 324 325 326

;; Pred edge  10
(code_label 138 733 139 12 76 "" [1 uses])

(note 139 138 140 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 140 139 141 12 (set (reg/f:SI 0 ax [320])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 141 140 142 12 (set (reg:SI 0 ax [orig:106 D.5991 ] [106])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [320])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 142 141 143 12 (parallel [
            (set (reg:SI 1 dx [orig:107 D.5992 ] [107])
                (plus:SI (reg:SI 0 ax [orig:106 D.5991 ] [106])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 252 {*addsi_1}
     (nil))

(insn 143 142 144 12 (set (reg/f:SI 0 ax [321])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 144 143 145 12 (parallel [
            (set (reg:SI 1 dx [322])
                (plus:SI (reg:SI 1 dx [orig:107 D.5992 ] [107])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 252 {*addsi_1}
     (nil))

(insn 145 144 146 12 (set (reg:HI 0 ax [orig:108 D.5993 ] [108])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [322])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [321]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.5992_76].y+0 S2 A16])) src/gui.c:514 65 {*movhi_internal}
     (nil))

(insn 146 145 147 12 (set (reg:SI 2 cx [orig:109 D.5994 ] [109])
        (sign_extend:SI (reg:HI 0 ax [orig:108 D.5993 ] [108]))) src/gui.c:514 130 {extendhisi2}
     (nil))

(insn 147 146 148 12 (set (reg/f:SI 0 ax [323])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 148 147 149 12 (set (reg:SI 0 ax [orig:110 D.5995 ] [110])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [323])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 149 148 150 12 (parallel [
            (set (reg:SI 1 dx [orig:111 D.5996 ] [111])
                (plus:SI (reg:SI 0 ax [orig:110 D.5995 ] [110])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 252 {*addsi_1}
     (nil))

(insn 150 149 151 12 (set (reg/f:SI 0 ax [324])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 151 150 152 12 (set (reg:SI 1 dx [orig:112 D.5997 ] [112])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:111 D.5996 ] [111])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [324]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.5996_80].nb_checkers+0 S4 A32])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 152 151 153 12 (set (reg:SI 0 ax [325])
        (reg:SI 1 dx [orig:112 D.5997 ] [112])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(insn 153 152 154 12 (parallel [
            (set (reg:SI 0 ax [325])
                (ashift:SI (reg:SI 0 ax [325])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 497 {*ashlsi3_1}
     (nil))

(insn 154 153 155 12 (parallel [
            (set (reg:SI 0 ax [325])
                (plus:SI (reg:SI 0 ax [325])
                    (reg:SI 1 dx [orig:112 D.5997 ] [112])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:112 D.5997 ] [112])
            (const_int 5 [0x5]))
        (nil)))

(insn 155 154 158 12 (parallel [
            (set (reg:SI 0 ax [326])
                (ashift:SI (reg:SI 0 ax [325])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 497 {*ashlsi3_1}
     (nil))

(insn 158 155 159 12 (parallel [
            (set (reg:SI 0 ax [orig:114 D.5999 ] [114])
                (plus:SI (reg:SI 2 cx [orig:109 D.5994 ] [109])
                    (reg:SI 0 ax [orig:113 D.5998 ] [113])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:514 252 {*addsi_1}
     (nil))

(insn 159 158 734 12 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32])
        (reg:SI 0 ax [orig:114 D.5999 ] [114])) src/gui.c:514 64 {*movsi_internal}
     (nil))

(jump_insn 734 159 735 12 (set (pc)
        (label_ref 205)) 606 {jump}
     (nil)
 -> 205)
;; End of basic block 12 -> ( 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 [100.0%] 

(barrier 735 734 162)

;; Start of basic block ( 9) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 115 116 117 327 328

;; Pred edge  9
(code_label 162 735 163 13 75 "" [1 uses])

(note 163 162 164 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 164 163 165 13 (set (reg/f:SI 0 ax [327])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:518 64 {*movsi_internal}
     (nil))

(insn 165 164 166 13 (set (reg:SI 0 ax [orig:115 D.6001 ] [115])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [327])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:518 64 {*movsi_internal}
     (nil))

(insn 166 165 167 13 (parallel [
            (set (reg:SI 1 dx [orig:116 D.6002 ] [116])
                (plus:SI (reg:SI 0 ax [orig:115 D.6001 ] [115])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:518 252 {*addsi_1}
     (nil))

(insn 167 166 168 13 (set (reg/f:SI 0 ax [328])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:518 64 {*movsi_internal}
     (nil))

(insn 168 167 169 13 (set (reg:SI 0 ax [orig:117 D.6003 ] [117])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:116 D.6002 ] [116])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [328]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6002_86].nb_checkers+0 S4 A32])) src/gui.c:518 64 {*movsi_internal}
     (nil))

(insn 169 168 170 13 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:117 D.6003 ] [117])
            (const_int 6 [0x6]))) src/gui.c:518 6 {*cmpsi_1}
     (nil))

(jump_insn 170 169 171 13 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 183)
            (pc))) src/gui.c:518 591 {*jcc_1}
     (nil)
 -> 183)
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  15

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 118 119 120 121 329 330 331 332

;; Pred edge  13 (fallthru)
(note 171 170 172 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 172 171 173 14 (set (reg/f:SI 0 ax [329])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:519 64 {*movsi_internal}
     (nil))

(insn 173 172 174 14 (set (reg:SI 0 ax [orig:118 D.6006 ] [118])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [329])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:519 64 {*movsi_internal}
     (nil))

(insn 174 173 175 14 (parallel [
            (set (reg:SI 1 dx [orig:119 D.6007 ] [119])
                (plus:SI (reg:SI 0 ax [orig:118 D.6006 ] [118])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:519 252 {*addsi_1}
     (nil))

(insn 175 174 176 14 (set (reg/f:SI 0 ax [330])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:519 64 {*movsi_internal}
     (nil))

(insn 176 175 177 14 (parallel [
            (set (reg:SI 1 dx [331])
                (plus:SI (reg:SI 1 dx [orig:119 D.6007 ] [119])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:519 252 {*addsi_1}
     (nil))

(insn 177 176 178 14 (set (reg:HI 0 ax [orig:120 D.6008 ] [120])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [331])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [330]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.6007_89].y+0 S2 A16])) src/gui.c:519 65 {*movhi_internal}
     (nil))

(insn 178 177 179 14 (set (reg:SI 0 ax [orig:121 D.6009 ] [121])
        (sign_extend:SI (reg:HI 0 ax [orig:120 D.6008 ] [120]))) src/gui.c:519 130 {extendhisi2}
     (nil))

(insn 179 178 180 14 (parallel [
            (set (reg:SI 0 ax [332])
                (plus:SI (reg:SI 0 ax [orig:121 D.6009 ] [121])
                    (const_int -120 [0xffffffffffffff88])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:519 252 {*addsi_1}
     (nil))

(insn 180 179 736 14 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32])
        (reg:SI 0 ax [332])) src/gui.c:519 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg:SI 0 ax [orig:121 D.6009 ] [121])
            (const_int -120 [0xffffffffffffff88]))
        (nil)))

(jump_insn 736 180 737 14 (set (pc)
        (label_ref 205)) 606 {jump}
     (nil)
 -> 205)
;; End of basic block 14 -> ( 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 [100.0%] 

(barrier 737 736 183)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 122 123 124 125 126 127 128 129 130 333 334 335 336 337 338 339

;; Pred edge  13
(code_label 183 737 184 15 78 "" [1 uses])

(note 184 183 185 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 185 184 186 15 (set (reg/f:SI 0 ax [333])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 186 185 187 15 (set (reg:SI 0 ax [orig:122 D.6011 ] [122])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [333])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 187 186 188 15 (parallel [
            (set (reg:SI 1 dx [orig:123 D.6012 ] [123])
                (plus:SI (reg:SI 0 ax [orig:122 D.6011 ] [122])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 252 {*addsi_1}
     (nil))

(insn 188 187 189 15 (set (reg/f:SI 0 ax [334])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 189 188 190 15 (parallel [
            (set (reg:SI 1 dx [335])
                (plus:SI (reg:SI 1 dx [orig:123 D.6012 ] [123])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 252 {*addsi_1}
     (nil))

(insn 190 189 191 15 (set (reg:HI 0 ax [orig:124 D.6013 ] [124])
        (mem/s/j:HI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [335])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [334]))
                (const_int 6 [0x6])) [0 display_21(D)->positions[D.6012_94].y+0 S2 A16])) src/gui.c:521 65 {*movhi_internal}
     (nil))

(insn 191 190 192 15 (set (reg:SI 2 cx [orig:125 D.6014 ] [125])
        (sign_extend:SI (reg:HI 0 ax [orig:124 D.6013 ] [124]))) src/gui.c:521 130 {extendhisi2}
     (nil))

(insn 192 191 193 15 (set (reg/f:SI 0 ax [336])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 193 192 194 15 (set (reg:SI 0 ax [orig:126 D.6015 ] [126])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [336])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 194 193 195 15 (parallel [
            (set (reg:SI 1 dx [orig:127 D.6016 ] [127])
                (plus:SI (reg:SI 0 ax [orig:126 D.6015 ] [126])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 252 {*addsi_1}
     (nil))

(insn 195 194 196 15 (set (reg/f:SI 0 ax [337])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 196 195 197 15 (set (reg:SI 1 dx [orig:128 D.6017 ] [128])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:127 D.6016 ] [127])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [337]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6016_98].nb_checkers+0 S4 A32])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 197 196 198 15 (set (reg:SI 0 ax [338])
        (reg:SI 1 dx [orig:128 D.6017 ] [128])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 198 197 199 15 (parallel [
            (set (reg:SI 0 ax [338])
                (ashift:SI (reg:SI 0 ax [338])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 497 {*ashlsi3_1}
     (nil))

(insn 199 198 200 15 (parallel [
            (set (reg:SI 0 ax [338])
                (plus:SI (reg:SI 0 ax [338])
                    (reg:SI 1 dx [orig:128 D.6017 ] [128])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [orig:128 D.6017 ] [128])
            (const_int 5 [0x5]))
        (nil)))

(insn 200 199 827 15 (parallel [
            (set (reg:SI 0 ax [339])
                (ashift:SI (reg:SI 0 ax [338])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 497 {*ashlsi3_1}
     (nil))

(insn 827 200 203 15 (set (reg:SI 1 dx)
        (reg:SI 2 cx [orig:125 D.6014 ] [125])) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 203 827 828 15 (parallel [
            (set (reg:SI 1 dx)
                (minus:SI (reg:SI 1 dx)
                    (reg:SI 0 ax [orig:129 D.6018 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:521 291 {*subsi_1}
     (nil))

(insn 828 203 204 15 (set (reg:SI 0 ax [orig:130 D.6019 ] [130])
        (reg:SI 1 dx)) src/gui.c:521 64 {*movsi_internal}
     (nil))

(insn 204 828 205 15 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32])
        (reg:SI 0 ax [orig:130 D.6019 ] [130])) src/gui.c:521 64 {*movsi_internal}
     (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)

;; Start of basic block ( 11 12 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 340 341 342 343 344

;; Pred edge  11 [100.0%] 
;; Pred edge  12 [100.0%] 
;; Pred edge  15 (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 205 204 206 16 77 "" [3 uses])

(note 206 205 207 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 207 206 208 16 (set (reg:SI 0 ax [340])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 208 207 829 16 (set (reg:SI 1 dx [341])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 829 208 209 16 (set (reg:SI 2 cx)
        (reg:SI 1 dx [341])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 209 829 830 16 (parallel [
            (set (reg:SI 2 cx)
                (minus:SI (reg:SI 2 cx)
                    (reg:SI 0 ax [340])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:524 291 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -28 [0xffffffffffffffe4])) [0 pos_src_y+0 S4 A32])
            (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -24 [0xffffffffffffffe8])) [0 pos_dest_y+0 S4 A32]))
        (nil)))

(insn 830 209 816 16 (set (reg:SI 0 ax [orig:131 D.6020 ] [131])
        (reg:SI 2 cx)) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 816 830 211 16 (parallel [
            (set (reg:DF 8 st [orig:132 D.6021 ] [132])
                (float:DF (reg:SI 0 ax [orig:131 D.6020 ] [131])))
            (clobber (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 S4 A32]))
        ]) src/gui.c:524 226 {*floatsidf2_i387_with_temp}
     (nil))

(insn 211 816 212 16 (set (reg:XF 9 st(1) [orig:133 D.6022 ] [133])
        (float_extend:XF (reg:DF 8 st [orig:132 D.6021 ] [132]))) src/gui.c:524 139 {*extenddfxf2_i387}
     (nil))

(insn 212 211 213 16 (set (reg:SI 0 ax [342])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 213 212 831 16 (set (reg:SI 1 dx [343])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 pos_src_x+0 S4 A32])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 831 213 214 16 (set (reg:SI 2 cx)
        (reg:SI 1 dx [343])) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 214 831 832 16 (parallel [
            (set (reg:SI 2 cx)
                (minus:SI (reg:SI 2 cx)
                    (reg:SI 0 ax [342])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:524 291 {*subsi_1}
     (expr_list:REG_EQUAL (minus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -8 [0xfffffffffffffff8])) [0 pos_src_x+0 S4 A32])
            (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -4 [0xfffffffffffffffc])) [0 pos_dest_x+0 S4 A32]))
        (nil)))

(insn 832 214 817 16 (set (reg:SI 0 ax [orig:134 D.6023 ] [134])
        (reg:SI 2 cx)) src/gui.c:524 64 {*movsi_internal}
     (nil))

(insn 817 832 216 16 (parallel [
            (set (reg:DF 8 st [orig:135 D.6024 ] [135])
                (float:DF (reg:SI 0 ax [orig:134 D.6023 ] [134])))
            (clobber (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 S4 A32]))
        ]) src/gui.c:524 226 {*floatsidf2_i387_with_temp}
     (nil))

(insn 216 817 217 16 (set (reg:XF 8 st [orig:136 D.6025 ] [136])
        (float_extend:XF (reg:DF 8 st [orig:135 D.6024 ] [135]))) src/gui.c:524 139 {*extenddfxf2_i387}
     (nil))

(insn 217 216 818 16 (set (reg:XF 8 st [orig:137 D.6026 ] [137])
        (div:XF (reg:XF 9 st(1) [orig:133 D.6022 ] [133])
            (reg:XF 8 st [orig:136 D.6025 ] [136]))) src/gui.c:524 756 {*fop_xf_1_i387}
     (nil))

(insn 818 217 219 16 (set (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:137 D.6026 ] [137]))) src/gui.c:524 151 {*truncxfdf2_i387}
     (nil))

(insn 219 818 220 16 (set (reg:DF 8 st [orig:138 D.6027 ] [138])
        (float:DF (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])) [0 pos_dest_y+0 S4 A32]))) src/gui.c:525 232 {*floatsidf2_i387}
     (nil))

(insn 220 219 221 16 (set (reg:XF 9 st(1) [orig:139 D.6028 ] [139])
        (float_extend:XF (reg:DF 8 st [orig:138 D.6027 ] [138]))) src/gui.c:525 139 {*extenddfxf2_i387}
     (nil))

(insn 221 220 222 16 (set (reg:XF 10 st(2) [orig:140 D.6029 ] [140])
        (float_extend:XF (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64]))) src/gui.c:525 139 {*extenddfxf2_i387}
     (nil))

(insn 222 221 223 16 (set (reg:DF 8 st [orig:141 D.6030 ] [141])
        (float:DF (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32]))) src/gui.c:525 232 {*floatsidf2_i387}
     (nil))

(insn 223 222 224 16 (set (reg:XF 8 st [orig:142 D.6031 ] [142])
        (float_extend:XF (reg:DF 8 st [orig:141 D.6030 ] [141]))) src/gui.c:525 139 {*extenddfxf2_i387}
     (nil))

(insn 224 223 225 16 (set (reg:XF 8 st [orig:143 D.6032 ] [143])
        (mult:XF (reg:XF 8 st [orig:142 D.6031 ] [142])
            (reg:XF 10 st(2) [orig:140 D.6029 ] [140]))) src/gui.c:525 755 {*fop_xf_comm_i387}
     (nil))

(insn 225 224 819 16 (set (reg:XF 8 st [orig:144 D.6033 ] [144])
        (minus:XF (reg:XF 9 st(1) [orig:139 D.6028 ] [139])
            (reg:XF 8 st [orig:143 D.6032 ] [143]))) src/gui.c:525 756 {*fop_xf_1_i387}
     (nil))

(insn 819 225 227 16 (set (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 b+0 S8 A64])
        (float_truncate:DF (reg:XF 8 st [orig:144 D.6033 ] [144]))) src/gui.c:525 151 {*truncxfdf2_i387}
     (nil))

(insn 227 819 228 16 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])
        (const_int 8 [0x8])) src/gui.c:531 64 {*movsi_internal}
     (nil))

(insn 228 227 229 16 (set (reg/f:SI 0 ax [344])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:534 64 {*movsi_internal}
     (nil))

(insn 229 228 230 16 (set (reg:SI 0 ax [orig:145 D.6036 ] [145])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [344])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:534 64 {*movsi_internal}
     (nil))

(insn 230 229 231 16 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:145 D.6036 ] [145])
            (const_int 12 [0xc]))) src/gui.c:534 6 {*cmpsi_1}
     (nil))

(jump_insn 231 230 232 16 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) src/gui.c:534 591 {*jcc_1}
     (nil)
 -> 258)
;; End of basic block 16 -> ( 17 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)
;; Succ edge  21

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 146 345

;; Pred edge  16 (fallthru)
(note 232 231 233 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 233 232 234 17 (set (reg/f:SI 0 ax [345])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:534 64 {*movsi_internal}
     (nil))

(insn 234 233 235 17 (set (reg:SI 0 ax [orig:146 D.6038 ] [146])
        (mem/s/j:SI (reg/f:SI 0 ax [345]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:534 64 {*movsi_internal}
     (nil))

(insn 235 234 236 17 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:146 D.6038 ] [146])
            (const_int 12 [0xc]))) src/gui.c:534 6 {*cmpsi_1}
     (nil))

(jump_insn 236 235 237 17 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 258)
            (pc))) src/gui.c:534 591 {*jcc_1}
     (nil)
 -> 258)
;; End of basic block 17 -> ( 18 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)
;; Succ edge  21

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 147 148 149 150 346 347

;; Pred edge  17 (fallthru)
(note 237 236 238 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 238 237 239 18 (set (reg/f:SI 0 ax [346])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:536 64 {*movsi_internal}
     (nil))

(insn 239 238 240 18 (set (reg:SI 0 ax [orig:147 D.6040 ] [147])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [346])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:536 64 {*movsi_internal}
     (nil))

(insn 240 239 241 18 (parallel [
            (set (reg:SI 1 dx [orig:148 D.6041 ] [148])
                (plus:SI (reg:SI 0 ax [orig:147 D.6040 ] [147])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:536 252 {*addsi_1}
     (nil))

(insn 241 240 242 18 (set (reg/f:SI 0 ax [347])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:536 64 {*movsi_internal}
     (nil))

(insn 242 241 243 18 (set (reg:SI 0 ax [orig:149 D.6042 ] [149])
        (mem/s/j:SI (reg/f:SI 0 ax [347]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:536 64 {*movsi_internal}
     (nil))

(insn 243 242 244 18 (parallel [
            (set (reg:SI 0 ax [orig:150 D.6043 ] [150])
                (plus:SI (reg:SI 0 ax [orig:149 D.6042 ] [149])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:536 252 {*addsi_1}
     (nil))

(insn 244 243 245 18 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:148 D.6041 ] [148])
            (reg:SI 0 ax [orig:150 D.6043 ] [150]))) src/gui.c:536 6 {*cmpsi_1}
     (nil))

(jump_insn 245 244 246 18 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 250)
            (pc))) src/gui.c:536 591 {*jcc_1}
     (nil)
 -> 250)
;; End of basic block 18 -> ( 19 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  19 (fallthru)
;; Succ edge  20

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  18 (fallthru)
(note 246 245 247 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 247 246 738 19 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:537 64 {*movsi_internal}
     (nil))

(jump_insn 738 247 739 19 (set (pc)
        (label_ref 358)) src/gui.c:536 606 {jump}
     (nil)
 -> 358)
;; End of basic block 19 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 739 738 250)

;; Start of basic block ( 18) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  18
(code_label 250 739 251 20 80 "" [1 uses])

(note 251 250 252 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 252 251 253 20 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 2 [0x2])) src/gui.c:540 64 {*movsi_internal}
     (nil))

(insn 253 252 740 20 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])
                (neg:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:541 447 {*negsi2_1}
     (nil))

(jump_insn 740 253 741 20 (set (pc)
        (label_ref 358)) src/gui.c:536 606 {jump}
     (nil)
 -> 358)
;; End of basic block 20 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 741 740 258)

;; Start of basic block ( 16 17) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 151 348

;; Pred edge  16
;; Pred edge  17
(code_label 258 741 259 21 79 "" [2 uses])

(note 259 258 260 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 260 259 261 21 (set (reg/f:SI 0 ax [348])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:544 64 {*movsi_internal}
     (nil))

(insn 261 260 262 21 (set (reg:SI 0 ax [orig:151 D.6049 ] [151])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [348])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:544 64 {*movsi_internal}
     (nil))

(insn 262 261 263 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:151 D.6049 ] [151])
            (const_int 12 [0xc]))) src/gui.c:544 6 {*cmpsi_1}
     (nil))

(jump_insn 263 262 264 21 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 290)
            (pc))) src/gui.c:544 591 {*jcc_1}
     (nil)
 -> 290)
;; End of basic block 21 -> ( 22 26)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)
;; Succ edge  26

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152 349

;; Pred edge  21 (fallthru)
(note 264 263 265 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 265 264 266 22 (set (reg/f:SI 0 ax [349])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:544 64 {*movsi_internal}
     (nil))

(insn 266 265 267 22 (set (reg:SI 0 ax [orig:152 D.6051 ] [152])
        (mem/s/j:SI (reg/f:SI 0 ax [349]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:544 64 {*movsi_internal}
     (nil))

(insn 267 266 268 22 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:152 D.6051 ] [152])
            (const_int 12 [0xc]))) src/gui.c:544 6 {*cmpsi_1}
     (nil))

(jump_insn 268 267 269 22 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 290)
            (pc))) src/gui.c:544 591 {*jcc_1}
     (nil)
 -> 290)
;; End of basic block 22 -> ( 23 26)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 (fallthru)
;; Succ edge  26

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 153 154 155 156 350 351

;; Pred edge  22 (fallthru)
(note 269 268 270 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 270 269 271 23 (set (reg/f:SI 0 ax [350])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:546 64 {*movsi_internal}
     (nil))

(insn 271 270 272 23 (set (reg:SI 0 ax [orig:153 D.6053 ] [153])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [350])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:546 64 {*movsi_internal}
     (nil))

(insn 272 271 273 23 (parallel [
            (set (reg:SI 1 dx [orig:154 D.6054 ] [154])
                (plus:SI (reg:SI 0 ax [orig:153 D.6053 ] [153])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:546 252 {*addsi_1}
     (nil))

(insn 273 272 274 23 (set (reg/f:SI 0 ax [351])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:546 64 {*movsi_internal}
     (nil))

(insn 274 273 275 23 (set (reg:SI 0 ax [orig:155 D.6055 ] [155])
        (mem/s/j:SI (reg/f:SI 0 ax [351]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:546 64 {*movsi_internal}
     (nil))

(insn 275 274 276 23 (parallel [
            (set (reg:SI 0 ax [orig:156 D.6056 ] [156])
                (plus:SI (reg:SI 0 ax [orig:155 D.6055 ] [155])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:546 252 {*addsi_1}
     (nil))

(insn 276 275 277 23 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:154 D.6054 ] [154])
            (reg:SI 0 ax [orig:156 D.6056 ] [156]))) src/gui.c:546 6 {*cmpsi_1}
     (nil))

(jump_insn 277 276 278 23 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 282)
            (pc))) src/gui.c:546 591 {*jcc_1}
     (nil)
 -> 282)
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)
;; Succ edge  25

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  23 (fallthru)
(note 278 277 279 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 279 278 742 24 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 3 [0x3])) src/gui.c:547 64 {*movsi_internal}
     (nil))

(jump_insn 742 279 743 24 (set (pc)
        (label_ref 358)) src/gui.c:546 606 {jump}
     (nil)
 -> 358)
;; End of basic block 24 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 743 742 282)

;; Start of basic block ( 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  23
(code_label 282 743 283 25 84 "" [1 uses])

(note 283 282 284 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 284 283 285 25 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 4 [0x4])) src/gui.c:550 64 {*movsi_internal}
     (nil))

(insn 285 284 744 25 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])
                (neg:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:551 447 {*negsi2_1}
     (nil))

(jump_insn 744 285 745 25 (set (pc)
        (label_ref 358)) src/gui.c:546 606 {jump}
     (nil)
 -> 358)
;; End of basic block 25 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 745 744 290)

;; Start of basic block ( 21 22) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 157 352 353

;; Pred edge  21
;; Pred edge  22
(code_label 290 745 291 26 83 "" [2 uses])

(note 291 290 292 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 26 (set (reg:DF 9 st(1) [352])
        (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64])) src/gui.c:554 109 {*movdf_internal_nointeger}
     (nil))

(insn 293 292 294 26 (set (reg:DF 8 st [353])
        (mem/u/c/i:DF (symbol_ref/u:SI ("*.LC21") [flags 0x2]) [0 S8 A64])) src/gui.c:554 109 {*movdf_internal_nointeger}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))

(insn 294 293 295 26 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 9 st(1) [352])
            (reg:DF 8 st [353]))) src/gui.c:554 39 {*cmpfp_iu_387}
     (nil))

(insn 295 294 296 26 (set (reg:QI 0 ax [orig:157 D.6062 ] [157])
        (ge:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) src/gui.c:554 585 {*setcc_qi}
     (nil))

(insn 296 295 297 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:157 D.6062 ] [157])
            (const_int 0 [0]))) src/gui.c:554 0 {*cmpqi_ccno_1}
     (nil))

(jump_insn 297 296 298 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 311)
            (pc))) src/gui.c:554 591 {*jcc_1}
     (nil)
 -> 311)
;; End of basic block 26 -> ( 27 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27 (fallthru)
;; Succ edge  29

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 158 159 160 161 354 355

;; Pred edge  26 (fallthru)
(note 298 297 299 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 299 298 300 27 (set (reg/f:SI 0 ax [354])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:554 64 {*movsi_internal}
     (nil))

(insn 300 299 301 27 (set (reg:SI 0 ax [orig:158 D.6064 ] [158])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [354])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:554 64 {*movsi_internal}
     (nil))

(insn 301 300 302 27 (parallel [
            (set (reg:SI 1 dx [orig:159 D.6065 ] [159])
                (plus:SI (reg:SI 0 ax [orig:158 D.6064 ] [158])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:554 252 {*addsi_1}
     (nil))

(insn 302 301 303 27 (set (reg/f:SI 0 ax [355])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:554 64 {*movsi_internal}
     (nil))

(insn 303 302 304 27 (set (reg:SI 0 ax [orig:160 D.6066 ] [160])
        (mem/s/j:SI (reg/f:SI 0 ax [355]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:554 64 {*movsi_internal}
     (nil))

(insn 304 303 305 27 (parallel [
            (set (reg:SI 0 ax [orig:161 D.6067 ] [161])
                (plus:SI (reg:SI 0 ax [orig:160 D.6066 ] [160])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:554 252 {*addsi_1}
     (nil))

(insn 305 304 306 27 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:159 D.6065 ] [159])
            (reg:SI 0 ax [orig:161 D.6067 ] [161]))) src/gui.c:554 6 {*cmpsi_1}
     (nil))

(jump_insn 306 305 307 27 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 311)
            (pc))) src/gui.c:554 591 {*jcc_1}
     (nil)
 -> 311)
;; End of basic block 27 -> ( 28 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  28 (fallthru)
;; Succ edge  29

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  27 (fallthru)
(note 307 306 308 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 308 307 746 28 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 5 [0x5])) src/gui.c:556 64 {*movsi_internal}
     (nil))

(jump_insn 746 308 747 28 (set (pc)
        (label_ref 358)) src/gui.c:556 606 {jump}
     (nil)
 -> 358)
;; End of basic block 28 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 747 746 311)

;; Start of basic block ( 26 27) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 162 356 357

;; Pred edge  26
;; Pred edge  27
(code_label 311 747 312 29 86 "" [2 uses])

(note 312 311 313 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 313 312 314 29 (set (reg:DF 9 st(1) [356])
        (mem/u/c/i:DF (symbol_ref/u:SI ("*.LC21") [flags 0x2]) [0 S8 A64])) src/gui.c:557 109 {*movdf_internal_nointeger}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))

(insn 314 313 315 29 (set (reg:DF 8 st [357])
        (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64])) src/gui.c:557 109 {*movdf_internal_nointeger}
     (nil))

(insn 315 314 316 29 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 9 st(1) [356])
            (reg:DF 8 st [357]))) src/gui.c:557 39 {*cmpfp_iu_387}
     (nil))

(insn 316 315 317 29 (set (reg:QI 0 ax [orig:162 D.6071 ] [162])
        (ge:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) src/gui.c:557 585 {*setcc_qi}
     (nil))

(insn 317 316 318 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:162 D.6071 ] [162])
            (const_int 0 [0]))) src/gui.c:557 0 {*cmpqi_ccno_1}
     (nil))

(jump_insn 318 317 319 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 332)
            (pc))) src/gui.c:557 591 {*jcc_1}
     (nil)
 -> 332)
;; End of basic block 29 -> ( 30 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 (fallthru)
;; Succ edge  32

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 163 164 165 166 358 359

;; Pred edge  29 (fallthru)
(note 319 318 320 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 320 319 321 30 (set (reg/f:SI 0 ax [358])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:557 64 {*movsi_internal}
     (nil))

(insn 321 320 322 30 (set (reg:SI 0 ax [orig:163 D.6073 ] [163])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [358])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:557 64 {*movsi_internal}
     (nil))

(insn 322 321 323 30 (parallel [
            (set (reg:SI 1 dx [orig:164 D.6074 ] [164])
                (plus:SI (reg:SI 0 ax [orig:163 D.6073 ] [163])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:557 252 {*addsi_1}
     (nil))

(insn 323 322 324 30 (set (reg/f:SI 0 ax [359])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:557 64 {*movsi_internal}
     (nil))

(insn 324 323 325 30 (set (reg:SI 0 ax [orig:165 D.6075 ] [165])
        (mem/s/j:SI (reg/f:SI 0 ax [359]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:557 64 {*movsi_internal}
     (nil))

(insn 325 324 326 30 (parallel [
            (set (reg:SI 0 ax [orig:166 D.6076 ] [166])
                (plus:SI (reg:SI 0 ax [orig:165 D.6075 ] [165])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:557 252 {*addsi_1}
     (nil))

(insn 326 325 327 30 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:164 D.6074 ] [164])
            (reg:SI 0 ax [orig:166 D.6076 ] [166]))) src/gui.c:557 6 {*cmpsi_1}
     (nil))

(jump_insn 327 326 328 30 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 332)
            (pc))) src/gui.c:557 591 {*jcc_1}
     (nil)
 -> 332)
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  31 (fallthru)
;; Succ edge  32

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  30 (fallthru)
(note 328 327 329 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 329 328 748 31 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 6 [0x6])) src/gui.c:559 64 {*movsi_internal}
     (nil))

(jump_insn 748 329 749 31 (set (pc)
        (label_ref 358)) src/gui.c:559 606 {jump}
     (nil)
 -> 358)
;; End of basic block 31 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 749 748 332)

;; Start of basic block ( 29 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 167 360 361

;; Pred edge  29
;; Pred edge  30
(code_label 332 749 333 32 87 "" [2 uses])

(note 333 332 334 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 334 333 335 32 (set (reg:DF 9 st(1) [360])
        (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64])) src/gui.c:561 109 {*movdf_internal_nointeger}
     (nil))

(insn 335 334 336 32 (set (reg:DF 8 st [361])
        (mem/u/c/i:DF (symbol_ref/u:SI ("*.LC21") [flags 0x2]) [0 S8 A64])) src/gui.c:561 109 {*movdf_internal_nointeger}
     (expr_list:REG_EQUAL (const_double:DF 0.0 [0x0.0p+0])
        (nil)))

(insn 336 335 337 32 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:DF 9 st(1) [360])
            (reg:DF 8 st [361]))) src/gui.c:561 39 {*cmpfp_iu_387}
     (nil))

(insn 337 336 338 32 (set (reg:QI 0 ax [orig:167 D.6080 ] [167])
        (ge:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) src/gui.c:561 585 {*setcc_qi}
     (nil))

(insn 338 337 339 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:167 D.6080 ] [167])
            (const_int 0 [0]))) src/gui.c:561 0 {*cmpqi_ccno_1}
     (nil))

(jump_insn 339 338 340 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 354)
            (pc))) src/gui.c:561 591 {*jcc_1}
     (nil)
 -> 354)
;; End of basic block 32 -> ( 33 35)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 (fallthru)
;; Succ edge  35

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 168 169 170 171 362 363

;; Pred edge  32 (fallthru)
(note 340 339 341 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 341 340 342 33 (set (reg/f:SI 0 ax [362])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:561 64 {*movsi_internal}
     (nil))

(insn 342 341 343 33 (set (reg:SI 0 ax [orig:168 D.6082 ] [168])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [362])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:561 64 {*movsi_internal}
     (nil))

(insn 343 342 344 33 (parallel [
            (set (reg:SI 1 dx [orig:169 D.6083 ] [169])
                (plus:SI (reg:SI 0 ax [orig:168 D.6082 ] [168])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:561 252 {*addsi_1}
     (nil))

(insn 344 343 345 33 (set (reg/f:SI 0 ax [363])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:561 64 {*movsi_internal}
     (nil))

(insn 345 344 346 33 (set (reg:SI 0 ax [orig:170 D.6084 ] [170])
        (mem/s/j:SI (reg/f:SI 0 ax [363]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:561 64 {*movsi_internal}
     (nil))

(insn 346 345 347 33 (parallel [
            (set (reg:SI 0 ax [orig:171 D.6085 ] [171])
                (plus:SI (reg:SI 0 ax [orig:170 D.6084 ] [170])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:561 252 {*addsi_1}
     (nil))

(insn 347 346 348 33 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 1 dx [orig:169 D.6083 ] [169])
            (reg:SI 0 ax [orig:171 D.6085 ] [171]))) src/gui.c:561 6 {*cmpsi_1}
     (nil))

(jump_insn 348 347 349 33 (set (pc)
        (if_then_else (ltu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 354)
            (pc))) src/gui.c:561 591 {*jcc_1}
     (nil)
 -> 354)
;; End of basic block 33 -> ( 34 35)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34 (fallthru)
;; Succ edge  35

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  33 (fallthru)
(note 349 348 350 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 350 349 351 34 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 7 [0x7])) src/gui.c:563 64 {*movsi_internal}
     (nil))

(insn 351 350 750 34 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])
                (neg:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:564 447 {*negsi2_1}
     (nil))

(jump_insn 750 351 751 34 (set (pc)
        (label_ref 358)) src/gui.c:564 606 {jump}
     (nil)
 -> 358)
;; End of basic block 34 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 [100.0%] 

(barrier 751 750 354)

;; Start of basic block ( 32 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  32
;; Pred edge  33
(code_label 354 751 355 35 88 "" [2 uses])

(note 355 354 356 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 356 355 357 35 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
        (const_int 8 [0x8])) src/gui.c:568 64 {*movsi_internal}
     (nil))

(insn 357 356 358 35 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])
                (neg:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:569 447 {*negsi2_1}
     (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 (fallthru)

;; Start of basic block ( 19 24 25 28 31 35 20 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 172 173 174 175 176 177 178 364 365 366 367 368 369

;; Pred edge  19 [100.0%] 
;; Pred edge  24 [100.0%] 
;; Pred edge  25 [100.0%] 
;; Pred edge  28 [100.0%] 
;; Pred edge  31 [100.0%] 
;; Pred edge  35 (fallthru)
;; Pred edge  20 [100.0%] 
;; Pred edge  34 [100.0%] 
(code_label 358 357 359 36 82 "" [7 uses])

(note 359 358 360 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 360 359 361 36 (set (reg/f:SI 0 ax [orig:172 D.6087 ] [172])
        (symbol_ref/f:SI ("*.LC22") [flags 0x2]  <var_decl 0x408fdf00 *.LC22>)) src/gui.c:571 64 {*movsi_internal}
     (nil))

(insn 361 360 362 36 (set (reg:SI 1 dx [364])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])) src/gui.c:571 64 {*movsi_internal}
     (nil))

(insn 362 361 363 36 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [364])) src/gui.c:571 64 {*movsi_internal}
     (nil))

(insn 363 362 364 36 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:172 D.6087 ] [172])) src/gui.c:571 64 {*movsi_internal}
     (nil))

(call_insn 364 363 365 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:571 927 {*call_value_0}
     (nil)
    (nil))

(insn 365 364 366 36 (set (reg:SI 0 ax [365])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 pos_src_x+0 S4 A32])) src/gui.c:574 64 {*movsi_internal}
     (nil))

(insn 366 365 367 36 (set (reg:HI 0 ax [orig:173 D.6088 ] [173])
        (reg:HI 0 ax [365])) src/gui.c:574 65 {*movhi_internal}
     (nil))

(insn 367 366 368 36 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:173 D.6088 ] [173])) src/gui.c:574 65 {*movhi_internal}
     (nil))

(insn 368 367 369 36 (set (reg:SI 0 ax [366])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 pos_src_y+0 S4 A32])) src/gui.c:575 64 {*movsi_internal}
     (nil))

(insn 369 368 370 36 (set (reg:HI 0 ax [orig:174 D.6089 ] [174])
        (reg:HI 0 ax [366])) src/gui.c:575 65 {*movhi_internal}
     (nil))

(insn 370 369 371 36 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -42 [0xffffffffffffffd6])) [0 new_pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:174 D.6089 ] [174])) src/gui.c:575 65 {*movhi_internal}
     (nil))

(insn 371 370 372 36 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 0 [0])) src/gui.c:576 64 {*movsi_internal}
     (nil))

(insn 372 371 373 36 (set (reg/f:SI 0 ax [367])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(insn 373 372 374 36 (set (reg:SI 0 ax [orig:175 D.6090 ] [175])
        (mem/s/j:SI (reg/f:SI 0 ax [367]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(insn 374 373 375 36 (parallel [
            (set (reg:SI 0 ax [orig:176 D.6091 ] [176])
                (plus:SI (reg:SI 0 ax [orig:175 D.6090 ] [175])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:577 252 {*addsi_1}
     (nil))

(insn 375 374 376 36 (set (reg/f:SI 1 dx [368])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(insn 376 375 377 36 (set (reg:SI 1 dx [orig:177 D.6092 ] [177])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:176 D.6091 ] [176])
                        (const_int 8 [0x8]))
                    (reg/f:SI 1 dx [368]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6091_164].nb_checkers+0 S4 A32])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(insn 377 376 378 36 (parallel [
            (set (reg:SI 2 cx [orig:178 D.6093 ] [178])
                (plus:SI (reg:SI 1 dx [orig:177 D.6092 ] [177])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:577 252 {*addsi_1}
     (nil))

(insn 378 377 379 36 (set (reg/f:SI 1 dx [369])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(insn 379 378 752 36 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:176 D.6091 ] [176])
                        (const_int 8 [0x8]))
                    (reg/f:SI 1 dx [369]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6091_164].nb_checkers+0 S4 A32])
        (reg:SI 2 cx [orig:178 D.6093 ] [178])) src/gui.c:577 64 {*movsi_internal}
     (nil))

(jump_insn 752 379 753 36 (set (pc)
        (label_ref 591)) src/gui.c:578 606 {jump}
     (nil)
 -> 591)
;; End of basic block 36 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 753 752 593)

;; Start of basic block ( 56) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 370 371 372 373 374 375 376 377 378 379 450

;; Pred edge  56
(code_label 593 753 382 37 108 "" [1 uses])

(note 382 593 383 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 383 382 384 37 (set (reg:HI 0 ax [orig:179 D.6094 ] [179])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:580 65 {*movhi_internal}
     (nil))

(insn 384 383 385 37 (set (reg:HI 1 dx [orig:180 D.6095 ] [180])
        (reg:HI 0 ax [orig:179 D.6094 ] [179])) src/gui.c:580 65 {*movhi_internal}
     (nil))

(insn 385 384 386 37 (set (reg:SI 0 ax [370])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:580 64 {*movsi_internal}
     (nil))

(insn 386 385 387 37 (set (reg:HI 0 ax [orig:181 D.6096 ] [181])
        (reg:HI 0 ax [370])) src/gui.c:580 65 {*movhi_internal}
     (nil))

(insn 387 386 389 37 (parallel [
            (set (reg:HI 0 ax [orig:182 D.6097 ] [182])
                (plus:HI (reg:HI 1 dx [orig:180 D.6095 ] [180])
                    (reg:HI 0 ax [orig:181 D.6096 ] [181])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:580 256 {*addhi_1_lea}
     (nil))

(insn 389 387 390 37 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])
        (reg:HI 0 ax [orig:183 D.6098 ] [183])) src/gui.c:580 65 {*movhi_internal}
     (nil))

(insn 390 389 391 37 (set (reg:XF 9 st(1) [orig:184 D.6099 ] [184])
        (float_extend:XF (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])) [0 a+0 S8 A64]))) src/gui.c:581 139 {*extenddfxf2_i387}
     (nil))

(insn 391 390 814 37 (set (reg:HI 0 ax [orig:185 D.6100 ] [185])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:581 65 {*movhi_internal}
     (nil))

(insn 814 391 393 37 (parallel [
            (set (reg:DF 8 st [orig:186 D.6101 ] [186])
                (float:DF (reg:HI 0 ax [orig:185 D.6100 ] [185])))
            (clobber (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                        (const_int -82 [0xffffffffffffffae])) [0 S2 A16]))
        ]) src/gui.c:581 182 {*floathidf2_i387_with_temp}
     (nil))

(insn 393 814 394 37 (set (reg:XF 8 st [orig:187 D.6102 ] [187])
        (float_extend:XF (reg:DF 8 st [orig:186 D.6101 ] [186]))) src/gui.c:581 139 {*extenddfxf2_i387}
     (nil))

(insn 394 393 395 37 (set (reg:XF 9 st(1) [orig:188 D.6103 ] [188])
        (mult:XF (reg:XF 9 st(1) [orig:184 D.6099 ] [184])
            (reg:XF 8 st [orig:187 D.6102 ] [187]))) src/gui.c:581 755 {*fop_xf_comm_i387}
     (nil))

(insn 395 394 396 37 (set (reg:XF 8 st [orig:189 D.6104 ] [189])
        (float_extend:XF (mem/c/i:DF (plus:SI (reg/f:SI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])) [0 b+0 S8 A64]))) src/gui.c:581 139 {*extenddfxf2_i387}
     (nil))

(insn 396 395 820 37 (set (reg:XF 8 st [orig:190 D.6105 ] [190])
        (plus:XF (reg:XF 8 st [orig:189 D.6104 ] [189])
            (reg:XF 9 st(1) [orig:188 D.6103 ] [188]))) src/gui.c:581 755 {*fop_xf_comm_i387}
     (nil))

(insn 820 396 821 37 (set (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 S2 A16])
        (unspec:HI [
                (reg:HI 19 fpcr)
            ] UNSPEC_FSTCW)) src/gui.c:581 176 {x86_fnstcw_1}
     (nil))

(insn 821 820 822 37 (set (reg:HI 0 ax [450])
        (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -84 [0xffffffffffffffac])) [0 S2 A16])) src/gui.c:581 65 {*movhi_internal}
     (nil))

(insn 822 821 823 37 (set (zero_extract:SI (reg:HI 0 ax [450])
            (const_int 8 [0x8])
            (const_int 8 [0x8]))
        (const_int 12 [0xc])) src/gui.c:581 95 {*movsi_insv_1}
     (nil))

(insn 823 822 815 37 (set (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -86 [0xffffffffffffffaa])) [0 S2 A16])
        (reg:HI 0 ax [450])) src/gui.c:581 65 {*movhi_internal}
     (nil))

(insn 815 823 398 37 (parallel [
            (set (reg:SI 0 ax [orig:191 D.6106 ] [191])
                (fix:SI (reg:XF 8 st [orig:190 D.6105 ] [190])))
            (use (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                        (const_int -84 [0xffffffffffffffac])) [0 S2 A16]))
            (use (mem/c:HI (plus:SI (reg/f:SI 6 bp)
                        (const_int -86 [0xffffffffffffffaa])) [0 S2 A16]))
            (clobber (mem/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -92 [0xffffffffffffffa4])) [0 S4 A32]))
        ]) src/gui.c:581 175 {fix_truncsi_i387_with_temp}
     (nil))

(insn 398 815 399 37 (set (reg:HI 0 ax [orig:192 D.6107 ] [192])
        (reg:HI 0 ax [orig:191 D.6106 ] [191])) src/gui.c:581 65 {*movhi_internal}
     (nil))

(insn 399 398 400 37 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -42 [0xffffffffffffffd6])) [0 new_pos.y+0 S2 A16])
        (reg:HI 0 ax [orig:192 D.6107 ] [192])) src/gui.c:581 65 {*movhi_internal}
     (nil))

(insn 400 399 401 37 (set (reg/f:SI 0 ax [371])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(insn 401 400 402 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [371])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(insn 402 401 403 37 (set (reg/f:SI 0 ax [372])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(insn 403 402 404 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [372])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(insn 404 403 405 37 (set (reg/f:SI 0 ax [373])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(insn 405 404 406 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [373])) src/gui.c:582 64 {*movsi_internal}
     (nil))

(call_insn 406 405 407 37 (call (mem:QI (symbol_ref:SI ("Display_RefreshGameBoard") [flags 0x3]  <function_decl 0x4081a780 Display_RefreshGameBoard>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:582 618 {*call_0}
     (nil)
    (nil))

(insn 407 406 408 37 (set (reg/f:SI 0 ax [374])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 408 407 409 37 (set (reg:SI 0 ax [orig:193 D.6108 ] [193])
        (mem/s/j:SI (reg/f:SI 0 ax [374]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 409 408 410 37 (parallel [
            (set (reg:SI 1 dx [orig:194 D.6109 ] [194])
                (plus:SI (reg:SI 0 ax [orig:193 D.6108 ] [193])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:583 252 {*addsi_1}
     (nil))

(insn 410 409 411 37 (set (reg/f:SI 0 ax [375])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 411 410 413 37 (set (reg:SI 0 ax [orig:195 D.6110 ] [195])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:194 D.6109 ] [194])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [375])) [0 gameState_27(D)->zones[D.6109_183].player+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 413 411 414 37 (set (reg/f:SI 1 dx [376])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 414 413 415 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg/f:SI 1 dx [376])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 415 414 416 37 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 0 ax [orig:196 D.6111 ] [196])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 416 415 417 37 (set (reg:DI 0 ax [377])
        (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos+0 S8 A32])) src/gui.c:583 63 {*movdi_internal}
     (nil))

(insn 417 416 418 37 (set (mem:DI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S8 A32])
        (reg:DI 0 ax [377])) src/gui.c:583 63 {*movdi_internal}
     (nil))

(insn 418 417 419 37 (set (reg/f:SI 0 ax [378])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(insn 419 418 420 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [378])) src/gui.c:583 64 {*movsi_internal}
     (nil))

(call_insn 420 419 421 37 (call (mem:QI (symbol_ref:SI ("Checker_Draw") [flags 0x3]  <function_decl 0x4081a200 Checker_Draw>) [0 S1 A8])
        (const_int 20 [0x14])) src/gui.c:583 618 {*call_0}
     (nil)
    (nil))

(insn 421 420 422 37 (set (reg/f:SI 0 ax [379])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:584 64 {*movsi_internal}
     (nil))

(insn 422 421 423 37 (set (reg/f:SI 0 ax [orig:197 D.6112 ] [197])
        (mem/s/f/j:SI (reg/f:SI 0 ax [379]) [0 display_21(D)->screen+0 S4 A32])) src/gui.c:584 64 {*movsi_internal}
     (nil))

(insn 423 422 424 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:197 D.6112 ] [197])) src/gui.c:584 64 {*movsi_internal}
     (nil))

(call_insn 424 423 425 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Flip") [flags 0x41]  <function_decl 0x4079fa00 SDL_Flip>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:584 927 {*call_value_0}
     (nil)
    (nil))

(insn 425 424 426 37 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])
            (const_int 8 [0x8]))) src/gui.c:585 6 {*cmpsi_1}
     (nil))

(jump_insn 426 425 725 37 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 588)
            (pc))) src/gui.c:585 591 {*jcc_1}
     (nil)
 -> 588)
;; End of basic block 37 -> ( 55 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  55
;; Succ edge  38 (fallthru)

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 380 381 382 383

;; Pred edge  37 (fallthru)
(note 725 426 427 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 427 725 428 38 (set (reg:SI 0 ax [381])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 numCas+0 S4 A32])) src/gui.c:585 64 {*movsi_internal}
     (nil))

(insn 428 427 429 38 (parallel [
            (set (reg:SI 0 ax [380])
                (ashift:SI (reg:SI 0 ax [381])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:585 497 {*ashlsi3_1}
     (expr_list:REG_EQUAL (ashift:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -16 [0xfffffffffffffff0])) [0 numCas+0 S4 A32])
            (const_int 2 [0x2]))
        (nil)))

(insn 429 428 430 38 (parallel [
            (set (reg/f:SI 0 ax [382])
                (plus:SI (reg:SI 0 ax [380])
                    (label_ref:SI 433)))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:585 252 {*addsi_1}
     (insn_list:REG_LABEL_OPERAND 433 (nil)))

(insn 430 429 431 38 (set (reg:SI 0 ax [383])
        (mem/u/c:SI (reg/f:SI 0 ax [382]) [0 S4 A8])) src/gui.c:585 64 {*movsi_internal}
     (nil))

(jump_insn 431 430 432 38 (parallel [
            (set (pc)
                (reg:SI 0 ax [383]))
            (use (label_ref 433))
        ]) src/gui.c:585 609 {*tablejump_1}
     (nil)
 -> 433)
;; End of basic block 38 -> ( 55 39 41 43 45 47 49 51 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  55
;; Succ edge  39
;; Succ edge  41
;; Succ edge  43
;; Succ edge  45
;; Succ edge  47
;; Succ edge  49
;; Succ edge  51
;; Succ edge  53

(barrier 432 431 433)

;; Insn is not within a basic block
(code_label 433 432 434 99 "" [2 uses])

;; Insn is not within a basic block
(jump_insn 434 433 435 (addr_vec:SI [
            (label_ref:SI 588)
            (label_ref:SI 436)
            (label_ref:SI 455)
            (label_ref:SI 474)
            (label_ref:SI 493)
            (label_ref:SI 512)
            (label_ref:SI 531)
            (label_ref:SI 550)
            (label_ref:SI 569)
        ]) src/gui.c:585 -1
     (nil))

(barrier 435 434 436)

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 198 199 200 201 384 385 386

;; Pred edge  38
(code_label 436 435 437 39 91 "" [1 uses])

(note 437 436 438 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 438 437 439 39 (set (reg:HI 0 ax [orig:198 D.6113 ] [198])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:588 65 {*movhi_internal}
     (nil))

(insn 439 438 440 39 (set (reg:SI 1 dx [orig:199 D.6114 ] [199])
        (sign_extend:SI (reg:HI 0 ax [orig:198 D.6113 ] [198]))) src/gui.c:588 130 {extendhisi2}
     (nil))

(insn 440 439 441 39 (set (reg:SI 2 cx [384])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:588 64 {*movsi_internal}
     (nil))

(insn 441 440 442 39 (set (reg:SI 0 ax [385])
        (const_int 0 [0])) src/gui.c:588 64 {*movsi_internal}
     (nil))

(insn 442 441 443 39 (parallel [
            (set (reg:SI 0 ax [385])
                (minus:SI (reg:SI 0 ax [385])
                    (reg:SI 2 cx [384])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:588 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [384])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 443 442 446 39 (parallel [
            (set (reg:SI 0 ax [386])
                (ashift:SI (reg:SI 0 ax [385])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:588 497 {*ashlsi3_1}
     (nil))

(insn 446 443 447 39 (parallel [
            (set (reg:SI 0 ax [orig:201 D.6116 ] [201])
                (plus:SI (reg:SI 0 ax [orig:200 D.6115 ] [200])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:588 252 {*addsi_1}
     (nil))

(insn 447 446 448 39 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:199 D.6114 ] [199])
            (reg:SI 0 ax [orig:201 D.6116 ] [201]))) src/gui.c:588 6 {*cmpsi_1}
     (nil))

(jump_insn 448 447 449 39 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 777)
            (pc))) src/gui.c:588 591 {*jcc_1}
     (nil)
 -> 777)
;; End of basic block 39 -> ( 40 65)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  40 (fallthru)
;; Succ edge  65

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  39 (fallthru)
(note 449 448 450 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 450 449 754 40 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:589 64 {*movsi_internal}
     (nil))

(jump_insn 754 450 755 40 (set (pc)
        (label_ref:SI 777)) src/gui.c:590 606 {jump}
     (nil)
 -> 777)
;; End of basic block 40 -> ( 65)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  65 [100.0%] 

(barrier 755 754 455)

;; Start of basic block ( 38) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 202 203 204 205 387 388 389

;; Pred edge  38
(code_label 455 755 456 41 92 "" [1 uses])

(note 456 455 457 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 457 456 458 41 (set (reg:HI 0 ax [orig:202 D.6119 ] [202])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:592 65 {*movhi_internal}
     (nil))

(insn 458 457 459 41 (set (reg:SI 1 dx [orig:203 D.6120 ] [203])
        (sign_extend:SI (reg:HI 0 ax [orig:202 D.6119 ] [202]))) src/gui.c:592 130 {extendhisi2}
     (nil))

(insn 459 458 460 41 (set (reg:SI 2 cx [387])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:592 64 {*movsi_internal}
     (nil))

(insn 460 459 461 41 (set (reg:SI 0 ax [388])
        (const_int 0 [0])) src/gui.c:592 64 {*movsi_internal}
     (nil))

(insn 461 460 462 41 (parallel [
            (set (reg:SI 0 ax [388])
                (minus:SI (reg:SI 0 ax [388])
                    (reg:SI 2 cx [387])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:592 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [387])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 462 461 465 41 (parallel [
            (set (reg:SI 0 ax [389])
                (ashift:SI (reg:SI 0 ax [388])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:592 497 {*ashlsi3_1}
     (nil))

(insn 465 462 466 41 (parallel [
            (set (reg:SI 0 ax [orig:205 D.6122 ] [205])
                (plus:SI (reg:SI 0 ax [orig:204 D.6121 ] [204])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:592 252 {*addsi_1}
     (nil))

(insn 466 465 467 41 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:203 D.6120 ] [203])
            (reg:SI 0 ax [orig:205 D.6122 ] [205]))) src/gui.c:592 6 {*cmpsi_1}
     (nil))

(jump_insn 467 466 468 41 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 782)
            (pc))) src/gui.c:592 591 {*jcc_1}
     (nil)
 -> 782)
;; End of basic block 41 -> ( 42 66)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  42 (fallthru)
;; Succ edge  66

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  41 (fallthru)
(note 468 467 469 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 469 468 756 42 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:593 64 {*movsi_internal}
     (nil))

(jump_insn 756 469 757 42 (set (pc)
        (label_ref:SI 782)) src/gui.c:594 606 {jump}
     (nil)
 -> 782)
;; End of basic block 42 -> ( 66)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  66 [100.0%] 

(barrier 757 756 474)

;; Start of basic block ( 38) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 206 207 208 209 390 391 392

;; Pred edge  38
(code_label 474 757 475 43 93 "" [1 uses])

(note 475 474 476 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 476 475 477 43 (set (reg:HI 0 ax [orig:206 D.6125 ] [206])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:596 65 {*movhi_internal}
     (nil))

(insn 477 476 478 43 (set (reg:SI 1 dx [orig:207 D.6126 ] [207])
        (sign_extend:SI (reg:HI 0 ax [orig:206 D.6125 ] [206]))) src/gui.c:596 130 {extendhisi2}
     (nil))

(insn 478 477 479 43 (set (reg:SI 2 cx [390])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:596 64 {*movsi_internal}
     (nil))

(insn 479 478 480 43 (set (reg:SI 0 ax [391])
        (const_int 0 [0])) src/gui.c:596 64 {*movsi_internal}
     (nil))

(insn 480 479 481 43 (parallel [
            (set (reg:SI 0 ax [391])
                (minus:SI (reg:SI 0 ax [391])
                    (reg:SI 2 cx [390])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:596 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [390])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 481 480 484 43 (parallel [
            (set (reg:SI 0 ax [392])
                (ashift:SI (reg:SI 0 ax [391])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:596 497 {*ashlsi3_1}
     (nil))

(insn 484 481 485 43 (parallel [
            (set (reg:SI 0 ax [orig:209 D.6128 ] [209])
                (plus:SI (reg:SI 0 ax [orig:208 D.6127 ] [208])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:596 252 {*addsi_1}
     (nil))

(insn 485 484 486 43 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:207 D.6126 ] [207])
            (reg:SI 0 ax [orig:209 D.6128 ] [209]))) src/gui.c:596 6 {*cmpsi_1}
     (nil))

(jump_insn 486 485 487 43 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 787)
            (pc))) src/gui.c:596 591 {*jcc_1}
     (nil)
 -> 787)
;; End of basic block 43 -> ( 44 67)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  44 (fallthru)
;; Succ edge  67

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  43 (fallthru)
(note 487 486 488 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 488 487 758 44 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:597 64 {*movsi_internal}
     (nil))

(jump_insn 758 488 759 44 (set (pc)
        (label_ref:SI 787)) src/gui.c:598 606 {jump}
     (nil)
 -> 787)
;; End of basic block 44 -> ( 67)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  67 [100.0%] 

(barrier 759 758 493)

;; Start of basic block ( 38) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 210 211 212 213 393 394 395

;; Pred edge  38
(code_label 493 759 494 45 94 "" [1 uses])

(note 494 493 495 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 495 494 496 45 (set (reg:HI 0 ax [orig:210 D.6131 ] [210])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:600 65 {*movhi_internal}
     (nil))

(insn 496 495 497 45 (set (reg:SI 1 dx [orig:211 D.6132 ] [211])
        (sign_extend:SI (reg:HI 0 ax [orig:210 D.6131 ] [210]))) src/gui.c:600 130 {extendhisi2}
     (nil))

(insn 497 496 498 45 (set (reg:SI 2 cx [393])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:600 64 {*movsi_internal}
     (nil))

(insn 498 497 499 45 (set (reg:SI 0 ax [394])
        (const_int 0 [0])) src/gui.c:600 64 {*movsi_internal}
     (nil))

(insn 499 498 500 45 (parallel [
            (set (reg:SI 0 ax [394])
                (minus:SI (reg:SI 0 ax [394])
                    (reg:SI 2 cx [393])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:600 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [393])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 500 499 503 45 (parallel [
            (set (reg:SI 0 ax [395])
                (ashift:SI (reg:SI 0 ax [394])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:600 497 {*ashlsi3_1}
     (nil))

(insn 503 500 504 45 (parallel [
            (set (reg:SI 0 ax [orig:213 D.6134 ] [213])
                (plus:SI (reg:SI 0 ax [orig:212 D.6133 ] [212])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:600 252 {*addsi_1}
     (nil))

(insn 504 503 505 45 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:211 D.6132 ] [211])
            (reg:SI 0 ax [orig:213 D.6134 ] [213]))) src/gui.c:600 6 {*cmpsi_1}
     (nil))

(jump_insn 505 504 506 45 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 792)
            (pc))) src/gui.c:600 591 {*jcc_1}
     (nil)
 -> 792)
;; End of basic block 45 -> ( 46 68)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  46 (fallthru)
;; Succ edge  68

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  45 (fallthru)
(note 506 505 507 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 507 506 760 46 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:601 64 {*movsi_internal}
     (nil))

(jump_insn 760 507 761 46 (set (pc)
        (label_ref:SI 792)) src/gui.c:602 606 {jump}
     (nil)
 -> 792)
;; End of basic block 46 -> ( 68)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  68 [100.0%] 

(barrier 761 760 512)

;; Start of basic block ( 38) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 214 215 216 217 396 397 398

;; Pred edge  38
(code_label 512 761 513 47 95 "" [1 uses])

(note 513 512 514 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 514 513 515 47 (set (reg:HI 0 ax [orig:214 D.6137 ] [214])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:604 65 {*movhi_internal}
     (nil))

(insn 515 514 516 47 (set (reg:SI 1 dx [orig:215 D.6138 ] [215])
        (sign_extend:SI (reg:HI 0 ax [orig:214 D.6137 ] [214]))) src/gui.c:604 130 {extendhisi2}
     (nil))

(insn 516 515 517 47 (set (reg:SI 2 cx [396])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:604 64 {*movsi_internal}
     (nil))

(insn 517 516 518 47 (set (reg:SI 0 ax [397])
        (const_int 0 [0])) src/gui.c:604 64 {*movsi_internal}
     (nil))

(insn 518 517 519 47 (parallel [
            (set (reg:SI 0 ax [397])
                (minus:SI (reg:SI 0 ax [397])
                    (reg:SI 2 cx [396])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:604 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [396])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 519 518 522 47 (parallel [
            (set (reg:SI 0 ax [398])
                (ashift:SI (reg:SI 0 ax [397])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:604 497 {*ashlsi3_1}
     (nil))

(insn 522 519 523 47 (parallel [
            (set (reg:SI 0 ax [orig:217 D.6140 ] [217])
                (plus:SI (reg:SI 0 ax [orig:216 D.6139 ] [216])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:604 252 {*addsi_1}
     (nil))

(insn 523 522 524 47 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:215 D.6138 ] [215])
            (reg:SI 0 ax [orig:217 D.6140 ] [217]))) src/gui.c:604 6 {*cmpsi_1}
     (nil))

(jump_insn 524 523 525 47 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 797)
            (pc))) src/gui.c:604 591 {*jcc_1}
     (nil)
 -> 797)
;; End of basic block 47 -> ( 48 69)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  48 (fallthru)
;; Succ edge  69

;; Start of basic block ( 47) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  47 (fallthru)
(note 525 524 526 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 526 525 762 48 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:605 64 {*movsi_internal}
     (nil))

(jump_insn 762 526 763 48 (set (pc)
        (label_ref:SI 797)) src/gui.c:606 606 {jump}
     (nil)
 -> 797)
;; End of basic block 48 -> ( 69)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  69 [100.0%] 

(barrier 763 762 531)

;; Start of basic block ( 38) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 218 219 220 221 399 400 401

;; Pred edge  38
(code_label 531 763 532 49 96 "" [1 uses])

(note 532 531 533 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 533 532 534 49 (set (reg:HI 0 ax [orig:218 D.6143 ] [218])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:608 65 {*movhi_internal}
     (nil))

(insn 534 533 535 49 (set (reg:SI 1 dx [orig:219 D.6144 ] [219])
        (sign_extend:SI (reg:HI 0 ax [orig:218 D.6143 ] [218]))) src/gui.c:608 130 {extendhisi2}
     (nil))

(insn 535 534 536 49 (set (reg:SI 2 cx [399])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:608 64 {*movsi_internal}
     (nil))

(insn 536 535 537 49 (set (reg:SI 0 ax [400])
        (const_int 0 [0])) src/gui.c:608 64 {*movsi_internal}
     (nil))

(insn 537 536 538 49 (parallel [
            (set (reg:SI 0 ax [400])
                (minus:SI (reg:SI 0 ax [400])
                    (reg:SI 2 cx [399])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:608 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [399])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 538 537 541 49 (parallel [
            (set (reg:SI 0 ax [401])
                (ashift:SI (reg:SI 0 ax [400])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:608 497 {*ashlsi3_1}
     (nil))

(insn 541 538 542 49 (parallel [
            (set (reg:SI 0 ax [orig:221 D.6146 ] [221])
                (plus:SI (reg:SI 0 ax [orig:220 D.6145 ] [220])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:608 252 {*addsi_1}
     (nil))

(insn 542 541 543 49 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:219 D.6144 ] [219])
            (reg:SI 0 ax [orig:221 D.6146 ] [221]))) src/gui.c:608 6 {*cmpsi_1}
     (nil))

(jump_insn 543 542 544 49 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 802)
            (pc))) src/gui.c:608 591 {*jcc_1}
     (nil)
 -> 802)
;; End of basic block 49 -> ( 50 70)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  50 (fallthru)
;; Succ edge  70

;; Start of basic block ( 49) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  49 (fallthru)
(note 544 543 545 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 545 544 764 50 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:609 64 {*movsi_internal}
     (nil))

(jump_insn 764 545 765 50 (set (pc)
        (label_ref:SI 802)) src/gui.c:610 606 {jump}
     (nil)
 -> 802)
;; End of basic block 50 -> ( 70)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  70 [100.0%] 

(barrier 765 764 550)

;; Start of basic block ( 38) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 222 223 224 225 402 403 404

;; Pred edge  38
(code_label 550 765 551 51 97 "" [1 uses])

(note 551 550 552 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 552 551 553 51 (set (reg:HI 0 ax [orig:222 D.6149 ] [222])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:612 65 {*movhi_internal}
     (nil))

(insn 553 552 554 51 (set (reg:SI 1 dx [orig:223 D.6150 ] [223])
        (sign_extend:SI (reg:HI 0 ax [orig:222 D.6149 ] [222]))) src/gui.c:612 130 {extendhisi2}
     (nil))

(insn 554 553 555 51 (set (reg:SI 2 cx [402])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:612 64 {*movsi_internal}
     (nil))

(insn 555 554 556 51 (set (reg:SI 0 ax [403])
        (const_int 0 [0])) src/gui.c:612 64 {*movsi_internal}
     (nil))

(insn 556 555 557 51 (parallel [
            (set (reg:SI 0 ax [403])
                (minus:SI (reg:SI 0 ax [403])
                    (reg:SI 2 cx [402])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:612 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [402])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 557 556 560 51 (parallel [
            (set (reg:SI 0 ax [404])
                (ashift:SI (reg:SI 0 ax [403])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:612 497 {*ashlsi3_1}
     (nil))

(insn 560 557 561 51 (parallel [
            (set (reg:SI 0 ax [orig:225 D.6152 ] [225])
                (plus:SI (reg:SI 0 ax [orig:224 D.6151 ] [224])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:612 252 {*addsi_1}
     (nil))

(insn 561 560 562 51 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:223 D.6150 ] [223])
            (reg:SI 0 ax [orig:225 D.6152 ] [225]))) src/gui.c:612 6 {*cmpsi_1}
     (nil))

(jump_insn 562 561 563 51 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 807)
            (pc))) src/gui.c:612 591 {*jcc_1}
     (nil)
 -> 807)
;; End of basic block 51 -> ( 52 71)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  52 (fallthru)
;; Succ edge  71

;; Start of basic block ( 51) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  51 (fallthru)
(note 563 562 564 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 564 563 766 52 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:613 64 {*movsi_internal}
     (nil))

(jump_insn 766 564 767 52 (set (pc)
        (label_ref:SI 807)) src/gui.c:614 606 {jump}
     (nil)
 -> 807)
;; End of basic block 52 -> ( 71)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  71 [100.0%] 

(barrier 767 766 569)

;; Start of basic block ( 38) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 226 227 228 229 405 406 407

;; Pred edge  38
(code_label 569 767 570 53 98 "" [1 uses])

(note 570 569 571 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 571 570 572 53 (set (reg:HI 0 ax [orig:226 D.6155 ] [226])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 new_pos.x+0 S2 A32])) src/gui.c:616 65 {*movhi_internal}
     (nil))

(insn 572 571 573 53 (set (reg:SI 1 dx [orig:227 D.6156 ] [227])
        (sign_extend:SI (reg:HI 0 ax [orig:226 D.6155 ] [226]))) src/gui.c:616 130 {extendhisi2}
     (nil))

(insn 573 572 574 53 (set (reg:SI 2 cx [405])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 pas+0 S4 A32])) src/gui.c:616 64 {*movsi_internal}
     (nil))

(insn 574 573 575 53 (set (reg:SI 0 ax [406])
        (const_int 0 [0])) src/gui.c:616 64 {*movsi_internal}
     (nil))

(insn 575 574 576 53 (parallel [
            (set (reg:SI 0 ax [406])
                (minus:SI (reg:SI 0 ax [406])
                    (reg:SI 2 cx [405])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:616 291 {*subsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [405])
            (const_int -1 [0xffffffffffffffff]))
        (nil)))

(insn 576 575 579 53 (parallel [
            (set (reg:SI 0 ax [407])
                (ashift:SI (reg:SI 0 ax [406])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:616 497 {*ashlsi3_1}
     (nil))

(insn 579 576 580 53 (parallel [
            (set (reg:SI 0 ax [orig:229 D.6158 ] [229])
                (plus:SI (reg:SI 0 ax [orig:228 D.6157 ] [228])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 pos_dest_x+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:616 252 {*addsi_1}
     (nil))

(insn 580 579 581 53 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 1 dx [orig:227 D.6156 ] [227])
            (reg:SI 0 ax [orig:229 D.6158 ] [229]))) src/gui.c:616 6 {*cmpsi_1}
     (nil))

(jump_insn 581 580 582 53 (set (pc)
        (if_then_else (ge (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 812)
            (pc))) src/gui.c:616 591 {*jcc_1}
     (nil)
 -> 812)
;; End of basic block 53 -> ( 54 72)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  54 (fallthru)
;; Succ edge  72

;; Start of basic block ( 53) -> 54
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  53 (fallthru)
(note 582 581 583 54 [bb 54] NOTE_INSN_BASIC_BLOCK)

(insn 583 582 768 54 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:617 64 {*movsi_internal}
     (nil))

(jump_insn 768 583 769 54 (set (pc)
        (label_ref:SI 812)) src/gui.c:618 606 {jump}
     (nil)
 -> 812)
;; End of basic block 54 -> ( 72)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  72 [100.0%] 

(barrier 769 768 588)

;; Start of basic block ( 38 37) -> 55
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  38
;; Pred edge  37
(code_label 588 769 589 55 90 "" [2 uses])

(note 589 588 590 55 [bb 55] NOTE_INSN_BASIC_BLOCK)

(insn 590 589 774 55 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:620 64 {*movsi_internal}
     (nil))

(jump_insn 774 590 775 55 (set (pc)
        (label_ref 591)) src/gui.c:621 606 {jump}
     (nil)
 -> 591)
;; End of basic block 55 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56

(barrier 775 774 777)

;; Start of basic block ( 39 40) -> 65
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  39
;; Pred edge  40 [100.0%] 
(code_label 777 775 776 65 113 "" [2 uses])

(note 776 777 778 65 [bb 65] NOTE_INSN_BASIC_BLOCK)

(insn 778 776 779 65 (const_int 0 [0]) src/gui.c:590 638 {nop}
     (nil))

(jump_insn 779 778 780 65 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 65 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 780 779 782)

;; Start of basic block ( 41 42) -> 66
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  41
;; Pred edge  42 [100.0%] 
(code_label 782 780 781 66 114 "" [2 uses])

(note 781 782 783 66 [bb 66] NOTE_INSN_BASIC_BLOCK)

(insn 783 781 784 66 (const_int 0 [0]) src/gui.c:594 638 {nop}
     (nil))

(jump_insn 784 783 785 66 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 66 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 785 784 787)

;; Start of basic block ( 43 44) -> 67
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  43
;; Pred edge  44 [100.0%] 
(code_label 787 785 786 67 115 "" [2 uses])

(note 786 787 788 67 [bb 67] NOTE_INSN_BASIC_BLOCK)

(insn 788 786 789 67 (const_int 0 [0]) src/gui.c:598 638 {nop}
     (nil))

(jump_insn 789 788 790 67 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 67 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 790 789 792)

;; Start of basic block ( 45 46) -> 68
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  45
;; Pred edge  46 [100.0%] 
(code_label 792 790 791 68 116 "" [2 uses])

(note 791 792 793 68 [bb 68] NOTE_INSN_BASIC_BLOCK)

(insn 793 791 794 68 (const_int 0 [0]) src/gui.c:602 638 {nop}
     (nil))

(jump_insn 794 793 795 68 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 68 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 795 794 797)

;; Start of basic block ( 47 48) -> 69
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  47
;; Pred edge  48 [100.0%] 
(code_label 797 795 796 69 117 "" [2 uses])

(note 796 797 798 69 [bb 69] NOTE_INSN_BASIC_BLOCK)

(insn 798 796 799 69 (const_int 0 [0]) src/gui.c:606 638 {nop}
     (nil))

(jump_insn 799 798 800 69 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 69 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 800 799 802)

;; Start of basic block ( 49 50) -> 70
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  49
;; Pred edge  50 [100.0%] 
(code_label 802 800 801 70 118 "" [2 uses])

(note 801 802 803 70 [bb 70] NOTE_INSN_BASIC_BLOCK)

(insn 803 801 804 70 (const_int 0 [0]) src/gui.c:610 638 {nop}
     (nil))

(jump_insn 804 803 805 70 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 70 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 805 804 807)

;; Start of basic block ( 51 52) -> 71
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  51
;; Pred edge  52 [100.0%] 
(code_label 807 805 806 71 119 "" [2 uses])

(note 806 807 808 71 [bb 71] NOTE_INSN_BASIC_BLOCK)

(insn 808 806 809 71 (const_int 0 [0]) src/gui.c:614 638 {nop}
     (nil))

(jump_insn 809 808 810 71 (set (pc)
        (label_ref 591)) 606 {jump}
     (nil)
 -> 591)
;; End of basic block 71 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%] 

(barrier 810 809 812)

;; Start of basic block ( 53 54) -> 72
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  53
;; Pred edge  54 [100.0%] 
(code_label 812 810 811 72 120 "" [2 uses])

(note 811 812 813 72 [bb 72] NOTE_INSN_BASIC_BLOCK)

(insn 813 811 591 72 (const_int 0 [0]) src/gui.c:618 638 {nop}
     (nil))
;; End of basic block 72 -> ( 56)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  56 [100.0%]  (fallthru)

;; Start of basic block ( 72 36 55 65 66 67 68 69 70 71) -> 56
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  72 [100.0%]  (fallthru)
;; Pred edge  36 [100.0%] 
;; Pred edge  55
;; Pred edge  65 [100.0%] 
;; Pred edge  66 [100.0%] 
;; Pred edge  67 [100.0%] 
;; Pred edge  68 [100.0%] 
;; Pred edge  69 [100.0%] 
;; Pred edge  70 [100.0%] 
;; Pred edge  71 [100.0%] 
(code_label 591 813 592 56 89 "" [9 uses])

(note 592 591 594 56 [bb 56] NOTE_INSN_BASIC_BLOCK)

(insn 594 592 595 56 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 depassement+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:578 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 595 594 596 56 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 593)
            (pc))) src/gui.c:578 591 {*jcc_1}
     (nil)
 -> 593)
;; End of basic block 56 -> ( 37 57)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 19 [fpcr] 20 [frame]


;; Succ edge  37
;; Succ edge  57 (fallthru)

;; Start of basic block ( 56) -> 57
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 230 231 232 408 409

;; Pred edge  56 (fallthru)
(note 596 595 597 57 [bb 57] NOTE_INSN_BASIC_BLOCK)

(insn 597 596 598 57 (set (reg/f:SI 0 ax [408])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 598 597 599 57 (set (reg:SI 0 ax [orig:230 D.6163 ] [230])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [408])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 599 598 600 57 (parallel [
            (set (reg:SI 1 dx [orig:231 D.6164 ] [231])
                (plus:SI (reg:SI 0 ax [orig:230 D.6163 ] [230])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:624 252 {*addsi_1}
     (nil))

(insn 600 599 601 57 (set (reg/f:SI 0 ax [409])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 601 600 602 57 (set (reg:SI 0 ax [orig:232 D.6165 ] [232])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:231 D.6164 ] [231])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [409]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6164_229].nb_checkers+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 602 601 603 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:232 D.6165 ] [232])
            (const_int 1 [0x1]))) src/gui.c:624 6 {*cmpsi_1}
     (nil))

(jump_insn 603 602 604 57 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 694)
            (pc))) src/gui.c:624 591 {*jcc_1}
     (nil)
 -> 694)
;; End of basic block 57 -> ( 58 63)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  58 (fallthru)
;; Succ edge  63

;; Start of basic block ( 57) -> 58
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 233 234 235 236 237 238 410 411 412 413

;; Pred edge  57 (fallthru)
(note 604 603 605 58 [bb 58] NOTE_INSN_BASIC_BLOCK)

(insn 605 604 606 58 (set (reg/f:SI 0 ax [410])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 606 605 607 58 (set (reg:SI 0 ax [orig:233 D.6167 ] [233])
        (mem/s/j:SI (reg/f:SI 0 ax [410]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 607 606 608 58 (parallel [
            (set (reg:SI 1 dx [orig:234 D.6168 ] [234])
                (plus:SI (reg:SI 0 ax [orig:233 D.6167 ] [233])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:624 252 {*addsi_1}
     (nil))

(insn 608 607 609 58 (set (reg/f:SI 0 ax [411])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 609 608 610 58 (set (reg:SI 1 dx [orig:235 D.6169 ] [235])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:234 D.6168 ] [234])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [411])) [0 gameState_27(D)->zones[D.6168_232].player+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 610 609 611 58 (set (reg/f:SI 0 ax [412])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 611 610 612 58 (set (reg:SI 0 ax [orig:236 D.6170 ] [236])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [412])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 612 611 613 58 (parallel [
            (set (reg:SI 2 cx [orig:237 D.6171 ] [237])
                (plus:SI (reg:SI 0 ax [orig:236 D.6170 ] [236])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:624 252 {*addsi_1}
     (nil))

(insn 613 612 614 58 (set (reg/f:SI 0 ax [413])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 614 613 615 58 (set (reg:SI 0 ax [orig:238 D.6172 ] [238])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 cx [orig:237 D.6171 ] [237])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [413])) [0 gameState_27(D)->zones[D.6171_235].player+0 S4 A32])) src/gui.c:624 64 {*movsi_internal}
     (nil))

(insn 615 614 616 58 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:235 D.6169 ] [235])
            (reg:SI 0 ax [orig:238 D.6172 ] [238]))) src/gui.c:624 6 {*cmpsi_1}
     (nil))

(jump_insn 616 615 617 58 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 694)
            (pc))) src/gui.c:624 591 {*jcc_1}
     (nil)
 -> 694)
;; End of basic block 58 -> ( 59 63)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  59 (fallthru)
;; Succ edge  63

;; Start of basic block ( 58) -> 59
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 239 240 414 415

;; Pred edge  58 (fallthru)
(note 617 616 618 59 [bb 59] NOTE_INSN_BASIC_BLOCK)

(insn 618 617 619 59 (set (reg/f:SI 0 ax [414])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 619 618 620 59 (set (reg:SI 1 dx [orig:239 D.6176 ] [239])
        (mem/s/j:SI (reg/f:SI 0 ax [414]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 620 619 621 59 (set (reg/f:SI 0 ax [415])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 621 620 622 59 (set (reg:SI 0 ax [orig:240 D.6177 ] [240])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:239 D.6176 ] [239])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [415])) [0 gameState_27(D)->zones[D.6176_237].player+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 622 621 623 59 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:240 D.6177 ] [240])
            (const_int 0 [0]))) src/gui.c:626 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 623 622 624 59 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) src/gui.c:626 591 {*jcc_1}
     (nil)
 -> 661)
;; End of basic block 59 -> ( 60 62)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  60 (fallthru)
;; Succ edge  62

;; Start of basic block ( 59) -> 60
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 241 242 416 417

;; Pred edge  59 (fallthru)
(note 624 623 625 60 [bb 60] NOTE_INSN_BASIC_BLOCK)

(insn 625 624 626 60 (set (reg/f:SI 0 ax [416])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 626 625 627 60 (set (reg:SI 1 dx [orig:241 D.6179 ] [241])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [416])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 627 626 628 60 (set (reg/f:SI 0 ax [417])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 628 627 629 60 (set (reg:SI 0 ax [orig:242 D.6180 ] [242])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:241 D.6179 ] [241])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [417])) [0 gameState_27(D)->zones[D.6179_239].player+0 S4 A32])) src/gui.c:626 64 {*movsi_internal}
     (nil))

(insn 629 628 630 60 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:242 D.6180 ] [242])
            (const_int 1 [0x1]))) src/gui.c:626 6 {*cmpsi_1}
     (nil))

(jump_insn 630 629 631 60 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 661)
            (pc))) src/gui.c:626 591 {*jcc_1}
     (nil)
 -> 661)
;; End of basic block 60 -> ( 61 62)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  61 (fallthru)
;; Succ edge  62

;; Start of basic block ( 60) -> 61
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 243 244 245 246 247 251 252 253 254 255 418 419 420 421 422 425 426 427 428

;; Pred edge  60 (fallthru)
(note 631 630 632 61 [bb 61] NOTE_INSN_BASIC_BLOCK)

(insn 632 631 633 61 (set (reg/f:SI 0 ax [418])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:628 64 {*movsi_internal}
     (nil))

(insn 633 632 634 61 (set (reg:SI 0 ax [orig:243 D.6182 ] [243])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [418])
                (const_int 212 [0xd4])) [0 gameState_27(D)->zones[26].nb_checkers+0 S4 A32])) src/gui.c:628 64 {*movsi_internal}
     (nil))

(insn 634 633 635 61 (parallel [
            (set (reg:SI 1 dx [orig:244 D.6183 ] [244])
                (plus:SI (reg:SI 0 ax [orig:243 D.6182 ] [243])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:628 252 {*addsi_1}
     (nil))

(insn 635 634 636 61 (set (reg/f:SI 0 ax [419])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:628 64 {*movsi_internal}
     (nil))

(insn 636 635 637 61 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [419])
                (const_int 212 [0xd4])) [0 gameState_27(D)->zones[26].nb_checkers+0 S4 A32])
        (reg:SI 1 dx [orig:244 D.6183 ] [244])) src/gui.c:628 64 {*movsi_internal}
     (nil))

(insn 637 636 638 61 (set (reg/f:SI 0 ax [420])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 638 637 639 61 (set (reg:SI 0 ax [orig:245 D.6184 ] [245])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [420])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 639 638 640 61 (parallel [
            (set (reg:SI 1 dx [orig:246 D.6185 ] [246])
                (plus:SI (reg:SI 0 ax [orig:245 D.6184 ] [245])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:629 252 {*addsi_1}
     (nil))

(insn 640 639 641 61 (set (reg/f:SI 0 ax [421])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 641 640 642 61 (set (reg:SI 1 dx [orig:247 D.6186 ] [247])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:246 D.6185 ] [246])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [421])) [0 gameState_27(D)->zones[D.6185_244].player+0 S4 A32])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 642 641 643 61 (set (reg/f:SI 0 ax [422])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 643 642 649 61 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [422])
                (const_int 208 [0xd0])) [0 gameState_27(D)->zones[26].player+0 S4 A32])
        (reg:SI 1 dx [orig:247 D.6186 ] [247])) src/gui.c:629 64 {*movsi_internal}
     (nil))

(insn 649 643 650 61 (set (reg/f:SI 0 ax [425])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 650 649 651 61 (set (reg:SI 0 ax [orig:251 D.6190 ] [251])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [425])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 651 650 652 61 (parallel [
            (set (reg:SI 2 cx [orig:252 D.6191 ] [252])
                (plus:SI (reg:SI 0 ax [orig:251 D.6190 ] [251])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:631 252 {*addsi_1}
     (nil))

(insn 652 651 653 61 (set (reg/f:SI 0 ax [426])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 653 652 654 61 (set (reg:SI 0 ax [orig:253 D.6192 ] [253])
        (mem/s/j:SI (reg/f:SI 0 ax [426]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 654 653 655 61 (parallel [
            (set (reg:SI 1 dx [orig:254 D.6193 ] [254])
                (plus:SI (reg:SI 0 ax [orig:253 D.6192 ] [253])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:631 252 {*addsi_1}
     (nil))

(insn 655 654 656 61 (set (reg/f:SI 0 ax [427])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 656 655 657 61 (set (reg:SI 1 dx [orig:255 D.6194 ] [255])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:254 D.6193 ] [254])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [427])) [0 gameState_27(D)->zones[D.6193_252].player+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 657 656 658 61 (set (reg/f:SI 0 ax [428])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(insn 658 657 770 61 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 cx [orig:252 D.6191 ] [252])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [428])) [0 gameState_27(D)->zones[D.6191_250].player+0 S4 A32])
        (reg:SI 1 dx [orig:255 D.6194 ] [255])) src/gui.c:631 64 {*movsi_internal}
     (nil))

(jump_insn 770 658 771 61 (set (pc)
        (label_ref 714)) src/gui.c:626 606 {jump}
     (nil)
 -> 714)
;; End of basic block 61 -> ( 64)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  64 [100.0%] 

(barrier 771 770 661)

;; Start of basic block ( 59 60) -> 62
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 256 257 258 259 260 264 265 266 267 268 429 430 431 432 433 436 437 438 439

;; Pred edge  59
;; Pred edge  60
(code_label 661 771 662 62 110 "" [2 uses])

(note 662 661 663 62 [bb 62] NOTE_INSN_BASIC_BLOCK)

(insn 663 662 664 62 (set (reg/f:SI 0 ax [429])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:635 64 {*movsi_internal}
     (nil))

(insn 664 663 665 62 (set (reg:SI 0 ax [orig:256 D.6195 ] [256])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [429])
                (const_int 196 [0xc4])) [0 gameState_27(D)->zones[24].nb_checkers+0 S4 A32])) src/gui.c:635 64 {*movsi_internal}
     (nil))

(insn 665 664 666 62 (parallel [
            (set (reg:SI 1 dx [orig:257 D.6196 ] [257])
                (plus:SI (reg:SI 0 ax [orig:256 D.6195 ] [256])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:635 252 {*addsi_1}
     (nil))

(insn 666 665 667 62 (set (reg/f:SI 0 ax [430])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:635 64 {*movsi_internal}
     (nil))

(insn 667 666 668 62 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [430])
                (const_int 196 [0xc4])) [0 gameState_27(D)->zones[24].nb_checkers+0 S4 A32])
        (reg:SI 1 dx [orig:257 D.6196 ] [257])) src/gui.c:635 64 {*movsi_internal}
     (nil))

(insn 668 667 669 62 (set (reg/f:SI 0 ax [431])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 669 668 670 62 (set (reg:SI 0 ax [orig:258 D.6197 ] [258])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [431])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 670 669 671 62 (parallel [
            (set (reg:SI 1 dx [orig:259 D.6198 ] [259])
                (plus:SI (reg:SI 0 ax [orig:258 D.6197 ] [258])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:636 252 {*addsi_1}
     (nil))

(insn 671 670 672 62 (set (reg/f:SI 0 ax [432])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 672 671 673 62 (set (reg:SI 1 dx [orig:260 D.6199 ] [260])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:259 D.6198 ] [259])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [432])) [0 gameState_27(D)->zones[D.6198_257].player+0 S4 A32])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 673 672 674 62 (set (reg/f:SI 0 ax [433])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 674 673 680 62 (set (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [433])
                (const_int 192 [0xc0])) [0 gameState_27(D)->zones[24].player+0 S4 A32])
        (reg:SI 1 dx [orig:260 D.6199 ] [260])) src/gui.c:636 64 {*movsi_internal}
     (nil))

(insn 680 674 681 62 (set (reg/f:SI 0 ax [436])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 681 680 682 62 (set (reg:SI 0 ax [orig:264 D.6203 ] [264])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [436])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 682 681 683 62 (parallel [
            (set (reg:SI 2 cx [orig:265 D.6204 ] [265])
                (plus:SI (reg:SI 0 ax [orig:264 D.6203 ] [264])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:638 252 {*addsi_1}
     (nil))

(insn 683 682 684 62 (set (reg/f:SI 0 ax [437])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 684 683 685 62 (set (reg:SI 0 ax [orig:266 D.6205 ] [266])
        (mem/s/j:SI (reg/f:SI 0 ax [437]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 685 684 686 62 (parallel [
            (set (reg:SI 1 dx [orig:267 D.6206 ] [267])
                (plus:SI (reg:SI 0 ax [orig:266 D.6205 ] [266])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:638 252 {*addsi_1}
     (nil))

(insn 686 685 687 62 (set (reg/f:SI 0 ax [438])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 687 686 688 62 (set (reg:SI 1 dx [orig:268 D.6207 ] [268])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:267 D.6206 ] [267])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [438])) [0 gameState_27(D)->zones[D.6206_265].player+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 688 687 689 62 (set (reg/f:SI 0 ax [439])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(insn 689 688 772 62 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 cx [orig:265 D.6204 ] [265])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [439])) [0 gameState_27(D)->zones[D.6204_263].player+0 S4 A32])
        (reg:SI 1 dx [orig:268 D.6207 ] [268])) src/gui.c:638 64 {*movsi_internal}
     (nil))

(jump_insn 772 689 773 62 (set (pc)
        (label_ref 714)) src/gui.c:626 606 {jump}
     (nil)
 -> 714)
;; End of basic block 62 -> ( 64)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  64

(barrier 773 772 694)

;; Start of basic block ( 57 58) -> 63
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 269 270 271 272 273 274 275 276 277 440 441 442 443 444 445 446

;; Pred edge  57
;; Pred edge  58
(code_label 694 773 695 63 109 "" [2 uses])

(note 695 694 696 63 [bb 63] NOTE_INSN_BASIC_BLOCK)

(insn 696 695 697 63 (set (reg/f:SI 0 ax [440])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 697 696 698 63 (set (reg:SI 0 ax [orig:269 D.6208 ] [269])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [440])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 698 697 699 63 (parallel [
            (set (reg:SI 0 ax [orig:270 D.6209 ] [270])
                (plus:SI (reg:SI 0 ax [orig:269 D.6208 ] [269])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:643 252 {*addsi_1}
     (nil))

(insn 699 698 700 63 (set (reg/f:SI 1 dx [441])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 700 699 701 63 (set (reg:SI 1 dx [orig:271 D.6210 ] [271])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:270 D.6209 ] [270])
                        (const_int 8 [0x8]))
                    (reg/f:SI 1 dx [441]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6209_268].nb_checkers+0 S4 A32])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 701 700 702 63 (parallel [
            (set (reg:SI 2 cx [orig:272 D.6211 ] [272])
                (plus:SI (reg:SI 1 dx [orig:271 D.6210 ] [271])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:643 252 {*addsi_1}
     (nil))

(insn 702 701 703 63 (set (reg/f:SI 1 dx [442])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 703 702 704 63 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [orig:270 D.6209 ] [270])
                        (const_int 8 [0x8]))
                    (reg/f:SI 1 dx [442]))
                (const_int 4 [0x4])) [0 gameState_27(D)->zones[D.6209_268].nb_checkers+0 S4 A32])
        (reg:SI 2 cx [orig:272 D.6211 ] [272])) src/gui.c:643 64 {*movsi_internal}
     (nil))

(insn 704 703 705 63 (set (reg/f:SI 0 ax [443])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 705 704 706 63 (set (reg:SI 0 ax [orig:273 D.6212 ] [273])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [443])
                (const_int 4 [0x4])) [0 move_18(D)->dest_point+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 706 705 707 63 (parallel [
            (set (reg:SI 2 cx [orig:274 D.6213 ] [274])
                (plus:SI (reg:SI 0 ax [orig:273 D.6212 ] [273])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:644 252 {*addsi_1}
     (nil))

(insn 707 706 708 63 (set (reg/f:SI 0 ax [444])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 move+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 708 707 709 63 (set (reg:SI 0 ax [orig:275 D.6214 ] [275])
        (mem/s/j:SI (reg/f:SI 0 ax [444]) [0 move_18(D)->src_point+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 709 708 710 63 (parallel [
            (set (reg:SI 1 dx [orig:276 D.6215 ] [276])
                (plus:SI (reg:SI 0 ax [orig:275 D.6214 ] [275])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:644 252 {*addsi_1}
     (nil))

(insn 710 709 711 63 (set (reg/f:SI 0 ax [445])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 711 710 712 63 (set (reg:SI 1 dx [orig:277 D.6216 ] [277])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:276 D.6215 ] [276])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [445])) [0 gameState_27(D)->zones[D.6215_274].player+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 712 711 713 63 (set (reg/f:SI 0 ax [446])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:644 64 {*movsi_internal}
     (nil))

(insn 713 712 714 63 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 2 cx [orig:274 D.6213 ] [274])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [446])) [0 gameState_27(D)->zones[D.6213_272].player+0 S4 A32])
        (reg:SI 1 dx [orig:277 D.6216 ] [277])) src/gui.c:644 64 {*movsi_internal}
     (nil))
;; End of basic block 63 -> ( 64)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  64 (fallthru)

;; Start of basic block ( 61 63 62) -> 64
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 447 448 449

;; Pred edge  61 [100.0%] 
;; Pred edge  63 (fallthru)
;; Pred edge  62
(code_label 714 713 715 64 112 "" [2 uses])

(note 715 714 716 64 [bb 64] NOTE_INSN_BASIC_BLOCK)

(insn 716 715 717 64 (set (reg/f:SI 0 ax [447])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(insn 717 716 718 64 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [447])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(insn 718 717 719 64 (set (reg/f:SI 0 ax [448])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(insn 719 718 720 64 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [448])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(insn 720 719 721 64 (set (reg/f:SI 0 ax [449])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(insn 721 720 722 64 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [449])) src/gui.c:646 64 {*movsi_internal}
     (nil))

(call_insn 722 721 824 64 (call (mem:QI (symbol_ref:SI ("Display_RefreshGameBoard") [flags 0x3]  <function_decl 0x4081a780 Display_RefreshGameBoard>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:646 618 {*call_0}
     (nil)
    (nil))
;; End of basic block 64 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 824 722 0 NOTE_INSN_DELETED)


;; Function Quit_Zone (Quit_Zone)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r60: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r60,l0) best AREG, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r60,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11

   Insn 32(l0): point = 0
   Insn 29(l0): point = 2
   Insn 25(l0): point = 4
   Insn 22(l0): point = 7
   Insn 35(l0): point = 10
   Insn 17(l0): point = 12
   Insn 15(l0): point = 15
   Insn 14(l0): point = 17
   Insn 12(l0): point = 20
   Insn 11(l0): point = 22
   Insn 9(l0): point = 25
   Insn 8(l0): point = 27
   Insn 6(l0): point = 30
   Insn 5(l0): point = 32
 a0(r60): [3..4]
 a1(r59): [10..12] [5..7]
Compressing live ranges: from 35 to 6 - 17%
Ranges after the compression:
 a0(r60): [0..1]
 a1(r59): [4..5] [2..3]
  regions=1, blocks=9, points=6
    allocnos=2 (big 0), copies=0, conflicts=0, ranges=3
Disposition:
    1:r59  l0     0    0:r60  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=11, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 59
insn=35, live_throughout: 7, 59, dead_or_set: 
insn=20, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 59
insn=23, live_throughout: 7, 59, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 59, 60
insn=29, live_throughout: 7, dead_or_set: 0, 60
insn=32, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 22
changing reg in insn 17
changing reg in insn 25
changing reg in insn 25
changing reg in insn 29
deleting insn with uid = 25.
deleting insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns


Quit_Zone

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 6[bp] 17[flags]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d} r6={1d,12u} r7={1d,8u} r17={4d,4u} r20={1d,1u} 
;;    total ref usage 39{12d,27u,0e} in 12{12 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 634 [0x27a]))) src/gui.c:653 6 {*cmpsi_1}
     (nil))

(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) src/gui.c:653 591 {*jcc_1}
     (nil)
 -> 20)
;; End of basic block 2 -> ( 3 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  7

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  2 (fallthru)
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 795 [0x31b]))) src/gui.c:653 6 {*cmpsi_1}
     (nil))

(jump_insn 9 8 10 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) src/gui.c:653 591 {*jcc_1}
     (nil)
 -> 20)
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  7

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3 (fallthru)
(note 10 9 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 243 [0xf3]))) src/gui.c:653 6 {*cmpsi_1}
     (nil))

(jump_insn 12 11 13 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) src/gui.c:653 591 {*jcc_1}
     (nil)
 -> 20)
;; End of basic block 4 -> ( 5 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  7

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  4 (fallthru)
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 325 [0x145]))) src/gui.c:653 6 {*cmpsi_1}
     (nil))

(jump_insn 15 14 16 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) src/gui.c:653 591 {*jcc_1}
     (nil)
 -> 20)
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  5 (fallthru)
(note 16 15 17 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 35 6 (set (reg:SI 0 ax [orig:59 D.5928 ] [59])
        (const_int 1 [0x1])) src/gui.c:655 64 {*movsi_internal}
     (nil))

(jump_insn 35 17 36 6 (set (pc)
        (label_ref 23)) src/gui.c:655 606 {jump}
     (nil)
 -> 23)
;; End of basic block 6 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  8 [100.0%] 

(barrier 36 35 20)

;; Start of basic block ( 2 3 4 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  2
;; Pred edge  3
;; Pred edge  4
;; Pred edge  5
(code_label 20 36 21 7 122 "" [4 uses])

(note 21 20 22 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 7 (set (reg:SI 0 ax [orig:59 D.5928 ] [59])
        (const_int 0 [0])) src/gui.c:657 64 {*movsi_internal}
     (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  8 (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 60

;; Pred edge  7 (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 23 22 24 8 123 "" [1 uses])

(note 24 23 32 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 32 24 37 8 (use (reg/i:SI 0 ax)) src/gui.c:658 -1
     (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 37 32 0 NOTE_INSN_DELETED)


;; Function CheckerWithScreenPosition (CheckerWithScreenPosition)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 42 n_edges 61 count 42 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r68,l0) best AREG, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r68,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:23
  a2(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a5(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a6(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a7(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a8(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a9(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a12(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a13(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a14(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a15(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a16(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a21(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a22(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a23(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a26(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a28(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a29(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10

   Insn 194(l0): point = 0
   Insn 191(l0): point = 2
   Insn 187(l0): point = 4
   Insn 184(l0): point = 7
   Insn 230(l0): point = 10
   Insn 226(l0): point = 13
   Insn 181(l0): point = 16
   Insn 180(l0): point = 18
   Insn 176(l0): point = 21
   Insn 175(l0): point = 23
   Insn 223(l0): point = 26
   Insn 170(l0): point = 28
   Insn 169(l0): point = 30
   Insn 168(l0): point = 32
   Insn 167(l0): point = 34
   Insn 165(l0): point = 37
   Insn 164(l0): point = 39
   Insn 163(l0): point = 41
   Insn 162(l0): point = 43
   Insn 161(l0): point = 45
   Insn 160(l0): point = 47
   Insn 159(l0): point = 49
   Insn 158(l0): point = 51
   Insn 157(l0): point = 53
   Insn 156(l0): point = 55
   Insn 221(l0): point = 58
   Insn 152(l0): point = 60
   Insn 151(l0): point = 62
   Insn 149(l0): point = 65
   Insn 148(l0): point = 67
   Insn 146(l0): point = 70
   Insn 145(l0): point = 72
   Insn 219(l0): point = 75
   Insn 139(l0): point = 78
   Insn 138(l0): point = 80
   Insn 134(l0): point = 83
   Insn 133(l0): point = 85
   Insn 216(l0): point = 88
   Insn 128(l0): point = 90
   Insn 127(l0): point = 92
   Insn 126(l0): point = 94
   Insn 125(l0): point = 96
   Insn 123(l0): point = 99
   Insn 122(l0): point = 101
   Insn 121(l0): point = 103
   Insn 120(l0): point = 105
   Insn 119(l0): point = 107
   Insn 118(l0): point = 109
   Insn 117(l0): point = 111
   Insn 116(l0): point = 113
   Insn 115(l0): point = 115
   Insn 114(l0): point = 117
   Insn 214(l0): point = 120
   Insn 110(l0): point = 122
   Insn 109(l0): point = 124
   Insn 107(l0): point = 127
   Insn 106(l0): point = 129
   Insn 104(l0): point = 132
   Insn 103(l0): point = 134
   Insn 101(l0): point = 137
   Insn 100(l0): point = 139
   Insn 98(l0): point = 142
   Insn 97(l0): point = 144
   Insn 212(l0): point = 147
   Insn 210(l0): point = 150
   Insn 90(l0): point = 153
   Insn 89(l0): point = 155
   Insn 85(l0): point = 158
   Insn 84(l0): point = 160
   Insn 207(l0): point = 163
   Insn 79(l0): point = 165
   Insn 78(l0): point = 167
   Insn 77(l0): point = 169
   Insn 76(l0): point = 171
   Insn 74(l0): point = 174
   Insn 73(l0): point = 176
   Insn 72(l0): point = 178
   Insn 71(l0): point = 180
   Insn 70(l0): point = 182
   Insn 69(l0): point = 184
   Insn 68(l0): point = 186
   Insn 67(l0): point = 188
   Insn 66(l0): point = 190
   Insn 65(l0): point = 192
   Insn 205(l0): point = 195
   Insn 61(l0): point = 197
   Insn 60(l0): point = 199
   Insn 58(l0): point = 202
   Insn 57(l0): point = 204
   Insn 55(l0): point = 207
   Insn 54(l0): point = 209
   Insn 203(l0): point = 212
   Insn 48(l0): point = 215
   Insn 47(l0): point = 217
   Insn 43(l0): point = 220
   Insn 42(l0): point = 222
   Insn 199(l0): point = 225
   Insn 37(l0): point = 227
   Insn 36(l0): point = 229
   Insn 35(l0): point = 231
   Insn 34(l0): point = 233
   Insn 32(l0): point = 236
   Insn 31(l0): point = 238
   Insn 30(l0): point = 240
   Insn 29(l0): point = 242
   Insn 28(l0): point = 244
   Insn 27(l0): point = 246
   Insn 26(l0): point = 248
   Insn 25(l0): point = 250
   Insn 24(l0): point = 252
   Insn 23(l0): point = 254
   Insn 197(l0): point = 257
   Insn 19(l0): point = 259
   Insn 18(l0): point = 261
   Insn 16(l0): point = 264
   Insn 15(l0): point = 266
   Insn 13(l0): point = 269
   Insn 12(l0): point = 271
   Insn 10(l0): point = 274
   Insn 9(l0): point = 276
   Insn 7(l0): point = 279
   Insn 6(l0): point = 281
   Insn 5(l0): point = 283
 a0(r68): [3..4]
 a1(r59): [225..227] [163..165] [88..90] [26..28] [5..7]
 a2(r87): [31..34]
 a3(r88): [31..32]
 a4(r67): [40..41]
 a5(r66): [42..43]
 a6(r85): [48..53] [44..45]
 a7(r86): [46..47]
 a8(r84): [50..55]
 a9(r82): [93..96]
 a10(r83): [93..94]
 a11(r65): [102..103]
 a12(r64): [104..105]
 a13(r80): [110..115] [106..107]
 a14(r81): [108..109]
 a15(r79): [112..117]
 a16(r77): [168..171]
 a17(r78): [168..169]
 a18(r63): [177..178]
 a19(r62): [179..180]
 a20(r75): [185..190] [181..182]
 a21(r76): [183..184]
 a22(r74): [187..192]
 a23(r72): [230..233]
 a24(r73): [230..231]
 a25(r61): [239..240]
 a26(r60): [241..242]
 a27(r70): [247..252] [243..244]
 a28(r71): [245..246]
 a29(r69): [249..254]
Compressing live ranges: from 286 to 60 - 20%
Ranges after the compression:
 a0(r68): [0..1]
 a1(r59): [46..47] [32..33] [18..19] [4..5] [2..3]
 a2(r87): [6..7]
 a3(r88): [6..7]
 a4(r67): [8..9]
 a5(r66): [10..11]
 a6(r85): [16..17] [12..13]
 a7(r86): [14..15]
 a8(r84): [16..17]
 a9(r82): [20..21]
 a10(r83): [20..21]
 a11(r65): [22..23]
 a12(r64): [24..25]
 a13(r80): [30..31] [26..27]
 a14(r81): [28..29]
 a15(r79): [30..31]
 a16(r77): [34..35]
 a17(r78): [34..35]
 a18(r63): [36..37]
 a19(r62): [38..39]
 a20(r75): [44..45] [40..41]
 a21(r76): [42..43]
 a22(r74): [44..45]
 a23(r72): [48..49]
 a24(r73): [48..49]
 a25(r61): [50..51]
 a26(r60): [52..53]
 a27(r70): [58..59] [54..55]
 a28(r71): [56..57]
 a29(r69): [58..59]
  regions=5, blocks=42, points=60
    allocnos=30 (big 0), copies=0, conflicts=0, ranges=38
Disposition:
    1:r59  l0     0   26:r60  l0     0   25:r61  l0     0   19:r62  l0     0
   18:r63  l0     0   12:r64  l0     0   11:r65  l0     0    5:r66  l0     0
    4:r67  l0     0    0:r68  l0     0   29:r69  l0     1   27:r70  l0     0
   28:r71  l0     0   23:r72  l0     0   24:r73  l0     1   22:r74  l0     1
   20:r75  l0     0   21:r76  l0     0   16:r77  l0     0   17:r78  l0     1
   15:r79  l0     1   13:r80  l0     0   14:r81  l0     0    9:r82  l0     0
   10:r83  l0     1    8:r84  l0     1    6:r85  l0     0    7:r86  l0     0
    2:r87  l0     0    3:r88  l0     1
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 
insn=10, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 
insn=19, live_throughout: 7, dead_or_set: 
insn=197, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 69
insn=24, live_throughout: 7, 69, dead_or_set: 70
insn=25, live_throughout: 7, 69, dead_or_set: 70
insn=26, live_throughout: 7, dead_or_set: 69, 70
insn=27, live_throughout: 7, dead_or_set: 70, 71
insn=28, live_throughout: 7, dead_or_set: 70, 71
insn=29, live_throughout: 7, dead_or_set: 60, 70
insn=30, live_throughout: 7, dead_or_set: 60, 61
insn=31, live_throughout: 7, dead_or_set: 61
insn=32, live_throughout: 7, dead_or_set: 
insn=34, live_throughout: 7, dead_or_set: 72
insn=35, live_throughout: 7, 72, dead_or_set: 73
insn=36, live_throughout: 7, dead_or_set: 72, 73
insn=37, live_throughout: 7, dead_or_set: 59
insn=199, live_throughout: 7, 59, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 
insn=42, live_throughout: 7, dead_or_set: 
insn=43, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 
insn=203, live_throughout: 7, dead_or_set: 
insn=52, live_throughout: 7, dead_or_set: 
insn=54, live_throughout: 7, dead_or_set: 
insn=55, live_throughout: 7, dead_or_set: 
insn=57, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 
insn=60, live_throughout: 7, dead_or_set: 
insn=61, live_throughout: 7, dead_or_set: 
insn=205, live_throughout: 7, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 
insn=65, live_throughout: 7, dead_or_set: 74
insn=66, live_throughout: 7, 74, dead_or_set: 75
insn=67, live_throughout: 7, 74, dead_or_set: 75
insn=68, live_throughout: 7, dead_or_set: 74, 75
insn=69, live_throughout: 7, dead_or_set: 75, 76
insn=70, live_throughout: 7, dead_or_set: 75, 76
insn=71, live_throughout: 7, dead_or_set: 62, 75
insn=72, live_throughout: 7, dead_or_set: 62, 63
insn=73, live_throughout: 7, dead_or_set: 63
insn=74, live_throughout: 7, dead_or_set: 
insn=76, live_throughout: 7, dead_or_set: 77
insn=77, live_throughout: 7, 77, dead_or_set: 78
insn=78, live_throughout: 7, dead_or_set: 77, 78
insn=79, live_throughout: 7, dead_or_set: 59
insn=207, live_throughout: 7, 59, dead_or_set: 
insn=82, live_throughout: 7, dead_or_set: 
insn=84, live_throughout: 7, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 
insn=86, live_throughout: 7, dead_or_set: 
insn=89, live_throughout: 7, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 
insn=210, live_throughout: 7, dead_or_set: 
insn=202, live_throughout: 7, dead_or_set: 
insn=212, live_throughout: 7, dead_or_set: 
insn=95, live_throughout: 7, dead_or_set: 
insn=97, live_throughout: 7, dead_or_set: 
insn=98, live_throughout: 7, dead_or_set: 
insn=100, live_throughout: 7, dead_or_set: 
insn=101, live_throughout: 7, dead_or_set: 
insn=103, live_throughout: 7, dead_or_set: 
insn=104, live_throughout: 7, dead_or_set: 
insn=106, live_throughout: 7, dead_or_set: 
insn=107, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 
insn=110, live_throughout: 7, dead_or_set: 
insn=214, live_throughout: 7, dead_or_set: 
insn=137, live_throughout: 7, dead_or_set: 
insn=114, live_throughout: 7, dead_or_set: 79
insn=115, live_throughout: 7, 79, dead_or_set: 80
insn=116, live_throughout: 7, 79, dead_or_set: 80
insn=117, live_throughout: 7, dead_or_set: 79, 80
insn=118, live_throughout: 7, dead_or_set: 80, 81
insn=119, live_throughout: 7, dead_or_set: 80, 81
insn=120, live_throughout: 7, dead_or_set: 64, 80
insn=121, live_throughout: 7, dead_or_set: 64, 65
insn=122, live_throughout: 7, dead_or_set: 65
insn=123, live_throughout: 7, dead_or_set: 
insn=125, live_throughout: 7, dead_or_set: 82
insn=126, live_throughout: 7, 82, dead_or_set: 83
insn=127, live_throughout: 7, dead_or_set: 82, 83
insn=128, live_throughout: 7, dead_or_set: 59
insn=216, live_throughout: 7, 59, dead_or_set: 
insn=131, live_throughout: 7, dead_or_set: 
insn=133, live_throughout: 7, dead_or_set: 
insn=134, live_throughout: 7, dead_or_set: 
insn=135, live_throughout: 7, dead_or_set: 
insn=138, live_throughout: 7, dead_or_set: 
insn=139, live_throughout: 7, dead_or_set: 
insn=219, live_throughout: 7, dead_or_set: 
insn=143, live_throughout: 7, dead_or_set: 
insn=145, live_throughout: 7, dead_or_set: 
insn=146, live_throughout: 7, dead_or_set: 
insn=148, live_throughout: 7, dead_or_set: 
insn=149, live_throughout: 7, dead_or_set: 
insn=151, live_throughout: 7, dead_or_set: 
insn=152, live_throughout: 7, dead_or_set: 
insn=221, live_throughout: 7, dead_or_set: 
insn=179, live_throughout: 7, dead_or_set: 
insn=156, live_throughout: 7, dead_or_set: 84
insn=157, live_throughout: 7, 84, dead_or_set: 85
insn=158, live_throughout: 7, 84, dead_or_set: 85
insn=159, live_throughout: 7, dead_or_set: 84, 85
insn=160, live_throughout: 7, dead_or_set: 85, 86
insn=161, live_throughout: 7, dead_or_set: 85, 86
insn=162, live_throughout: 7, dead_or_set: 66, 85
insn=163, live_throughout: 7, dead_or_set: 66, 67
insn=164, live_throughout: 7, dead_or_set: 67
insn=165, live_throughout: 7, dead_or_set: 
insn=167, live_throughout: 7, dead_or_set: 87
insn=168, live_throughout: 7, 87, dead_or_set: 88
insn=169, live_throughout: 7, dead_or_set: 87, 88
insn=170, live_throughout: 7, dead_or_set: 59
insn=223, live_throughout: 7, 59, dead_or_set: 
insn=173, live_throughout: 7, dead_or_set: 
insn=175, live_throughout: 7, dead_or_set: 
insn=176, live_throughout: 7, dead_or_set: 
insn=177, live_throughout: 7, dead_or_set: 
insn=180, live_throughout: 7, dead_or_set: 
insn=181, live_throughout: 7, dead_or_set: 
insn=226, live_throughout: 7, dead_or_set: 
insn=229, live_throughout: 7, dead_or_set: 
insn=230, live_throughout: 7, dead_or_set: 
insn=182, live_throughout: 7, dead_or_set: 
insn=184, live_throughout: 7, dead_or_set: 59
insn=185, live_throughout: 7, 59, dead_or_set: 
insn=187, live_throughout: 7, dead_or_set: 59, 68
insn=191, live_throughout: 7, dead_or_set: 0, 68
insn=194, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 184
changing reg in insn 170
changing reg in insn 128
changing reg in insn 79
changing reg in insn 37
changing reg in insn 187
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 187
changing reg in insn 191
changing reg in insn 23
changing reg in insn 26
changing reg in insn 24
changing reg in insn 28
changing reg in insn 26
changing reg in insn 28
changing reg in insn 26
changing reg in insn 25
changing reg in insn 24
changing reg in insn 29
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 34
changing reg in insn 36
changing reg in insn 35
changing reg in insn 36
changing reg in insn 65
changing reg in insn 68
changing reg in insn 66
changing reg in insn 70
changing reg in insn 68
changing reg in insn 70
changing reg in insn 68
changing reg in insn 67
changing reg in insn 66
changing reg in insn 71
changing reg in insn 69
changing reg in insn 68
changing reg in insn 67
changing reg in insn 69
changing reg in insn 70
changing reg in insn 76
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 114
changing reg in insn 117
changing reg in insn 115
changing reg in insn 119
changing reg in insn 117
changing reg in insn 119
changing reg in insn 117
changing reg in insn 116
changing reg in insn 115
changing reg in insn 120
changing reg in insn 118
changing reg in insn 117
changing reg in insn 116
changing reg in insn 118
changing reg in insn 119
changing reg in insn 125
changing reg in insn 127
changing reg in insn 126
changing reg in insn 127
changing reg in insn 156
changing reg in insn 159
changing reg in insn 157
changing reg in insn 161
changing reg in insn 159
changing reg in insn 161
changing reg in insn 159
changing reg in insn 158
changing reg in insn 157
changing reg in insn 162
changing reg in insn 160
changing reg in insn 159
changing reg in insn 158
changing reg in insn 160
changing reg in insn 161
changing reg in insn 167
changing reg in insn 169
changing reg in insn 168
changing reg in insn 169
deleting insn with uid = 28.
deleting insn with uid = 29.
deleting insn with uid = 70.
deleting insn with uid = 71.
deleting insn with uid = 119.
deleting insn with uid = 120.
deleting insn with uid = 161.
deleting insn with uid = 162.
deleting insn with uid = 187.
deleting insn with uid = 191.
starting the processing of deferred insns
ending the processing of deferred insns


CheckerWithScreenPosition

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={30d,26u} r1={9d,12u,4e} r2={1d} r6={1d,98u} r7={1d,41u} r17={44d,20u} r20={1d,1u} 
;;    total ref usage 289{87d,198u,4e} in 113{113 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:662 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 322 [0x142]))) src/gui.c:664 6 {*cmpsi_1}
     (nil))

(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) src/gui.c:664 591 {*jcc_1}
     (nil)
 -> 95)
;; End of basic block 2 -> ( 3 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  21

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  2 (fallthru)
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 554 [0x22a]))) src/gui.c:664 6 {*cmpsi_1}
     (nil))

(jump_insn 10 9 11 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 95)
            (pc))) src/gui.c:664 591 {*jcc_1}
     (nil)
 -> 95)
;; End of basic block 3 -> ( 4 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  21

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3 (fallthru)
(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 422 [0x1a6]))) src/gui.c:667 6 {*cmpsi_1}
     (nil))

(jump_insn 13 12 14 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) src/gui.c:667 591 {*jcc_1}
     (nil)
 -> 52)
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  12

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  4 (fallthru)
(note 14 13 15 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 590 [0x24e]))) src/gui.c:667 6 {*cmpsi_1}
     (nil))

(jump_insn 16 15 17 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) src/gui.c:667 591 {*jcc_1}
     (nil)
 -> 52)
;; End of basic block 5 -> ( 6 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  12

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5 (fallthru)
(note 17 16 18 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 6 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 tmpPos+0 S4 A32])
        (const_int 5 [0x5])) src/gui.c:670 64 {*movsi_internal}
     (nil))

(insn 19 18 197 6 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:671 64 {*movsi_internal}
     (nil))

(jump_insn 197 19 198 6 (set (pc)
        (label_ref 44)) src/gui.c:671 606 {jump}
     (nil)
 -> 44)
;; End of basic block 6 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 [100.0%] 

(barrier 198 197 46)

;; Start of basic block ( 10) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 69 70 71

;; Pred edge  10
(code_label 46 198 22 7 130 "" [1 uses])

(note 22 46 23 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 7 (set (reg:SI 1 dx [69])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:674 64 {*movsi_internal}
     (nil))

(insn 24 23 25 7 (set (reg:SI 0 ax [70])
        (reg:SI 1 dx [69])) src/gui.c:674 64 {*movsi_internal}
     (nil))

(insn 25 24 26 7 (parallel [
            (set (reg:SI 0 ax [70])
                (ashift:SI (reg:SI 0 ax [70])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:674 497 {*ashlsi3_1}
     (nil))

(insn 26 25 27 7 (parallel [
            (set (reg:SI 0 ax [70])
                (plus:SI (reg:SI 0 ax [70])
                    (reg:SI 1 dx [69])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:674 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [69])
            (const_int 5 [0x5]))
        (nil)))

(insn 27 26 30 7 (parallel [
            (set (reg:SI 0 ax [71])
                (ashift:SI (reg:SI 0 ax [70])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:674 497 {*ashlsi3_1}
     (nil))

(insn 30 27 31 7 (parallel [
            (set (reg:SI 0 ax [orig:61 D.5887 ] [61])
                (plus:SI (reg:SI 0 ax [orig:60 D.5886 ] [60])
                    (const_int 323 [0x143])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:674 252 {*addsi_1}
     (nil))

(insn 31 30 32 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:61 D.5887 ] [61])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32]))) src/gui.c:674 6 {*cmpsi_1}
     (nil))

(jump_insn 32 31 33 7 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 40)
            (pc))) src/gui.c:674 591 {*jcc_1}
     (nil)
 -> 40)
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  9

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 72 73

;; Pred edge  7 (fallthru)
(note 33 32 34 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 34 33 35 8 (set (reg/f:SI 0 ax [72])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:676 64 {*movsi_internal}
     (nil))

(insn 35 34 36 8 (set (reg:SI 1 dx [73])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 tmpPos+0 S4 A32])) src/gui.c:676 64 {*movsi_internal}
     (nil))

(insn 36 35 37 8 (set (mem:SI (reg/f:SI 0 ax [72]) [0 *pos_17(D)+0 S4 A32])
        (reg:SI 1 dx [73])) src/gui.c:676 64 {*movsi_internal}
     (nil))

(insn 37 36 199 8 (set (reg:SI 0 ax [orig:59 D.5890 ] [59])
        (const_int 1 [0x1])) src/gui.c:677 64 {*movsi_internal}
     (nil))

(jump_insn 199 37 200 8 (set (pc)
        (label_ref 185)) src/gui.c:677 606 {jump}
     (nil)
 -> 185)
;; End of basic block 8 -> ( 39)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  39 [100.0%] 

(barrier 200 199 40)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  7
(code_label 40 200 41 9 128 "" [1 uses])

(note 41 40 42 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 42 41 43 9 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 tmpPos+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 tmpPos+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:679 252 {*addsi_1}
     (nil))

(insn 43 42 44 9 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:671 252 {*addsi_1}
     (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)

;; Start of basic block ( 9 6) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  9 (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 44 43 45 10 127 "" [1 uses])

(note 45 44 47 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 47 45 48 10 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:671 6 {*cmpsi_1}
     (nil))

(jump_insn 48 47 201 10 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) src/gui.c:671 591 {*jcc_1}
     (nil)
 -> 46)
;; End of basic block 10 -> ( 7 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7
;; Succ edge  11 (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  10 (fallthru)
(note 201 48 203 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 203 201 204 11 (set (pc)
        (label_ref 202)) src/gui.c:668 606 {jump}
     (nil)
 -> 202)
;; End of basic block 11 -> ( 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20 [100.0%] 

(barrier 204 203 52)

;; Start of basic block ( 4 5) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  4
;; Pred edge  5
(code_label 52 204 53 12 126 "" [2 uses])

(note 53 52 54 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 55 12 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 141 [0x8d]))) src/gui.c:682 6 {*cmpsi_1}
     (nil))

(jump_insn 55 54 56 12 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 229)
            (pc))) src/gui.c:682 591 {*jcc_1}
     (nil)
 -> 229)
;; End of basic block 12 -> ( 13 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)
;; Succ edge  41

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  12 (fallthru)
(note 56 55 57 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 13 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 303 [0x12f]))) src/gui.c:682 6 {*cmpsi_1}
     (nil))

(jump_insn 58 57 59 13 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 229)
            (pc))) src/gui.c:682 591 {*jcc_1}
     (nil)
 -> 229)
;; End of basic block 13 -> ( 14 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  41

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  13 (fallthru)
(note 59 58 60 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 60 59 61 14 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 tmpPos+0 S4 A32])
        (const_int 18 [0x12])) src/gui.c:685 64 {*movsi_internal}
     (nil))

(insn 61 60 205 14 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:686 64 {*movsi_internal}
     (nil))

(jump_insn 205 61 206 14 (set (pc)
        (label_ref 86)) src/gui.c:686 606 {jump}
     (nil)
 -> 86)
;; End of basic block 14 -> ( 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 [100.0%] 

(barrier 206 205 88)

;; Start of basic block ( 18) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 63 74 75 76

;; Pred edge  18
(code_label 88 206 64 15 134 "" [1 uses])

(note 64 88 65 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 66 15 (set (reg:SI 1 dx [74])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:688 64 {*movsi_internal}
     (nil))

(insn 66 65 67 15 (set (reg:SI 0 ax [75])
        (reg:SI 1 dx [74])) src/gui.c:688 64 {*movsi_internal}
     (nil))

(insn 67 66 68 15 (parallel [
            (set (reg:SI 0 ax [75])
                (ashift:SI (reg:SI 0 ax [75])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:688 497 {*ashlsi3_1}
     (nil))

(insn 68 67 69 15 (parallel [
            (set (reg:SI 0 ax [75])
                (plus:SI (reg:SI 0 ax [75])
                    (reg:SI 1 dx [74])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:688 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [74])
            (const_int 5 [0x5]))
        (nil)))

(insn 69 68 72 15 (parallel [
            (set (reg:SI 0 ax [76])
                (ashift:SI (reg:SI 0 ax [75])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:688 497 {*ashlsi3_1}
     (nil))

(insn 72 69 73 15 (parallel [
            (set (reg:SI 0 ax [orig:63 D.5896 ] [63])
                (plus:SI (reg:SI 0 ax [orig:62 D.5895 ] [62])
                    (const_int 323 [0x143])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:688 252 {*addsi_1}
     (nil))

(insn 73 72 74 15 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:63 D.5896 ] [63])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32]))) src/gui.c:688 6 {*cmpsi_1}
     (nil))

(jump_insn 74 73 75 15 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 82)
            (pc))) src/gui.c:688 591 {*jcc_1}
     (nil)
 -> 82)
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  17

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 77 78

;; Pred edge  15 (fallthru)
(note 75 74 76 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 77 16 (set (reg/f:SI 0 ax [77])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:690 64 {*movsi_internal}
     (nil))

(insn 77 76 78 16 (set (reg:SI 1 dx [78])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 tmpPos+0 S4 A32])) src/gui.c:690 64 {*movsi_internal}
     (nil))

(insn 78 77 79 16 (set (mem:SI (reg/f:SI 0 ax [77]) [0 *pos_17(D)+0 S4 A32])
        (reg:SI 1 dx [78])) src/gui.c:690 64 {*movsi_internal}
     (nil))

(insn 79 78 207 16 (set (reg:SI 0 ax [orig:59 D.5890 ] [59])
        (const_int 1 [0x1])) src/gui.c:691 64 {*movsi_internal}
     (nil))

(jump_insn 207 79 208 16 (set (pc)
        (label_ref 185)) src/gui.c:691 606 {jump}
     (nil)
 -> 185)
;; End of basic block 16 -> ( 39)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  39 [100.0%] 

(barrier 208 207 82)

;; Start of basic block ( 15) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  15
(code_label 82 208 83 17 133 "" [1 uses])

(note 83 82 84 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 84 83 85 17 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 tmpPos+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 tmpPos+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:693 252 {*addsi_1}
     (nil))

(insn 85 84 86 17 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:686 252 {*addsi_1}
     (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)

;; Start of basic block ( 17 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  17 (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 86 85 87 18 132 "" [1 uses])

(note 87 86 89 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 89 87 90 18 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:686 6 {*cmpsi_1}
     (nil))

(jump_insn 90 89 209 18 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 88)
            (pc))) src/gui.c:686 591 {*jcc_1}
     (nil)
 -> 88)
;; End of basic block 18 -> ( 15 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15
;; Succ edge  19 (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  18 (fallthru)
(note 209 90 210 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(jump_insn 210 209 211 19 (set (pc)
        (label_ref:SI 229)) src/gui.c:667 606 {jump}
     (nil)
 -> 229)
;; End of basic block 19 -> ( 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  41 [100.0%] 

(barrier 211 210 202)

;; Start of basic block ( 11) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  11 [100.0%] 
(code_label 202 211 92 20 143 "" [1 uses])

(note 92 202 212 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(jump_insn 212 92 213 20 (set (pc)
        (label_ref:SI 229)) src/gui.c:667 606 {jump}
     (nil)
 -> 229)
;; End of basic block 20 -> ( 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  41 [100.0%] 

(barrier 213 212 95)

;; Start of basic block ( 2 3) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  2
;; Pred edge  3
(code_label 95 213 96 21 125 "" [2 uses])

(note 96 95 97 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 97 96 98 21 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 58 [0x3a]))) src/gui.c:698 6 {*cmpsi_1}
     (nil))

(jump_insn 98 97 99 21 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) src/gui.c:698 591 {*jcc_1}
     (nil)
 -> 182)
;; End of basic block 21 -> ( 22 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)
;; Succ edge  38

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  21 (fallthru)
(note 99 98 100 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 101 22 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32])
            (const_int 289 [0x121]))) src/gui.c:698 6 {*cmpsi_1}
     (nil))

(jump_insn 101 100 102 22 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) src/gui.c:698 591 {*jcc_1}
     (nil)
 -> 182)
;; End of basic block 22 -> ( 23 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 (fallthru)
;; Succ edge  38

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  22 (fallthru)
(note 102 101 103 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 103 102 104 23 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 422 [0x1a6]))) src/gui.c:700 6 {*cmpsi_1}
     (nil))

(jump_insn 104 103 105 23 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) src/gui.c:700 591 {*jcc_1}
     (nil)
 -> 143)
;; End of basic block 23 -> ( 24 31)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)
;; Succ edge  31

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  23 (fallthru)
(note 105 104 106 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 106 105 107 24 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 590 [0x24e]))) src/gui.c:700 6 {*cmpsi_1}
     (nil))

(jump_insn 107 106 108 24 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 143)
            (pc))) src/gui.c:700 591 {*jcc_1}
     (nil)
 -> 143)
;; End of basic block 24 -> ( 25 31)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  25 (fallthru)
;; Succ edge  31

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  24 (fallthru)
(note 108 107 109 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 25 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 tmpPos+0 S4 A32])
        (const_int 11 [0xb])) src/gui.c:703 64 {*movsi_internal}
     (nil))

(insn 110 109 214 25 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:704 64 {*movsi_internal}
     (nil))

(jump_insn 214 110 215 25 (set (pc)
        (label_ref 135)) src/gui.c:704 606 {jump}
     (nil)
 -> 135)
;; End of basic block 25 -> ( 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  29 [100.0%] 

(barrier 215 214 137)

;; Start of basic block ( 29) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 79 80 81

;; Pred edge  29
(code_label 137 215 113 26 139 "" [1 uses])

(note 113 137 114 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 115 26 (set (reg:SI 1 dx [79])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:706 64 {*movsi_internal}
     (nil))

(insn 115 114 116 26 (set (reg:SI 0 ax [80])
        (reg:SI 1 dx [79])) src/gui.c:706 64 {*movsi_internal}
     (nil))

(insn 116 115 117 26 (parallel [
            (set (reg:SI 0 ax [80])
                (ashift:SI (reg:SI 0 ax [80])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:706 497 {*ashlsi3_1}
     (nil))

(insn 117 116 118 26 (parallel [
            (set (reg:SI 0 ax [80])
                (plus:SI (reg:SI 0 ax [80])
                    (reg:SI 1 dx [79])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:706 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [79])
            (const_int 5 [0x5]))
        (nil)))

(insn 118 117 121 26 (parallel [
            (set (reg:SI 0 ax [81])
                (ashift:SI (reg:SI 0 ax [80])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:706 497 {*ashlsi3_1}
     (nil))

(insn 121 118 122 26 (parallel [
            (set (reg:SI 0 ax [orig:65 D.5908 ] [65])
                (plus:SI (reg:SI 0 ax [orig:64 D.5907 ] [64])
                    (const_int 59 [0x3b])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:706 252 {*addsi_1}
     (nil))

(insn 122 121 123 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:65 D.5908 ] [65])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32]))) src/gui.c:706 6 {*cmpsi_1}
     (nil))

(jump_insn 123 122 124 26 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) src/gui.c:706 591 {*jcc_1}
     (nil)
 -> 131)
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27 (fallthru)
;; Succ edge  28

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 82 83

;; Pred edge  26 (fallthru)
(note 124 123 125 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 126 27 (set (reg/f:SI 0 ax [82])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:708 64 {*movsi_internal}
     (nil))

(insn 126 125 127 27 (set (reg:SI 1 dx [83])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 tmpPos+0 S4 A32])) src/gui.c:708 64 {*movsi_internal}
     (nil))

(insn 127 126 128 27 (set (mem:SI (reg/f:SI 0 ax [82]) [0 *pos_17(D)+0 S4 A32])
        (reg:SI 1 dx [83])) src/gui.c:708 64 {*movsi_internal}
     (nil))

(insn 128 127 216 27 (set (reg:SI 0 ax [orig:59 D.5890 ] [59])
        (const_int 1 [0x1])) src/gui.c:709 64 {*movsi_internal}
     (nil))

(jump_insn 216 128 217 27 (set (pc)
        (label_ref 185)) src/gui.c:709 606 {jump}
     (nil)
 -> 185)
;; End of basic block 27 -> ( 39)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  39 [100.0%] 

(barrier 217 216 131)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  26
(code_label 131 217 132 28 138 "" [1 uses])

(note 132 131 133 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 133 132 134 28 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -8 [0xfffffffffffffff8])) [0 tmpPos+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -8 [0xfffffffffffffff8])) [0 tmpPos+0 S4 A32])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:711 252 {*addsi_1}
     (nil))

(insn 134 133 135 28 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:704 252 {*addsi_1}
     (nil))
;; End of basic block 28 -> ( 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  29 (fallthru)

;; Start of basic block ( 28 25) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  28 (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 135 134 136 29 137 "" [1 uses])

(note 136 135 138 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 138 136 139 29 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:704 6 {*cmpsi_1}
     (nil))

(jump_insn 139 138 218 29 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) src/gui.c:704 591 {*jcc_1}
     (nil)
 -> 137)
;; End of basic block 29 -> ( 26 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26
;; Succ edge  30 (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  29 (fallthru)
(note 218 139 219 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(jump_insn 219 218 220 30 (set (pc)
        (label_ref 182)) src/gui.c:701 606 {jump}
     (nil)
 -> 182)
;; End of basic block 30 -> ( 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  38 [100.0%] 

(barrier 220 219 143)

;; Start of basic block ( 23 24) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  23
;; Pred edge  24
(code_label 143 220 144 31 136 "" [2 uses])

(note 144 143 145 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 145 144 146 31 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 141 [0x8d]))) src/gui.c:714 6 {*cmpsi_1}
     (nil))

(jump_insn 146 145 147 31 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) src/gui.c:714 591 {*jcc_1}
     (nil)
 -> 182)
;; End of basic block 31 -> ( 32 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  32 (fallthru)
;; Succ edge  38

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  31 (fallthru)
(note 147 146 148 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 148 147 149 32 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 y+0 S4 A32])
            (const_int 303 [0x12f]))) src/gui.c:714 6 {*cmpsi_1}
     (nil))

(jump_insn 149 148 150 32 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 182)
            (pc))) src/gui.c:714 591 {*jcc_1}
     (nil)
 -> 182)
;; End of basic block 32 -> ( 33 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 (fallthru)
;; Succ edge  38

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  32 (fallthru)
(note 150 149 151 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 151 150 152 33 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 tmpPos+0 S4 A32])
        (const_int 12 [0xc])) src/gui.c:717 64 {*movsi_internal}
     (nil))

(insn 152 151 221 33 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:718 64 {*movsi_internal}
     (nil))

(jump_insn 221 152 222 33 (set (pc)
        (label_ref 177)) src/gui.c:718 606 {jump}
     (nil)
 -> 177)
;; End of basic block 33 -> ( 37)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  37 [100.0%] 

(barrier 222 221 179)

;; Start of basic block ( 37) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 66 67 84 85 86

;; Pred edge  37
(code_label 179 222 155 34 142 "" [1 uses])

(note 155 179 156 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 156 155 157 34 (set (reg:SI 1 dx [84])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) src/gui.c:720 64 {*movsi_internal}
     (nil))

(insn 157 156 158 34 (set (reg:SI 0 ax [85])
        (reg:SI 1 dx [84])) src/gui.c:720 64 {*movsi_internal}
     (nil))

(insn 158 157 159 34 (parallel [
            (set (reg:SI 0 ax [85])
                (ashift:SI (reg:SI 0 ax [85])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:720 497 {*ashlsi3_1}
     (nil))

(insn 159 158 160 34 (parallel [
            (set (reg:SI 0 ax [85])
                (plus:SI (reg:SI 0 ax [85])
                    (reg:SI 1 dx [84])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:720 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 1 dx [84])
            (const_int 5 [0x5]))
        (nil)))

(insn 160 159 163 34 (parallel [
            (set (reg:SI 0 ax [86])
                (ashift:SI (reg:SI 0 ax [85])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:720 497 {*ashlsi3_1}
     (nil))

(insn 163 160 164 34 (parallel [
            (set (reg:SI 0 ax [orig:67 D.5916 ] [67])
                (plus:SI (reg:SI 0 ax [orig:66 D.5915 ] [66])
                    (const_int 59 [0x3b])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:720 252 {*addsi_1}
     (nil))

(insn 164 163 165 34 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 0 ax [orig:67 D.5916 ] [67])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 8 [0x8])) [0 x+0 S4 A32]))) src/gui.c:720 6 {*cmpsi_1}
     (nil))

(jump_insn 165 164 166 34 (set (pc)
        (if_then_else (lt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 173)
            (pc))) src/gui.c:720 591 {*jcc_1}
     (nil)
 -> 173)
;; End of basic block 34 -> ( 35 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  35 (fallthru)
;; Succ edge  36

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59 87 88

;; Pred edge  34 (fallthru)
(note 166 165 167 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 167 166 168 35 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:722 64 {*movsi_internal}
     (nil))

(insn 168 167 169 35 (set (reg:SI 1 dx [88])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 tmpPos+0 S4 A32])) src/gui.c:722 64 {*movsi_internal}
     (nil))

(insn 169 168 170 35 (set (mem:SI (reg/f:SI 0 ax [87]) [0 *pos_17(D)+0 S4 A32])
        (reg:SI 1 dx [88])) src/gui.c:722 64 {*movsi_internal}
     (nil))

(insn 170 169 223 35 (set (reg:SI 0 ax [orig:59 D.5890 ] [59])
        (const_int 1 [0x1])) src/gui.c:723 64 {*movsi_internal}
     (nil))

(jump_insn 223 170 224 35 (set (pc)
        (label_ref 185)) src/gui.c:723 606 {jump}
     (nil)
 -> 185)
;; End of basic block 35 -> ( 39)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  39 [100.0%] 

(barrier 224 223 173)

;; Start of basic block ( 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  34
(code_label 173 224 174 36 141 "" [1 uses])

(note 174 173 175 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 175 174 176 36 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 tmpPos+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 tmpPos+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:725 252 {*addsi_1}
     (nil))

(insn 176 175 177 36 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:718 252 {*addsi_1}
     (nil))
;; End of basic block 36 -> ( 37)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  37 (fallthru)

;; Start of basic block ( 36 33) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  36 (fallthru)
;; Pred edge  33 [100.0%] 
(code_label 177 176 178 37 140 "" [1 uses])

(note 178 177 180 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 180 178 181 37 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 6 [0x6]))) src/gui.c:718 6 {*cmpsi_1}
     (nil))

(jump_insn 181 180 225 37 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 179)
            (pc))) src/gui.c:718 591 {*jcc_1}
     (nil)
 -> 179)
;; End of basic block 37 -> ( 34 40)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34
;; Succ edge  40 (fallthru)

;; Start of basic block ( 37) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  37 (fallthru)
(note 225 181 226 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(jump_insn 226 225 227 40 (set (pc)
        (label_ref 182)) 606 {jump}
     (nil)
 -> 182)
;; End of basic block 40 -> ( 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  38 [100.0%] 

(barrier 227 226 229)

;; Start of basic block ( 12 19 20 13) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  12
;; Pred edge  19 [100.0%] 
;; Pred edge  20 [100.0%] 
;; Pred edge  13
(code_label 229 227 228 41 144 "" [4 uses])

(note 228 229 230 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 230 228 182 41 (const_int 0 [0]) src/gui.c:667 638 {nop}
     (nil))
;; End of basic block 41 -> ( 38)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 40 21 22 41 31 32 30) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  40 [100.0%] 
;; Pred edge  21
;; Pred edge  22
;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  31
;; Pred edge  32
;; Pred edge  30 [100.0%] 
(code_label 182 230 183 38 135 "" [6 uses])

(note 183 182 184 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 184 183 185 38 (set (reg:SI 0 ax [orig:59 D.5890 ] [59])
        (const_int 0 [0])) src/gui.c:731 64 {*movsi_internal}
     (nil))
;; End of basic block 38 -> ( 39)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  39 (fallthru)

;; Start of basic block ( 38 8 16 27 35) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 68

;; Pred edge  38 (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  16 [100.0%] 
;; Pred edge  27 [100.0%] 
;; Pred edge  35 [100.0%] 
(code_label 185 184 186 39 129 "" [4 uses])

(note 186 185 194 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 194 186 231 39 (use (reg/i:SI 0 ax)) src/gui.c:733 -1
     (nil))
;; End of basic block 39 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 231 194 0 NOTE_INSN_DELETED)


;; Function colorChecker (colorChecker)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 12 count 10 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a7(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a8(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a10(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a11(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a12(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a13(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a14(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a15(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a17(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a18(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a22(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a23(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a24(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:26
  a26(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a27(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a28(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a29(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a30(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a32(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a33(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a34(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a35(r93,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a36(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a38(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a39(r89,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a40(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 86(l0): point = 0
   Insn 85(l0): point = 2
   Insn 84(l0): point = 4
   Insn 83(l0): point = 6
   Insn 82(l0): point = 8
   Insn 81(l0): point = 10
   Insn 80(l0): point = 12
   Insn 79(l0): point = 14
   Insn 78(l0): point = 16
   Insn 77(l0): point = 18
   Insn 74(l0): point = 21
   Insn 73(l0): point = 23
   Insn 72(l0): point = 25
   Insn 71(l0): point = 27
   Insn 70(l0): point = 29
   Insn 69(l0): point = 31
   Insn 68(l0): point = 33
   Insn 67(l0): point = 35
   Insn 66(l0): point = 37
   Insn 65(l0): point = 39
   Insn 64(l0): point = 41
   Insn 63(l0): point = 43
   Insn 62(l0): point = 45
   Insn 61(l0): point = 47
   Insn 93(l0): point = 50
   Insn 56(l0): point = 52
   Insn 55(l0): point = 54
   Insn 54(l0): point = 56
   Insn 53(l0): point = 58
   Insn 52(l0): point = 60
   Insn 50(l0): point = 63
   Insn 49(l0): point = 65
   Insn 48(l0): point = 67
   Insn 91(l0): point = 70
   Insn 43(l0): point = 72
   Insn 42(l0): point = 74
   Insn 41(l0): point = 76
   Insn 40(l0): point = 78
   Insn 39(l0): point = 80
   Insn 38(l0): point = 82
   Insn 37(l0): point = 84
   Insn 36(l0): point = 86
   Insn 35(l0): point = 88
   Insn 34(l0): point = 90
   Insn 33(l0): point = 92
   Insn 32(l0): point = 94
   Insn 31(l0): point = 96
   Insn 30(l0): point = 98
   Insn 89(l0): point = 101
   Insn 25(l0): point = 103
   Insn 24(l0): point = 105
   Insn 23(l0): point = 107
   Insn 22(l0): point = 109
   Insn 21(l0): point = 111
   Insn 19(l0): point = 114
   Insn 18(l0): point = 116
   Insn 17(l0): point = 118
   Insn 15(l0): point = 121
   Insn 14(l0): point = 123
   Insn 13(l0): point = 125
   Insn 12(l0): point = 127
   Insn 11(l0): point = 129
   Insn 10(l0): point = 131
   Insn 9(l0): point = 133
   Insn 8(l0): point = 135
   Insn 7(l0): point = 137
   Insn 6(l0): point = 139
   Insn 5(l0): point = 141
 a0(r86): [3..12]
 a1(r85): [7..16]
 a2(r100): [9..10]
 a3(r99): [13..14]
 a4(r98): [17..18]
 a5(r84): [22..23]
 a6(r83): [24..25]
 a7(r82): [26..27]
 a8(r81): [28..29]
 a9(r78): [28..45]
 a10(r96): [34..39] [30..31]
 a11(r97): [32..33]
 a12(r80): [36..41]
 a13(r79): [42..43]
 a14(r77): [46..47]
 a15(r76): [53..54]
 a16(r75): [55..56]
 a17(r74): [57..58]
 a18(r73): [59..60]
 a19(r72): [66..67]
 a20(r71): [73..74]
 a21(r70): [75..76]
 a22(r69): [77..78]
 a23(r68): [79..80]
 a24(r65): [79..96]
 a25(r94): [85..90] [81..82]
 a26(r95): [83..84]
 a27(r67): [87..92]
 a28(r66): [93..94]
 a29(r64): [97..98]
 a30(r63): [104..105]
 a31(r62): [106..107]
 a32(r61): [108..109]
 a33(r60): [110..111]
 a34(r59): [117..118]
 a35(r93 [0]): [126..127]
 a35(r93 [1]): [126..127]
 a36(r90): [128..133]
 a37(r91): [128..129]
 a38(r92): [130..131]
 a39(r89 [0]): [136..137]
 a39(r89 [1]): [136..137]
 a40(r87): [138..141]
 a41(r88): [138..139]
Compressing live ranges: from 144 to 72 - 50%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [0..3]
 a2(r100): [0..1]
 a3(r99): [2..3]
 a4(r98): [4..5]
 a5(r84): [6..7]
 a6(r83): [8..9]
 a7(r82): [10..11]
 a8(r81): [12..13]
 a9(r78): [12..21]
 a10(r96): [18..19] [14..15]
 a11(r97): [16..17]
 a12(r80): [18..19]
 a13(r79): [20..21]
 a14(r77): [22..23]
 a15(r76): [24..25]
 a16(r75): [26..27]
 a17(r74): [28..29]
 a18(r73): [30..31]
 a19(r72): [32..33]
 a20(r71): [34..35]
 a21(r70): [36..37]
 a22(r69): [38..39]
 a23(r68): [40..41]
 a24(r65): [40..49]
 a25(r94): [46..47] [42..43]
 a26(r95): [44..45]
 a27(r67): [46..47]
 a28(r66): [48..49]
 a29(r64): [50..51]
 a30(r63): [52..53]
 a31(r62): [54..55]
 a32(r61): [56..57]
 a33(r60): [58..59]
 a34(r59): [60..61]
 a35(r93 [0]): [62..63]
 a35(r93 [1]): [62..63]
 a36(r90): [64..67]
 a37(r91): [64..65]
 a38(r92): [66..67]
 a39(r89 [0]): [68..69]
 a39(r89 [1]): [68..69]
 a40(r87): [70..71]
 a41(r88): [70..71]
  regions=1, blocks=10, points=72
    allocnos=42 (big 2), copies=0, conflicts=0, ranges=46
Disposition:
   34:r59  l0     0   33:r60  l0     0   32:r61  l0     0   31:r62  l0     0
   30:r63  l0     0   29:r64  l0     0   24:r65  l0     2   28:r66  l0     0
   27:r67  l0     1   23:r68  l0     0   22:r69  l0     0   21:r70  l0     0
   20:r71  l0     0   19:r72  l0     0   18:r73  l0     0   17:r74  l0     0
   16:r75  l0     0   15:r76  l0     0   14:r77  l0     0    9:r78  l0     2
   13:r79  l0     0   12:r80  l0     1    8:r81  l0     0    7:r82  l0     0
    6:r83  l0     0    5:r84  l0     0    1:r85  l0     1    0:r86  l0     0
   40:r87  l0     0   41:r88  l0     1   39:r89  l0     0   36:r90  l0     0
   37:r91  l0     1   38:r92  l0     1   35:r93  l0     0   25:r94  l0     0
   26:r95  l0     0   10:r96  l0     0   11:r97  l0     0    4:r98  l0     0
    3:r99  l0     0    2:r100 l0     2
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 87
insn=6, live_throughout: 7, 87, dead_or_set: 88
insn=7, live_throughout: 7, dead_or_set: 87, 88, 89
insn=8, live_throughout: 7, dead_or_set: 89
insn=9, live_throughout: 7, dead_or_set: 90
insn=10, live_throughout: 7, 90, dead_or_set: 92
insn=11, live_throughout: 7, 90, dead_or_set: 91, 92
insn=12, live_throughout: 7, dead_or_set: 90, 91, 93
insn=13, live_throughout: 7, dead_or_set: 93
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 59
insn=18, live_throughout: 7, dead_or_set: 59
insn=19, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 60
insn=22, live_throughout: 7, dead_or_set: 60, 61
insn=23, live_throughout: 7, dead_or_set: 61, 62
insn=24, live_throughout: 7, dead_or_set: 62, 63
insn=25, live_throughout: 7, dead_or_set: 63
insn=89, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=30, live_throughout: 7, dead_or_set: 64
insn=31, live_throughout: 7, dead_or_set: 64, 65
insn=32, live_throughout: 7, 65, dead_or_set: 66
insn=33, live_throughout: 7, 65, dead_or_set: 66, 67
insn=34, live_throughout: 7, 65, 67, dead_or_set: 94
insn=35, live_throughout: 7, 65, 67, dead_or_set: 94
insn=36, live_throughout: 7, 65, dead_or_set: 67, 94
insn=37, live_throughout: 7, 65, dead_or_set: 94, 95
insn=38, live_throughout: 7, 65, dead_or_set: 94, 95
insn=39, live_throughout: 7, 65, dead_or_set: 68, 94
insn=40, live_throughout: 7, dead_or_set: 65, 68, 69
insn=41, live_throughout: 7, dead_or_set: 69, 70
insn=42, live_throughout: 7, dead_or_set: 70, 71
insn=43, live_throughout: 7, dead_or_set: 71
insn=91, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 72
insn=49, live_throughout: 7, dead_or_set: 72
insn=50, live_throughout: 7, dead_or_set: 
insn=52, live_throughout: 7, dead_or_set: 73
insn=53, live_throughout: 7, dead_or_set: 73, 74
insn=54, live_throughout: 7, dead_or_set: 74, 75
insn=55, live_throughout: 7, dead_or_set: 75, 76
insn=56, live_throughout: 7, dead_or_set: 76
insn=93, live_throughout: 7, dead_or_set: 
insn=59, live_throughout: 7, dead_or_set: 
insn=61, live_throughout: 7, dead_or_set: 77
insn=62, live_throughout: 7, dead_or_set: 77, 78
insn=63, live_throughout: 7, 78, dead_or_set: 79
insn=64, live_throughout: 7, 78, dead_or_set: 79, 80
insn=65, live_throughout: 7, 78, 80, dead_or_set: 96
insn=66, live_throughout: 7, 78, 80, dead_or_set: 96
insn=67, live_throughout: 7, 78, dead_or_set: 80, 96
insn=68, live_throughout: 7, 78, dead_or_set: 96, 97
insn=69, live_throughout: 7, 78, dead_or_set: 96, 97
insn=70, live_throughout: 7, 78, dead_or_set: 81, 96
insn=71, live_throughout: 7, dead_or_set: 78, 81, 82
insn=72, live_throughout: 7, dead_or_set: 82, 83
insn=73, live_throughout: 7, dead_or_set: 83, 84
insn=74, live_throughout: 7, dead_or_set: 84
insn=75, live_throughout: 7, dead_or_set: 
insn=77, live_throughout: 7, dead_or_set: 98
insn=78, live_throughout: 7, dead_or_set: 85, 98
insn=79, live_throughout: 7, 85, dead_or_set: 99
insn=80, live_throughout: 7, 85, dead_or_set: 86, 99
insn=81, live_throughout: 7, 85, 86, dead_or_set: 100
insn=82, live_throughout: 7, 85, 86, dead_or_set: 100
insn=83, live_throughout: 7, 86, dead_or_set: 85
insn=84, live_throughout: 7, 86, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 86
insn=86, live_throughout: 7, dead_or_set: 0
changing reg in insn 17
changing reg in insn 18
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 24
changing reg in insn 25
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 40
changing reg in insn 32
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 38
changing reg in insn 36
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 41
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 48
changing reg in insn 49
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 55
changing reg in insn 56
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 71
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 65
changing reg in insn 69
changing reg in insn 67
changing reg in insn 70
changing reg in insn 71
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 73
changing reg in insn 74
changing reg in insn 78
changing reg in insn 83
changing reg in insn 80
changing reg in insn 85
changing reg in insn 5
changing reg in insn 7
changing reg in insn 6
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 38
changing reg in insn 36
changing reg in insn 35
changing reg in insn 34
changing reg in insn 39
changing reg in insn 37
changing reg in insn 36
changing reg in insn 35
changing reg in insn 37
changing reg in insn 38
changing reg in insn 69
changing reg in insn 67
changing reg in insn 66
changing reg in insn 65
changing reg in insn 70
changing reg in insn 68
changing reg in insn 67
changing reg in insn 66
changing reg in insn 68
changing reg in insn 69
changing reg in insn 77
changing reg in insn 78
changing reg in insn 79
changing reg in insn 80
changing reg in insn 81
changing reg in insn 82
deleting insn with uid = 22.
deleting insn with uid = 24.
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 53.
deleting insn with uid = 55.
deleting insn with uid = 69.
deleting insn with uid = 70.
deleting insn with uid = 73.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 86.


colorChecker

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={32d,30u} r1={10d,10u,2e} r2={5d,3u} r6={1d,31u} r7={1d,14u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r16={1e} r17={19d,3u} r18={1d} r19={1d} r20={1d,1u,1e} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 207{111d,92u,4e} in 59{58 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 87 88 89 90 91 92 93

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [87])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 game+0 S4 A32])) src/gui.c:740 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 1 dx [88])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:740 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (set (reg:DI 0 ax [89])
        (mem/s/j:DI (plus:SI (mult:SI (reg:SI 1 dx [88])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [87])) [0 game_1(D)->zones S8 A32])) src/gui.c:740 63 {*movdi_internal}
     (nil))

(insn 8 7 9 2 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 selectedZone+0 S8 A32])
        (reg:DI 0 ax [89])) src/gui.c:740 63 {*movdi_internal}
     (nil))

(insn 9 8 10 2 (set (reg/f:SI 0 ax [90])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:741 64 {*movsi_internal}
     (nil))

(insn 10 9 11 2 (set (reg:SI 1 dx [92])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 pos+0 S4 A32])) src/gui.c:741 64 {*movsi_internal}
     (nil))

(insn 11 10 12 2 (parallel [
            (set (reg:SI 1 dx [91])
                (plus:SI (reg:SI 1 dx [92])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:741 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 8 [0x8])) [0 pos+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 12 11 13 2 (set (reg:DI 0 ax [93])
        (mem/s/j:DI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [91])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [90]))
                (const_int 4 [0x4])) [0 display_3(D)->positions S8 A32])) src/gui.c:741 63 {*movdi_internal}
     (nil))

(insn 13 12 14 2 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posSelectedChecker+0 S8 A32])
        (reg:DI 0 ax [93])) src/gui.c:741 63 {*movdi_internal}
     (nil))

(insn 14 13 15 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 pos+0 S4 A32])
            (const_int 11 [0xb]))) src/gui.c:743 6 {*cmpsi_1}
     (nil))

(jump_insn 15 14 16 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 46)
            (pc))) src/gui.c:743 591 {*jcc_1}
     (nil)
 -> 46)
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  6

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59

;; Pred edge  2 (fallthru)
(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 3 (set (reg:SI 0 ax [orig:59 D.5843 ] [59])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 selectedZone.nb_checkers+0 S4 A32])) src/gui.c:744 64 {*movsi_internal}
     (nil))

(insn 18 17 19 3 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:59 D.5843 ] [59])
            (const_int 6 [0x6]))) src/gui.c:744 6 {*cmpsi_1}
     (nil))

(jump_insn 19 18 20 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) src/gui.c:744 591 {*jcc_1}
     (nil)
 -> 28)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63

;; Pred edge  3 (fallthru)
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 23 4 (set (reg:HI 0 ax [orig:60 D.5846 ] [60])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])) src/gui.c:745 65 {*movhi_internal}
     (nil))

(insn 23 21 25 4 (parallel [
            (set (reg:HI 0 ax [orig:62 D.5848 ] [62])
                (plus:HI (reg:HI 0 ax [orig:61 D.5847 ] [61])
                    (const_int -100 [0xffffffffffffff9c])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:745 256 {*addhi_1_lea}
     (nil))

(insn 25 23 89 4 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])
        (reg:HI 0 ax [orig:63 D.5849 ] [63])) src/gui.c:745 65 {*movhi_internal}
     (nil))

(jump_insn 89 25 90 4 (set (pc)
        (label_ref 75)) 606 {jump}
     (nil)
 -> 75)
;; End of basic block 4 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 90 89 28)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 67 68 69 70 71 94 95

;; Pred edge  3
(code_label 28 90 29 5 147 "" [1 uses])

(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 5 (set (reg:HI 0 ax [orig:64 D.5851 ] [64])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])) src/gui.c:747 65 {*movhi_internal}
     (nil))

(insn 31 30 32 5 (set (reg:HI 2 cx [orig:65 D.5852 ] [65])
        (reg:HI 0 ax [orig:64 D.5851 ] [64])) src/gui.c:747 65 {*movhi_internal}
     (nil))

(insn 32 31 33 5 (set (reg:SI 0 ax [orig:66 D.5853 ] [66])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 selectedZone.nb_checkers+0 S4 A32])) src/gui.c:747 64 {*movsi_internal}
     (nil))

(insn 33 32 34 5 (set (reg:HI 1 dx [orig:67 D.5854 ] [67])
        (reg:HI 0 ax [orig:66 D.5853 ] [66])) src/gui.c:747 65 {*movhi_internal}
     (nil))

(insn 34 33 35 5 (set (reg:HI 0 ax [94])
        (reg:HI 1 dx [orig:67 D.5854 ] [67])) src/gui.c:747 65 {*movhi_internal}
     (nil))

(insn 35 34 36 5 (parallel [
            (set (reg:HI 0 ax [94])
                (ashift:HI (reg:HI 0 ax [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 501 {*ashlhi3_1_lea}
     (nil))

(insn 36 35 37 5 (parallel [
            (set (reg:HI 0 ax [94])
                (plus:HI (reg:HI 0 ax [94])
                    (reg:HI 1 dx [orig:67 D.5854 ] [67])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 256 {*addhi_1_lea}
     (expr_list:REG_EQUAL (mult:HI (reg:HI 1 dx [orig:67 D.5854 ] [67])
            (const_int 5 [0x5]))
        (nil)))

(insn 37 36 39 5 (parallel [
            (set (reg:HI 0 ax [95])
                (ashift:HI (reg:HI 0 ax [94])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 501 {*ashlhi3_1_lea}
     (nil))

(insn 39 37 40 5 (parallel [
            (set (reg:HI 0 ax [orig:68 D.5855 ] [68])
                (neg:HI (reg:HI 0 ax [94])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 446 {*neghi2_1}
     (nil))

(insn 40 39 41 5 (parallel [
            (set (reg:HI 0 ax [orig:69 D.5856 ] [69])
                (plus:HI (reg:HI 2 cx [orig:65 D.5852 ] [65])
                    (reg:HI 0 ax [orig:68 D.5855 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 256 {*addhi_1_lea}
     (nil))

(insn 41 40 43 5 (parallel [
            (set (reg:HI 0 ax [orig:70 D.5857 ] [70])
                (plus:HI (reg:HI 0 ax [orig:69 D.5856 ] [69])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:747 256 {*addhi_1_lea}
     (nil))

(insn 43 41 91 5 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])
        (reg:HI 0 ax [orig:71 D.5858 ] [71])) src/gui.c:747 65 {*movhi_internal}
     (nil))

(jump_insn 91 43 92 5 (set (pc)
        (label_ref 75)) 606 {jump}
     (nil)
 -> 75)
;; End of basic block 5 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 92 91 46)

;; Start of basic block ( 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 72

;; Pred edge  2
(code_label 46 92 47 6 146 "" [1 uses])

(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 6 (set (reg:SI 0 ax [orig:72 D.5860 ] [72])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 selectedZone.nb_checkers+0 S4 A32])) src/gui.c:749 64 {*movsi_internal}
     (nil))

(insn 49 48 50 6 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:72 D.5860 ] [72])
            (const_int 6 [0x6]))) src/gui.c:749 6 {*cmpsi_1}
     (nil))

(jump_insn 50 49 51 6 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) src/gui.c:749 591 {*jcc_1}
     (nil)
 -> 59)
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 73 74 75 76

;; Pred edge  6 (fallthru)
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 54 7 (set (reg:HI 0 ax [orig:73 D.5863 ] [73])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])) src/gui.c:750 65 {*movhi_internal}
     (nil))

(insn 54 52 56 7 (parallel [
            (set (reg:HI 0 ax [orig:75 D.5865 ] [75])
                (plus:HI (reg:HI 0 ax [orig:74 D.5864 ] [74])
                    (const_int 100 [0x64])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:750 256 {*addhi_1_lea}
     (nil))

(insn 56 54 93 7 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])
        (reg:HI 0 ax [orig:76 D.5866 ] [76])) src/gui.c:750 65 {*movhi_internal}
     (nil))

(jump_insn 93 56 94 7 (set (pc)
        (label_ref 75)) 606 {jump}
     (nil)
 -> 75)
;; End of basic block 7 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 [100.0%] 

(barrier 94 93 59)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 77 78 79 80 81 82 83 84 96 97

;; Pred edge  6
(code_label 59 94 60 8 149 "" [1 uses])

(note 60 59 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 61 60 62 8 (set (reg:HI 0 ax [orig:77 D.5868 ] [77])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])) src/gui.c:752 65 {*movhi_internal}
     (nil))

(insn 62 61 63 8 (set (reg:HI 2 cx [orig:78 D.5869 ] [78])
        (reg:HI 0 ax [orig:77 D.5868 ] [77])) src/gui.c:752 65 {*movhi_internal}
     (nil))

(insn 63 62 64 8 (set (reg:SI 0 ax [orig:79 D.5870 ] [79])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 selectedZone.nb_checkers+0 S4 A32])) src/gui.c:752 64 {*movsi_internal}
     (nil))

(insn 64 63 65 8 (set (reg:HI 1 dx [orig:80 D.5871 ] [80])
        (reg:HI 0 ax [orig:79 D.5870 ] [79])) src/gui.c:752 65 {*movhi_internal}
     (nil))

(insn 65 64 66 8 (set (reg:HI 0 ax [96])
        (reg:HI 1 dx [orig:80 D.5871 ] [80])) src/gui.c:752 65 {*movhi_internal}
     (nil))

(insn 66 65 67 8 (parallel [
            (set (reg:HI 0 ax [96])
                (ashift:HI (reg:HI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:752 501 {*ashlhi3_1_lea}
     (nil))

(insn 67 66 68 8 (parallel [
            (set (reg:HI 0 ax [96])
                (plus:HI (reg:HI 0 ax [96])
                    (reg:HI 1 dx [orig:80 D.5871 ] [80])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:752 256 {*addhi_1_lea}
     (expr_list:REG_EQUAL (mult:HI (reg:HI 1 dx [orig:80 D.5871 ] [80])
            (const_int 5 [0x5]))
        (nil)))

(insn 68 67 71 8 (parallel [
            (set (reg:HI 0 ax [97])
                (ashift:HI (reg:HI 0 ax [96])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:752 501 {*ashlhi3_1_lea}
     (nil))

(insn 71 68 72 8 (parallel [
            (set (reg:HI 0 ax [orig:82 D.5873 ] [82])
                (plus:HI (reg:HI 2 cx [orig:78 D.5869 ] [78])
                    (reg:HI 0 ax [orig:81 D.5872 ] [81])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:752 256 {*addhi_1_lea}
     (nil))

(insn 72 71 74 8 (parallel [
            (set (reg:HI 0 ax [orig:83 D.5874 ] [83])
                (plus:HI (reg:HI 0 ax [orig:82 D.5873 ] [82])
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:752 256 {*addhi_1_lea}
     (nil))

(insn 74 72 75 8 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posSelectedChecker.y+0 S2 A16])
        (reg:HI 0 ax [orig:84 D.5875 ] [84])) src/gui.c:752 65 {*movhi_internal}
     (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)

;; Start of basic block ( 4 5 8 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 85 86 98 99 100

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  8 (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 75 74 76 9 148 "" [3 uses])

(note 76 75 77 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 77 76 78 9 (set (reg/f:SI 0 ax [98])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 78 77 79 9 (set (reg/f:SI 1 dx [orig:85 D.5876 ] [85])
        (mem/s/f/j:SI (reg/f:SI 0 ax [98]) [0 display_3(D)->screen+0 S4 A32])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 79 78 80 9 (set (reg/f:SI 0 ax [99])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 80 79 81 9 (set (reg/f:SI 0 ax [orig:86 D.5877 ] [86])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [99])
                (const_int 60 [0x3c])) [0 display_3(D)->selected_checker+0 S4 A32])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 81 80 82 9 (parallel [
            (set (reg:SI 2 cx [100])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:754 252 {*addsi_1}
     (nil))

(insn 82 81 83 9 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [100])) src/gui.c:754 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 83 82 84 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:85 D.5876 ] [85])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 84 83 85 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(insn 85 84 86 9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:86 D.5877 ] [86])) src/gui.c:754 64 {*movsi_internal}
     (nil))

(call_insn 86 85 95 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:754 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 95 86 0 NOTE_INSN_DELETED)


;; Function Display_CheckersPossibilities (Display_CheckersPossibilities)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 54 n_edges 86 count 54 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r268: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r268,l0) best GENERAL_REGS, cover GENERAL_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r267,l0) best GENERAL_REGS, cover GENERAL_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r266,l0) best GENERAL_REGS, cover GENERAL_REGS
    r265: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r265,l0) best GENERAL_REGS, cover GENERAL_REGS
    r264: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r264,l0) best GENERAL_REGS, cover GENERAL_REGS
    r263: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r263,l0) best GENERAL_REGS, cover GENERAL_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r262,l0) best GENERAL_REGS, cover GENERAL_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r261,l0) best GENERAL_REGS, cover GENERAL_REGS
    r260: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r260,l0) best GENERAL_REGS, cover GENERAL_REGS
    r259: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r259,l0) best GENERAL_REGS, cover GENERAL_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r258,l0) best GENERAL_REGS, cover GENERAL_REGS
    r257: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r257,l0) best GENERAL_REGS, cover GENERAL_REGS
    r256: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r256,l0) best GENERAL_REGS, cover GENERAL_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r255,l0) best GENERAL_REGS, cover GENERAL_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r254,l0) best GENERAL_REGS, cover GENERAL_REGS
    r253: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a28 (r253,l0) best AREG, cover GENERAL_REGS
    r252: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r252,l0) best GENERAL_REGS, cover GENERAL_REGS
    r251: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r251,l0) best GENERAL_REGS, cover GENERAL_REGS
    r250: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r250,l0) best GENERAL_REGS, cover GENERAL_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r249,l0) best GENERAL_REGS, cover GENERAL_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r248,l0) best GENERAL_REGS, cover GENERAL_REGS
    r247: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r247,l0) best GENERAL_REGS, cover GENERAL_REGS
    r246: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r246,l0) best GENERAL_REGS, cover GENERAL_REGS
    r245: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a44 (r245,l0) best Q_REGS, cover GENERAL_REGS
    r244: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r244,l0) best GENERAL_REGS, cover GENERAL_REGS
    r243: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r243,l0) best GENERAL_REGS, cover GENERAL_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r242,l0) best GENERAL_REGS, cover GENERAL_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r241,l0) best GENERAL_REGS, cover GENERAL_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r240,l0) best GENERAL_REGS, cover GENERAL_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r239,l0) best GENERAL_REGS, cover GENERAL_REGS
    r238: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r238,l0) best GENERAL_REGS, cover GENERAL_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r237,l0) best GENERAL_REGS, cover GENERAL_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r236,l0) best GENERAL_REGS, cover GENERAL_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r235,l0) best GENERAL_REGS, cover GENERAL_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r234,l0) best GENERAL_REGS, cover GENERAL_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a79 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a81 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    r230: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a85 (r230,l0) best GENERAL_REGS, cover GENERAL_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a88 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a90 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    r227: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a94 (r227,l0) best GENERAL_REGS, cover GENERAL_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a97 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a99 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a103 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a106 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a110 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a113 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a117 (r220,l0) best GENERAL_REGS, cover GENERAL_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a120 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a122 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a121 (r217,l0) best GENERAL_REGS, cover GENERAL_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a123 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a124 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a132 (r214,l0) best GENERAL_REGS, cover GENERAL_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a133 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a135 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a139 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a141 (r210,l0) best GENERAL_REGS, cover GENERAL_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a145 (r209,l0) best GENERAL_REGS, cover GENERAL_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a147 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a151 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a155 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a159 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a161 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    r203: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a160 (r203,l0) best GENERAL_REGS, cover GENERAL_REGS
    r202: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a162 (r202,l0) best GENERAL_REGS, cover GENERAL_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a163 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a171 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a172 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a174 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a178 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a180 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a184 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a186 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a190 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a194 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a198 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a201 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a200 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a204 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a203 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a207 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a208 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a209 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    r183: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r183,l0) best AREG, cover GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    r180: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a17 (r180,l0) best AREG, cover GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    r178: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a20 (r178,l0) best AREG, cover GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    r170: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a34 (r170,l0) best AREG, cover GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    r168: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a37 (r168,l0) best AREG, cover GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    r163: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a45 (r163,l0) best AREG, cover GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    r161: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a48 (r161,l0) best AREG, cover GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    r159: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a51 (r159,l0) best AREG, cover GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    r154: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a57 (r154,l0) best Q_REGS, cover GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    r152: preferred Q_REGS, alternative GENERAL_REGS, cover GENERAL_REGS
    a60 (r152,l0) best Q_REGS, cover GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a69 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a73 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a74 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a80 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a82 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a83 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a84 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a86 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a87 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a89 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a91 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a92 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a93 (r132,l0) best GENERAL_REGS, cover GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a95 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a96 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a98 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a100 (r128,l0) best GENERAL_REGS, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a101 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a102 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a104 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a105 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a107 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a108 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a109 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a111 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a112 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a114 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a115 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a116 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a118 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a119 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a125 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a126 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a127 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a129 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a130 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a131 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a128 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a134 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a136 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a137 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a138 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a140 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a142 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a143 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a144 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a146 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a148 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a149 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a150 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a152 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a153 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a154 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a156 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a157 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a158 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a164 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a165 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a166 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a168 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a169 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a170 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a167 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a173 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a175 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a176 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a177 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a179 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a181 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a182 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a183 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a185 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a187 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a188 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a189 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a191 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a192 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a193 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a195 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a196 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a197 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a199 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a202 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a205 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a206 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r59,l0) best AREG, cover GENERAL_REGS

  a0(r183,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:15
  a2(r268,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r267,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r266,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r265,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r264,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a7(r263,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r262,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a9(r261,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r260,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a11(r259,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a12(r258,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r257,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r256,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r182,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a16(r181,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a17(r180,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r179,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r255,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a20(r178,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a21(r177,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a22(r175,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r254,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r176,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a26(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a27(r172,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a28(r253,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r252,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r251,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r250,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r171,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r249,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a34(r170,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a35(r169,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a36(r248,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r168,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r167,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a39(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a40(r247,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r166,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a42(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a43(r246,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a44(r245,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:2,2 DIREG:2,2 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:6
  a45(r163,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a46(r162,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r244,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a48(r161,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a49(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r243,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r159,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r158,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a53(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a54(r242,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a55(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a56(r155,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a57(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:4,4 DIREG:4,4 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:4,4 GENERAL_REGS:4,4 MEM:7
  a58(r241,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a59(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:10
  a60(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:2,2 DIREG:2,2 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:2,2 GENERAL_REGS:2,2 MEM:7
  a61(r240,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a62(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a63(r239,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a64(r237,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a65(r238,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a66(r236,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a67(r235,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a68(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a69(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a70(r148,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a71(r142,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a72(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a73(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a74(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a75(r234,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a76(r144,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a77(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a78(r233,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a79(r232,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a80(r141,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a81(r231,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a82(r140,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a83(r139,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a84(r138,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a85(r230,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a86(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a87(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a88(r229,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a89(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a90(r228,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a91(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a92(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a93(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a94(r227,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a95(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a96(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a97(r226,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a98(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a99(r225,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a100(r128,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a101(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a102(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a103(r224,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a104(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a105(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a106(r223,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a107(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a108(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a109(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a110(r222,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a111(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a112(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a113(r221,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a114(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a115(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a116(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a117(r220,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a118(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a119(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a120(r219,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a121(r217,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a122(r218,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a123(r216,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a124(r215,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a125(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a126(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a127(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a128(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a129(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a130(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a131(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a132(r214,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a133(r213,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a134(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a135(r212,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a136(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a137(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a138(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a139(r211,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a140(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a141(r210,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a142(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a143(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a144(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a145(r209,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a146(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a147(r208,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a148(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a149(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a150(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a151(r207,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a152(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a153(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a154(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a155(r206,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a156(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a157(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a158(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a159(r205,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a160(r203,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a161(r204,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a162(r202,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a163(r201,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a164(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a165(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a166(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a167(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a168(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a169(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a170(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a171(r200,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a172(r199,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a173(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a174(r198,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a175(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a176(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a177(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a178(r197,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a179(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a180(r196,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a181(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a182(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a183(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a184(r195,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a185(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a186(r194,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a187(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a188(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a189(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a190(r193,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a191(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a192(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a193(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a194(r192,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a195(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a196(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a197(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a198(r191,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a199(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a200(r189,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a201(r190,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a202(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a203(r187,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a204(r188,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a205(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a206(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a207(r186,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a208(r185,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a209(r184,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 481(l0): point = 0
   Insn 478(l0): point = 2
   Insn 474(l0): point = 5
   Insn 500(l0): point = 8
   Insn 469(l0): point = 10
   Insn 468(l0): point = 12
   Insn 498(l0): point = 15
   Insn 504(l0): point = 18
   Insn 496(l0): point = 21
   Insn 456(l0): point = 23
   Insn 455(l0): point = 25
   Insn 454(l0): point = 27
   Insn 453(l0): point = 29
   Insn 452(l0): point = 31
   Insn 451(l0): point = 33
   Insn 450(l0): point = 35
   Insn 449(l0): point = 37
   Insn 448(l0): point = 39
   Insn 447(l0): point = 41
   Insn 446(l0): point = 43
   Insn 445(l0): point = 45
   Insn 444(l0): point = 47
   Insn 443(l0): point = 49
   Insn 442(l0): point = 51
   Insn 441(l0): point = 53
   Insn 440(l0): point = 55
   Insn 439(l0): point = 57
   Insn 438(l0): point = 59
   Insn 437(l0): point = 61
   Insn 494(l0): point = 64
   Insn 432(l0): point = 66
   Insn 431(l0): point = 68
   Insn 430(l0): point = 70
   Insn 429(l0): point = 72
   Insn 428(l0): point = 74
   Insn 427(l0): point = 76
   Insn 426(l0): point = 78
   Insn 425(l0): point = 80
   Insn 424(l0): point = 82
   Insn 423(l0): point = 84
   Insn 422(l0): point = 86
   Insn 421(l0): point = 88
   Insn 420(l0): point = 90
   Insn 419(l0): point = 92
   Insn 418(l0): point = 94
   Insn 417(l0): point = 96
   Insn 416(l0): point = 98
   Insn 415(l0): point = 100
   Insn 413(l0): point = 103
   Insn 412(l0): point = 105
   Insn 411(l0): point = 107
   Insn 410(l0): point = 109
   Insn 409(l0): point = 111
   Insn 408(l0): point = 113
   Insn 407(l0): point = 115
   Insn 406(l0): point = 117
   Insn 405(l0): point = 119
   Insn 404(l0): point = 121
   Insn 402(l0): point = 124
   Insn 401(l0): point = 126
   Insn 400(l0): point = 128
   Insn 399(l0): point = 130
   Insn 398(l0): point = 132
   Insn 397(l0): point = 134
   Insn 396(l0): point = 136
   Insn 395(l0): point = 138
   Insn 394(l0): point = 140
   Insn 393(l0): point = 142
   Insn 392(l0): point = 144
   Insn 391(l0): point = 146
   Insn 492(l0): point = 149
   Insn 386(l0): point = 151
   Insn 385(l0): point = 153
   Insn 384(l0): point = 155
   Insn 383(l0): point = 157
   Insn 382(l0): point = 159
   Insn 381(l0): point = 161
   Insn 380(l0): point = 163
   Insn 379(l0): point = 165
   Insn 378(l0): point = 167
   Insn 377(l0): point = 169
   Insn 376(l0): point = 171
   Insn 375(l0): point = 173
   Insn 374(l0): point = 175
   Insn 373(l0): point = 177
   Insn 372(l0): point = 179
   Insn 371(l0): point = 181
   Insn 370(l0): point = 183
   Insn 368(l0): point = 186
   Insn 367(l0): point = 188
   Insn 366(l0): point = 190
   Insn 365(l0): point = 192
   Insn 364(l0): point = 194
   Insn 363(l0): point = 196
   Insn 362(l0): point = 198
   Insn 361(l0): point = 200
   Insn 359(l0): point = 203
   Insn 358(l0): point = 205
   Insn 357(l0): point = 207
   Insn 356(l0): point = 209
   Insn 355(l0): point = 211
   Insn 354(l0): point = 213
   Insn 353(l0): point = 215
   Insn 352(l0): point = 217
   Insn 351(l0): point = 219
   Insn 350(l0): point = 221
   Insn 349(l0): point = 223
   Insn 348(l0): point = 225
   Insn 346(l0): point = 228
   Insn 345(l0): point = 230
   Insn 342(l0): point = 233
   Insn 341(l0): point = 235
   Insn 340(l0): point = 237
   Insn 339(l0): point = 239
   Insn 337(l0): point = 242
   Insn 336(l0): point = 244
   Insn 335(l0): point = 246
   Insn 334(l0): point = 248
   Insn 333(l0): point = 250
   Insn 332(l0): point = 252
   Insn 331(l0): point = 254
   Insn 330(l0): point = 256
   Insn 328(l0): point = 259
   Insn 327(l0): point = 261
   Insn 325(l0): point = 264
   Insn 324(l0): point = 266
   Insn 323(l0): point = 268
   Insn 322(l0): point = 270
   Insn 321(l0): point = 272
   Insn 320(l0): point = 274
   Insn 319(l0): point = 276
   Insn 318(l0): point = 278
   Insn 316(l0): point = 281
   Insn 315(l0): point = 283
   Insn 314(l0): point = 285
   Insn 313(l0): point = 287
   Insn 312(l0): point = 289
   Insn 311(l0): point = 291
   Insn 310(l0): point = 293
   Insn 309(l0): point = 295
   Insn 308(l0): point = 297
   Insn 307(l0): point = 299
   Insn 306(l0): point = 301
   Insn 305(l0): point = 303
   Insn 303(l0): point = 306
   Insn 302(l0): point = 308
   Insn 301(l0): point = 310
   Insn 490(l0): point = 313
   Insn 296(l0): point = 315
   Insn 293(l0): point = 318
   Insn 292(l0): point = 320
   Insn 291(l0): point = 322
   Insn 289(l0): point = 325
   Insn 288(l0): point = 327
   Insn 283(l0): point = 330
   Insn 282(l0): point = 332
   Insn 281(l0): point = 335
   Insn 280(l0): point = 337
   Insn 279(l0): point = 339
   Insn 278(l0): point = 341
   Insn 277(l0): point = 343
   Insn 276(l0): point = 345
   Insn 275(l0): point = 347
   Insn 273(l0): point = 350
   Insn 272(l0): point = 352
   Insn 271(l0): point = 354
   Insn 270(l0): point = 356
   Insn 268(l0): point = 359
   Insn 267(l0): point = 361
   Insn 263(l0): point = 364
   Insn 260(l0): point = 367
   Insn 259(l0): point = 369
   Insn 258(l0): point = 371
   Insn 257(l0): point = 373
   Insn 256(l0): point = 375
   Insn 255(l0): point = 377
   Insn 254(l0): point = 379
   Insn 253(l0): point = 381
   Insn 252(l0): point = 383
   Insn 251(l0): point = 385
   Insn 250(l0): point = 387
   Insn 249(l0): point = 389
   Insn 248(l0): point = 391
   Insn 247(l0): point = 393
   Insn 246(l0): point = 395
   Insn 245(l0): point = 397
   Insn 244(l0): point = 399
   Insn 243(l0): point = 401
   Insn 242(l0): point = 403
   Insn 241(l0): point = 405
   Insn 240(l0): point = 407
   Insn 239(l0): point = 409
   Insn 238(l0): point = 411
   Insn 237(l0): point = 413
   Insn 236(l0): point = 415
   Insn 235(l0): point = 417
   Insn 232(l0): point = 420
   Insn 231(l0): point = 422
   Insn 230(l0): point = 424
   Insn 229(l0): point = 426
   Insn 228(l0): point = 428
   Insn 227(l0): point = 430
   Insn 226(l0): point = 432
   Insn 225(l0): point = 434
   Insn 224(l0): point = 436
   Insn 223(l0): point = 438
   Insn 222(l0): point = 440
   Insn 220(l0): point = 443
   Insn 219(l0): point = 445
   Insn 218(l0): point = 447
   Insn 217(l0): point = 449
   Insn 216(l0): point = 451
   Insn 215(l0): point = 453
   Insn 214(l0): point = 455
   Insn 213(l0): point = 457
   Insn 212(l0): point = 459
   Insn 211(l0): point = 461
   Insn 210(l0): point = 463
   Insn 208(l0): point = 466
   Insn 207(l0): point = 468
   Insn 206(l0): point = 470
   Insn 205(l0): point = 472
   Insn 204(l0): point = 474
   Insn 203(l0): point = 476
   Insn 202(l0): point = 478
   Insn 201(l0): point = 480
   Insn 200(l0): point = 482
   Insn 199(l0): point = 484
   Insn 198(l0): point = 486
   Insn 196(l0): point = 489
   Insn 195(l0): point = 491
   Insn 194(l0): point = 493
   Insn 193(l0): point = 495
   Insn 192(l0): point = 497
   Insn 191(l0): point = 499
   Insn 190(l0): point = 501
   Insn 189(l0): point = 503
   Insn 188(l0): point = 505
   Insn 186(l0): point = 508
   Insn 185(l0): point = 510
   Insn 184(l0): point = 512
   Insn 183(l0): point = 514
   Insn 182(l0): point = 516
   Insn 181(l0): point = 518
   Insn 180(l0): point = 520
   Insn 179(l0): point = 522
   Insn 178(l0): point = 524
   Insn 175(l0): point = 527
   Insn 174(l0): point = 529
   Insn 173(l0): point = 531
   Insn 172(l0): point = 533
   Insn 171(l0): point = 535
   Insn 170(l0): point = 537
   Insn 169(l0): point = 539
   Insn 168(l0): point = 541
   Insn 167(l0): point = 543
   Insn 166(l0): point = 545
   Insn 165(l0): point = 547
   Insn 164(l0): point = 549
   Insn 163(l0): point = 551
   Insn 162(l0): point = 553
   Insn 161(l0): point = 555
   Insn 160(l0): point = 557
   Insn 159(l0): point = 559
   Insn 158(l0): point = 561
   Insn 157(l0): point = 563
   Insn 156(l0): point = 565
   Insn 155(l0): point = 567
   Insn 154(l0): point = 569
   Insn 153(l0): point = 571
   Insn 150(l0): point = 574
   Insn 149(l0): point = 576
   Insn 148(l0): point = 578
   Insn 147(l0): point = 580
   Insn 146(l0): point = 582
   Insn 145(l0): point = 584
   Insn 144(l0): point = 586
   Insn 143(l0): point = 588
   Insn 141(l0): point = 591
   Insn 140(l0): point = 593
   Insn 139(l0): point = 595
   Insn 138(l0): point = 597
   Insn 137(l0): point = 599
   Insn 136(l0): point = 601
   Insn 135(l0): point = 603
   Insn 134(l0): point = 605
   Insn 132(l0): point = 608
   Insn 131(l0): point = 610
   Insn 130(l0): point = 612
   Insn 129(l0): point = 614
   Insn 128(l0): point = 616
   Insn 127(l0): point = 618
   Insn 126(l0): point = 620
   Insn 125(l0): point = 622
   Insn 123(l0): point = 625
   Insn 122(l0): point = 627
   Insn 121(l0): point = 629
   Insn 120(l0): point = 631
   Insn 119(l0): point = 633
   Insn 118(l0): point = 635
   Insn 116(l0): point = 638
   Insn 115(l0): point = 640
   Insn 114(l0): point = 642
   Insn 113(l0): point = 644
   Insn 112(l0): point = 646
   Insn 111(l0): point = 648
   Insn 108(l0): point = 651
   Insn 107(l0): point = 653
   Insn 106(l0): point = 655
   Insn 105(l0): point = 657
   Insn 104(l0): point = 659
   Insn 103(l0): point = 661
   Insn 102(l0): point = 663
   Insn 101(l0): point = 665
   Insn 100(l0): point = 667
   Insn 99(l0): point = 669
   Insn 98(l0): point = 671
   Insn 97(l0): point = 673
   Insn 96(l0): point = 675
   Insn 95(l0): point = 677
   Insn 94(l0): point = 679
   Insn 93(l0): point = 681
   Insn 92(l0): point = 683
   Insn 91(l0): point = 685
   Insn 90(l0): point = 687
   Insn 89(l0): point = 689
   Insn 88(l0): point = 691
   Insn 87(l0): point = 693
   Insn 86(l0): point = 695
   Insn 83(l0): point = 698
   Insn 82(l0): point = 700
   Insn 81(l0): point = 702
   Insn 80(l0): point = 704
   Insn 79(l0): point = 706
   Insn 78(l0): point = 708
   Insn 77(l0): point = 710
   Insn 76(l0): point = 712
   Insn 74(l0): point = 715
   Insn 73(l0): point = 717
   Insn 72(l0): point = 719
   Insn 71(l0): point = 721
   Insn 70(l0): point = 723
   Insn 69(l0): point = 725
   Insn 68(l0): point = 727
   Insn 67(l0): point = 729
   Insn 65(l0): point = 732
   Insn 64(l0): point = 734
   Insn 63(l0): point = 736
   Insn 62(l0): point = 738
   Insn 61(l0): point = 740
   Insn 60(l0): point = 742
   Insn 59(l0): point = 744
   Insn 58(l0): point = 746
   Insn 56(l0): point = 749
   Insn 55(l0): point = 751
   Insn 54(l0): point = 753
   Insn 53(l0): point = 755
   Insn 52(l0): point = 757
   Insn 51(l0): point = 759
   Insn 49(l0): point = 762
   Insn 48(l0): point = 764
   Insn 47(l0): point = 766
   Insn 46(l0): point = 768
   Insn 45(l0): point = 770
   Insn 44(l0): point = 772
   Insn 42(l0): point = 775
   Insn 41(l0): point = 777
   Insn 40(l0): point = 779
   Insn 39(l0): point = 781
   Insn 38(l0): point = 783
   Insn 36(l0): point = 786
   Insn 35(l0): point = 788
   Insn 34(l0): point = 790
   Insn 33(l0): point = 792
   Insn 32(l0): point = 794
   Insn 488(l0): point = 797
   Insn 28(l0): point = 799
   Insn 26(l0): point = 802
   Insn 25(l0): point = 804
   Insn 24(l0): point = 806
   Insn 23(l0): point = 808
   Insn 22(l0): point = 810
   Insn 21(l0): point = 812
   Insn 19(l0): point = 815
   Insn 18(l0): point = 817
   Insn 14(l0): point = 820
   Insn 13(l0): point = 822
   Insn 12(l0): point = 824
   Insn 486(l0): point = 827
   Insn 8(l0): point = 829
   Insn 7(l0): point = 831
   Insn 6(l0): point = 833
   Insn 5(l0): point = 835
 a0(r183): [8..10] [3..5]
 a1(r59): [313..315] [64..66] [21..23] [6..7]
 a2(r268): [28..29]
 a3(r267): [32..33]
 a4(r266): [36..37]
 a5(r265): [40..41]
 a6(r264): [46..47]
 a7(r263): [50..51]
 a8(r262): [54..55]
 a9(r261): [60..61]
 a10(r260): [71..72]
 a11(r259): [75..76]
 a12(r258): [79..80]
 a13(r257): [83..84]
 a14(r256): [89..90]
 a15(r182): [93..94]
 a16(r181): [95..96]
 a17(r180): [106..107]
 a18(r179): [112..117]
 a19(r255): [114..115]
 a20(r178): [127..128]
 a21(r177): [133..140]
 a22(r175): [135..144]
 a23(r254): [137..138]
 a24(r176): [141..142]
 a25(r174): [145..146]
 a26(r173): [152..153]
 a27(r172): [154..155]
 a28(r253): [160..161]
 a29(r252): [166..167]
 a30(r251): [170..171]
 a31(r250): [174..175]
 a32(r171): [178..183]
 a33(r249): [180..181]
 a34(r170): [189..190]
 a35(r169): [195..200]
 a36(r248): [197..198]
 a37(r168): [206..207]
 a38(r167): [212..219]
 a39(r165): [214..223]
 a40(r247): [216..217]
 a41(r166): [220..221]
 a42(r164): [224..225]
 a43(r246): [234..235]
 a44(r245): [236..237]
 a45(r163): [245..246]
 a46(r162): [251..256]
 a47(r244): [253..254]
 a48(r161): [267..268]
 a49(r160): [273..278]
 a50(r243): [275..276]
 a51(r159): [284..285]
 a52(r158): [290..297]
 a53(r156): [292..301]
 a54(r242): [294..295]
 a55(r157): [298..299]
 a56(r155): [302..303]
 a57(r154): [309..310]
 a58(r241): [321..322]
 a59(r153): [333..339]
 a60(r152): [340..341]
 a61(r240): [346..347]
 a62(r151): [353..354]
 a63(r239): [355..356]
 a64(r237): [370..373]
 a65(r238): [370..371]
 a66(r236): [378..379]
 a67(r235): [382..383]
 a68(r150): [386..387]
 a69(r149): [392..397]
 a70(r148): [394..399]
 a71(r142): [396..415]
 a72(r147): [400..401]
 a73(r146): [402..403]
 a74(r145): [402..407]
 a75(r234): [404..405]
 a76(r144): [408..409]
 a77(r143): [408..411]
 a78(r233): [412..413]
 a79(r232): [416..417]
 a80(r141): [423..424]
 a81(r231): [425..426]
 a82(r140): [425..428]
 a83(r139): [429..430]
 a84(r138): [429..434]
 a85(r230): [431..432]
 a86(r137): [435..436]
 a87(r136): [435..438]
 a88(r229): [439..440]
 a89(r135): [446..447]
 a90(r228): [448..449]
 a91(r134): [448..451]
 a92(r133): [452..453]
 a93(r132): [452..457]
 a94(r227): [454..455]
 a95(r131): [458..459]
 a96(r130): [458..461]
 a97(r226): [462..463]
 a98(r129): [469..470]
 a99(r225): [471..472]
 a100(r128): [471..474]
 a101(r127): [475..476]
 a102(r126): [475..480]
 a103(r224): [477..478]
 a104(r125): [481..482]
 a105(r124): [481..484]
 a106(r223): [485..486]
 a107(r123): [492..493]
 a108(r122): [494..495]
 a109(r121): [494..499]
 a110(r222): [496..497]
 a111(r120): [500..501]
 a112(r119): [500..503]
 a113(r221): [504..505]
 a114(r118): [511..512]
 a115(r117): [513..514]
 a116(r116): [513..518]
 a117(r220): [515..516]
 a118(r115): [519..520]
 a119(r114): [519..522]
 a120(r219): [523..524]
 a121(r217): [530..533]
 a122(r218): [530..531]
 a123(r216): [538..539]
 a124(r215): [542..543]
 a125(r113): [546..547]
 a126(r112): [552..557]
 a127(r111): [554..559]
 a128(r107): [556..569]
 a129(r110): [560..561]
 a130(r109): [562..563]
 a131(r108): [562..565]
 a132(r214): [566..567]
 a133(r213): [570..571]
 a134(r106): [577..578]
 a135(r212): [579..580]
 a136(r105): [579..582]
 a137(r104): [583..584]
 a138(r103): [583..586]
 a139(r211): [587..588]
 a140(r102): [594..595]
 a141(r210): [596..597]
 a142(r101): [596..599]
 a143(r100): [600..601]
 a144(r99): [600..603]
 a145(r209): [604..605]
 a146(r98): [611..612]
 a147(r208): [613..614]
 a148(r97): [613..616]
 a149(r96): [617..618]
 a150(r95): [617..620]
 a151(r207): [621..622]
 a152(r94): [628..629]
 a153(r93): [630..631]
 a154(r92): [630..633]
 a155(r206): [634..635]
 a156(r91): [641..642]
 a157(r90): [643..644]
 a158(r89): [643..646]
 a159(r205): [647..648]
 a160(r203): [654..657]
 a161(r204): [654..655]
 a162(r202): [662..663]
 a163(r201): [666..667]
 a164(r88): [670..671]
 a165(r87): [676..681]
 a166(r86): [678..683]
 a167(r82): [680..693]
 a168(r85): [684..685]
 a169(r84): [686..687]
 a170(r83): [686..689]
 a171(r200): [690..691]
 a172(r199): [694..695]
 a173(r81): [701..702]
 a174(r198): [703..704]
 a175(r80): [703..706]
 a176(r79): [707..708]
 a177(r78): [707..710]
 a178(r197): [711..712]
 a179(r77): [718..719]
 a180(r196): [720..721]
 a181(r76): [720..723]
 a182(r75): [724..725]
 a183(r74): [724..727]
 a184(r195): [728..729]
 a185(r73): [735..736]
 a186(r194): [737..738]
 a187(r72): [737..740]
 a188(r71): [741..742]
 a189(r70): [741..744]
 a190(r193): [745..746]
 a191(r69): [752..753]
 a192(r68): [754..755]
 a193(r67): [754..757]
 a194(r192): [758..759]
 a195(r66): [765..766]
 a196(r65): [767..768]
 a197(r64): [767..770]
 a198(r191): [771..772]
 a199(r63): [778..779]
 a200(r189): [780..783]
 a201(r190): [780..781]
 a202(r62): [789..790]
 a203(r187): [791..794]
 a204(r188): [791..792]
 a205(r61): [805..806]
 a206(r60): [805..810]
 a207(r186): [807..808]
 a208(r185): [811..812]
 a209(r184): [823..824]
Compressing live ranges: from 838 to 316 - 37%
Ranges after the compression:
 a0(r183): [4..5] [0..1]
 a1(r59): [100..101] [24..25] [6..7] [2..3]
 a2(r268): [8..9]
 a3(r267): [10..11]
 a4(r266): [12..13]
 a5(r265): [14..15]
 a6(r264): [16..17]
 a7(r263): [18..19]
 a8(r262): [20..21]
 a9(r261): [22..23]
 a10(r260): [26..27]
 a11(r259): [28..29]
 a12(r258): [30..31]
 a13(r257): [32..33]
 a14(r256): [34..35]
 a15(r182): [36..37]
 a16(r181): [38..39]
 a17(r180): [40..41]
 a18(r179): [42..43]
 a19(r255): [42..43]
 a20(r178): [44..45]
 a21(r177): [46..47]
 a22(r175): [46..49]
 a23(r254): [46..47]
 a24(r176): [48..49]
 a25(r174): [50..51]
 a26(r173): [52..53]
 a27(r172): [54..55]
 a28(r253): [56..57]
 a29(r252): [58..59]
 a30(r251): [60..61]
 a31(r250): [62..63]
 a32(r171): [64..65]
 a33(r249): [64..65]
 a34(r170): [66..67]
 a35(r169): [68..69]
 a36(r248): [68..69]
 a37(r168): [70..71]
 a38(r167): [72..73]
 a39(r165): [72..75]
 a40(r247): [72..73]
 a41(r166): [74..75]
 a42(r164): [76..77]
 a43(r246): [78..79]
 a44(r245): [80..81]
 a45(r163): [82..83]
 a46(r162): [84..85]
 a47(r244): [84..85]
 a48(r161): [86..87]
 a49(r160): [88..89]
 a50(r243): [88..89]
 a51(r159): [90..91]
 a52(r158): [92..93]
 a53(r156): [92..95]
 a54(r242): [92..93]
 a55(r157): [94..95]
 a56(r155): [96..97]
 a57(r154): [98..99]
 a58(r241): [102..103]
 a59(r153): [104..105]
 a60(r152): [106..107]
 a61(r240): [108..109]
 a62(r151): [110..111]
 a63(r239): [112..113]
 a64(r237): [114..115]
 a65(r238): [114..115]
 a66(r236): [116..117]
 a67(r235): [118..119]
 a68(r150): [120..121]
 a69(r149): [122..123]
 a70(r148): [122..123]
 a71(r142): [122..133]
 a72(r147): [124..125]
 a73(r146): [126..127]
 a74(r145): [126..129]
 a75(r234): [128..129]
 a76(r144): [130..131]
 a77(r143): [130..131]
 a78(r233): [132..133]
 a79(r232): [134..135]
 a80(r141): [136..137]
 a81(r231): [138..139]
 a82(r140): [138..139]
 a83(r139): [140..141]
 a84(r138): [140..143]
 a85(r230): [142..143]
 a86(r137): [144..145]
 a87(r136): [144..145]
 a88(r229): [146..147]
 a89(r135): [148..149]
 a90(r228): [150..151]
 a91(r134): [150..151]
 a92(r133): [152..153]
 a93(r132): [152..155]
 a94(r227): [154..155]
 a95(r131): [156..157]
 a96(r130): [156..157]
 a97(r226): [158..159]
 a98(r129): [160..161]
 a99(r225): [162..163]
 a100(r128): [162..163]
 a101(r127): [164..165]
 a102(r126): [164..167]
 a103(r224): [166..167]
 a104(r125): [168..169]
 a105(r124): [168..169]
 a106(r223): [170..171]
 a107(r123): [172..173]
 a108(r122): [174..175]
 a109(r121): [174..177]
 a110(r222): [176..177]
 a111(r120): [178..179]
 a112(r119): [178..179]
 a113(r221): [180..181]
 a114(r118): [182..183]
 a115(r117): [184..185]
 a116(r116): [184..187]
 a117(r220): [186..187]
 a118(r115): [188..189]
 a119(r114): [188..189]
 a120(r219): [190..191]
 a121(r217): [192..193]
 a122(r218): [192..193]
 a123(r216): [194..195]
 a124(r215): [196..197]
 a125(r113): [198..199]
 a126(r112): [200..201]
 a127(r111): [200..201]
 a128(r107): [200..207]
 a129(r110): [202..203]
 a130(r109): [204..205]
 a131(r108): [204..205]
 a132(r214): [206..207]
 a133(r213): [208..209]
 a134(r106): [210..211]
 a135(r212): [212..213]
 a136(r105): [212..213]
 a137(r104): [214..215]
 a138(r103): [214..215]
 a139(r211): [216..217]
 a140(r102): [218..219]
 a141(r210): [220..221]
 a142(r101): [220..221]
 a143(r100): [222..223]
 a144(r99): [222..223]
 a145(r209): [224..225]
 a146(r98): [226..227]
 a147(r208): [228..229]
 a148(r97): [228..229]
 a149(r96): [230..231]
 a150(r95): [230..231]
 a151(r207): [232..233]
 a152(r94): [234..235]
 a153(r93): [236..237]
 a154(r92): [236..237]
 a155(r206): [238..239]
 a156(r91): [240..241]
 a157(r90): [242..243]
 a158(r89): [242..243]
 a159(r205): [244..245]
 a160(r203): [246..247]
 a161(r204): [246..247]
 a162(r202): [248..249]
 a163(r201): [250..251]
 a164(r88): [252..253]
 a165(r87): [254..255]
 a166(r86): [254..255]
 a167(r82): [254..261]
 a168(r85): [256..257]
 a169(r84): [258..259]
 a170(r83): [258..259]
 a171(r200): [260..261]
 a172(r199): [262..263]
 a173(r81): [264..265]
 a174(r198): [266..267]
 a175(r80): [266..267]
 a176(r79): [268..269]
 a177(r78): [268..269]
 a178(r197): [270..271]
 a179(r77): [272..273]
 a180(r196): [274..275]
 a181(r76): [274..275]
 a182(r75): [276..277]
 a183(r74): [276..277]
 a184(r195): [278..279]
 a185(r73): [280..281]
 a186(r194): [282..283]
 a187(r72): [282..283]
 a188(r71): [284..285]
 a189(r70): [284..285]
 a190(r193): [286..287]
 a191(r69): [288..289]
 a192(r68): [290..291]
 a193(r67): [290..291]
 a194(r192): [292..293]
 a195(r66): [294..295]
 a196(r65): [296..297]
 a197(r64): [296..297]
 a198(r191): [298..299]
 a199(r63): [300..301]
 a200(r189): [302..303]
 a201(r190): [302..303]
 a202(r62): [304..305]
 a203(r187): [306..307]
 a204(r188): [306..307]
 a205(r61): [308..309]
 a206(r60): [308..311]
 a207(r186): [310..311]
 a208(r185): [312..313]
 a209(r184): [314..315]
  regions=4, blocks=54, points=316
    allocnos=210 (big 0), copies=0, conflicts=0, ranges=214
Disposition:
    1:r59  l0     0  206:r60  l0     1  205:r61  l0     0  202:r62  l0     0
  199:r63  l0     0  197:r64  l0     1  196:r65  l0     0  195:r66  l0     0
  193:r67  l0     1  192:r68  l0     0  191:r69  l0     0  189:r70  l0     1
  188:r71  l0     0  187:r72  l0     1  185:r73  l0     0  183:r74  l0     1
  182:r75  l0     0  181:r76  l0     1  179:r77  l0     0  177:r78  l0     1
  176:r79  l0     0  175:r80  l0     1  173:r81  l0     0  167:r82  l0     2
  170:r83  l0     1  169:r84  l0     0  168:r85  l0     0  166:r86  l0     1
  165:r87  l0     0  164:r88  l0     0  158:r89  l0     1  157:r90  l0     0
  156:r91  l0     0  154:r92  l0     1  153:r93  l0     0  152:r94  l0     0
  150:r95  l0     1  149:r96  l0     0  148:r97  l0     1  146:r98  l0     0
  144:r99  l0     1  143:r100 l0     0  142:r101 l0     1  140:r102 l0     0
  138:r103 l0     1  137:r104 l0     0  136:r105 l0     1  134:r106 l0     0
  128:r107 l0     2  131:r108 l0     1  130:r109 l0     0  129:r110 l0     0
  127:r111 l0     1  126:r112 l0     0  125:r113 l0     0  119:r114 l0     1
  118:r115 l0     0  116:r116 l0     1  115:r117 l0     0  114:r118 l0     0
  112:r119 l0     1  111:r120 l0     0  109:r121 l0     1  108:r122 l0     0
  107:r123 l0     0  105:r124 l0     1  104:r125 l0     0  102:r126 l0     1
  101:r127 l0     0  100:r128 l0     1   98:r129 l0     0   96:r130 l0     1
   95:r131 l0     0   93:r132 l0     1   92:r133 l0     0   91:r134 l0     1
   89:r135 l0     0   87:r136 l0     1   86:r137 l0     0   84:r138 l0     1
   83:r139 l0     0   82:r140 l0     1   80:r141 l0     0   71:r142 l0     2
   77:r143 l0     1   76:r144 l0     0   74:r145 l0     1   73:r146 l0     0
   72:r147 l0     0   70:r148 l0     1   69:r149 l0     0   68:r150 l0     0
   62:r151 l0     0   60:r152 l0     0   59:r153 l0     0   57:r154 l0     0
   56:r155 l0     0   53:r156 l0     1   55:r157 l0     0   52:r158 l0     0
   51:r159 l0     0   49:r160 l0     0   48:r161 l0     0   46:r162 l0     0
   45:r163 l0     0   42:r164 l0     0   39:r165 l0     1   41:r166 l0     0
   38:r167 l0     0   37:r168 l0     0   35:r169 l0     0   34:r170 l0     0
   32:r171 l0     0   27:r172 l0     0   26:r173 l0     0   25:r174 l0     0
   22:r175 l0     1   24:r176 l0     0   21:r177 l0     0   20:r178 l0     0
   18:r179 l0     0   17:r180 l0     0   16:r181 l0     0   15:r182 l0     0
    0:r183 l0     0  209:r184 l0     0  208:r185 l0     0  207:r186 l0     0
  203:r187 l0     0  204:r188 l0     1  200:r189 l0     0  201:r190 l0     1
  198:r191 l0     0  194:r192 l0     0  190:r193 l0     0  186:r194 l0     0
  184:r195 l0     0  180:r196 l0     0  178:r197 l0     0  174:r198 l0     0
  172:r199 l0     0  171:r200 l0     0  163:r201 l0     0  162:r202 l0     0
  160:r203 l0     0  161:r204 l0     1  159:r205 l0     0  155:r206 l0     0
  151:r207 l0     0  147:r208 l0     0  145:r209 l0     0  141:r210 l0     0
  139:r211 l0     0  135:r212 l0     0  133:r213 l0     0  132:r214 l0     0
  124:r215 l0     0  123:r216 l0     0  121:r217 l0     0  122:r218 l0     1
  120:r219 l0     0  117:r220 l0     0  113:r221 l0     0  110:r222 l0     0
  106:r223 l0     0  103:r224 l0     0   99:r225 l0     0   97:r226 l0     0
   94:r227 l0     0   90:r228 l0     0   88:r229 l0     0   85:r230 l0     0
   81:r231 l0     0   79:r232 l0     0   78:r233 l0     0   75:r234 l0     0
   67:r235 l0     0   66:r236 l0     0   64:r237 l0     0   65:r238 l0     1
   63:r239 l0     0   61:r240 l0     0   58:r241 l0     0   54:r242 l0     2
   50:r243 l0     1   47:r244 l0     1   44:r245 l0     0   43:r246 l0     0
   40:r247 l0     2   36:r248 l0     1   33:r249 l0     1   31:r250 l0     0
   30:r251 l0     0   29:r252 l0     0   28:r253 l0     0   23:r254 l0     2
   19:r255 l0     1   14:r256 l0     0   13:r257 l0     0   12:r258 l0     0
   11:r259 l0     0   10:r260 l0     0    9:r261 l0     0    8:r262 l0     0
    7:r263 l0     0    6:r264 l0     0    5:r265 l0     0    4:r266 l0     0
    3:r267 l0     0    2:r268 l0     0
+++Costs: overall -10, reg -10, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=8, live_throughout: 7, dead_or_set: 
insn=486, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 184
insn=13, live_throughout: 7, dead_or_set: 184
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 
insn=19, live_throughout: 7, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 185
insn=22, live_throughout: 7, dead_or_set: 60, 185
insn=23, live_throughout: 7, 60, dead_or_set: 186
insn=24, live_throughout: 7, 60, dead_or_set: 61, 186
insn=25, live_throughout: 7, dead_or_set: 60, 61
insn=26, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 
insn=488, live_throughout: 7, dead_or_set: 
insn=266, live_throughout: 7, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 187
insn=33, live_throughout: 7, 187, dead_or_set: 188
insn=34, live_throughout: 7, dead_or_set: 62, 187, 188
insn=35, live_throughout: 7, dead_or_set: 62
insn=36, live_throughout: 7, dead_or_set: 
insn=38, live_throughout: 7, dead_or_set: 189
insn=39, live_throughout: 7, 189, dead_or_set: 190
insn=40, live_throughout: 7, dead_or_set: 63, 189, 190
insn=41, live_throughout: 7, dead_or_set: 63
insn=42, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 191
insn=45, live_throughout: 7, dead_or_set: 64, 191
insn=46, live_throughout: 7, 64, dead_or_set: 65
insn=47, live_throughout: 7, dead_or_set: 64, 65, 66
insn=48, live_throughout: 7, dead_or_set: 66
insn=49, live_throughout: 7, dead_or_set: 
insn=51, live_throughout: 7, dead_or_set: 192
insn=52, live_throughout: 7, dead_or_set: 67, 192
insn=53, live_throughout: 7, 67, dead_or_set: 68
insn=54, live_throughout: 7, dead_or_set: 67, 68, 69
insn=55, live_throughout: 7, dead_or_set: 69
insn=56, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 193
insn=59, live_throughout: 7, dead_or_set: 70, 193
insn=60, live_throughout: 7, 70, dead_or_set: 71
insn=61, live_throughout: 7, dead_or_set: 70, 71, 72
insn=62, live_throughout: 7, 72, dead_or_set: 194
insn=63, live_throughout: 7, dead_or_set: 72, 73, 194
insn=64, live_throughout: 7, dead_or_set: 73
insn=65, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 195
insn=68, live_throughout: 7, dead_or_set: 74, 195
insn=69, live_throughout: 7, 74, dead_or_set: 75
insn=70, live_throughout: 7, dead_or_set: 74, 75, 76
insn=71, live_throughout: 7, 76, dead_or_set: 196
insn=72, live_throughout: 7, dead_or_set: 76, 77, 196
insn=73, live_throughout: 7, dead_or_set: 77
insn=74, live_throughout: 7, dead_or_set: 
insn=76, live_throughout: 7, dead_or_set: 197
insn=77, live_throughout: 7, dead_or_set: 78, 197
insn=78, live_throughout: 7, 78, dead_or_set: 79
insn=79, live_throughout: 7, dead_or_set: 78, 79, 80
insn=80, live_throughout: 7, 80, dead_or_set: 198
insn=81, live_throughout: 7, dead_or_set: 80, 81, 198
insn=82, live_throughout: 7, dead_or_set: 81
insn=83, live_throughout: 7, dead_or_set: 
insn=84, live_throughout: 7, dead_or_set: 
insn=86, live_throughout: 7, dead_or_set: 199
insn=87, live_throughout: 7, dead_or_set: 82, 199
insn=88, live_throughout: 7, 82, dead_or_set: 200
insn=89, live_throughout: 7, 82, dead_or_set: 83, 200
insn=90, live_throughout: 7, 82, 83, dead_or_set: 84
insn=91, live_throughout: 7, 82, dead_or_set: 83, 84, 85
insn=92, live_throughout: 7, 82, dead_or_set: 85, 86
insn=93, live_throughout: 7, 82, 86, dead_or_set: 87
insn=94, live_throughout: 7, 86, 87, dead_or_set: 82
insn=95, live_throughout: 7, 87, dead_or_set: 86
insn=96, live_throughout: 7, dead_or_set: 87
insn=97, live_throughout: 7, dead_or_set: 0
insn=98, live_throughout: 7, dead_or_set: 88
insn=99, live_throughout: 7, dead_or_set: 88
insn=100, live_throughout: 7, dead_or_set: 201
insn=101, live_throughout: 7, dead_or_set: 201
insn=102, live_throughout: 7, dead_or_set: 202
insn=103, live_throughout: 7, dead_or_set: 202
insn=104, live_throughout: 7, dead_or_set: 
insn=105, live_throughout: 7, dead_or_set: 203
insn=106, live_throughout: 7, 203, dead_or_set: 204
insn=107, live_throughout: 7, dead_or_set: 203, 204
insn=108, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 
insn=111, live_throughout: 7, dead_or_set: 205
insn=112, live_throughout: 7, dead_or_set: 89, 205
insn=113, live_throughout: 7, 89, dead_or_set: 90
insn=114, live_throughout: 7, dead_or_set: 89, 90, 91
insn=115, live_throughout: 7, dead_or_set: 91
insn=116, live_throughout: 7, dead_or_set: 
insn=118, live_throughout: 7, dead_or_set: 206
insn=119, live_throughout: 7, dead_or_set: 92, 206
insn=120, live_throughout: 7, 92, dead_or_set: 93
insn=121, live_throughout: 7, dead_or_set: 92, 93, 94
insn=122, live_throughout: 7, dead_or_set: 94
insn=123, live_throughout: 7, dead_or_set: 
insn=125, live_throughout: 7, dead_or_set: 207
insn=126, live_throughout: 7, dead_or_set: 95, 207
insn=127, live_throughout: 7, 95, dead_or_set: 96
insn=128, live_throughout: 7, dead_or_set: 95, 96, 97
insn=129, live_throughout: 7, 97, dead_or_set: 208
insn=130, live_throughout: 7, dead_or_set: 97, 98, 208
insn=131, live_throughout: 7, dead_or_set: 98
insn=132, live_throughout: 7, dead_or_set: 
insn=134, live_throughout: 7, dead_or_set: 209
insn=135, live_throughout: 7, dead_or_set: 99, 209
insn=136, live_throughout: 7, 99, dead_or_set: 100
insn=137, live_throughout: 7, dead_or_set: 99, 100, 101
insn=138, live_throughout: 7, 101, dead_or_set: 210
insn=139, live_throughout: 7, dead_or_set: 101, 102, 210
insn=140, live_throughout: 7, dead_or_set: 102
insn=141, live_throughout: 7, dead_or_set: 
insn=143, live_throughout: 7, dead_or_set: 211
insn=144, live_throughout: 7, dead_or_set: 103, 211
insn=145, live_throughout: 7, 103, dead_or_set: 104
insn=146, live_throughout: 7, dead_or_set: 103, 104, 105
insn=147, live_throughout: 7, 105, dead_or_set: 212
insn=148, live_throughout: 7, dead_or_set: 105, 106, 212
insn=149, live_throughout: 7, dead_or_set: 106
insn=150, live_throughout: 7, dead_or_set: 
insn=151, live_throughout: 7, dead_or_set: 
insn=153, live_throughout: 7, dead_or_set: 213
insn=154, live_throughout: 7, dead_or_set: 107, 213
insn=155, live_throughout: 7, 107, dead_or_set: 214
insn=156, live_throughout: 7, 107, dead_or_set: 108, 214
insn=157, live_throughout: 7, 107, 108, dead_or_set: 109
insn=158, live_throughout: 7, 107, dead_or_set: 108, 109, 110
insn=159, live_throughout: 7, 107, dead_or_set: 110, 111
insn=160, live_throughout: 7, 107, 111, dead_or_set: 112
insn=161, live_throughout: 7, 111, 112, dead_or_set: 107
insn=162, live_throughout: 7, 112, dead_or_set: 111
insn=163, live_throughout: 7, dead_or_set: 112
insn=164, live_throughout: 7, dead_or_set: 0
insn=165, live_throughout: 7, dead_or_set: 113
insn=166, live_throughout: 7, dead_or_set: 113
insn=167, live_throughout: 7, dead_or_set: 215
insn=168, live_throughout: 7, dead_or_set: 215
insn=169, live_throughout: 7, dead_or_set: 216
insn=170, live_throughout: 7, dead_or_set: 216
insn=171, live_throughout: 7, dead_or_set: 
insn=172, live_throughout: 7, dead_or_set: 217
insn=173, live_throughout: 7, 217, dead_or_set: 218
insn=174, live_throughout: 7, dead_or_set: 217, 218
insn=175, live_throughout: 7, dead_or_set: 
insn=176, live_throughout: 7, dead_or_set: 
insn=178, live_throughout: 7, dead_or_set: 219
insn=179, live_throughout: 7, dead_or_set: 114, 219
insn=180, live_throughout: 7, 114, dead_or_set: 115
insn=181, live_throughout: 7, dead_or_set: 114, 115, 116
insn=182, live_throughout: 7, 116, dead_or_set: 220
insn=183, live_throughout: 7, 116, dead_or_set: 117, 220
insn=184, live_throughout: 7, dead_or_set: 116, 117, 118
insn=185, live_throughout: 7, dead_or_set: 118
insn=186, live_throughout: 7, dead_or_set: 
insn=188, live_throughout: 7, dead_or_set: 221
insn=189, live_throughout: 7, dead_or_set: 119, 221
insn=190, live_throughout: 7, 119, dead_or_set: 120
insn=191, live_throughout: 7, dead_or_set: 119, 120, 121
insn=192, live_throughout: 7, 121, dead_or_set: 222
insn=193, live_throughout: 7, 121, dead_or_set: 122, 222
insn=194, live_throughout: 7, dead_or_set: 121, 122, 123
insn=195, live_throughout: 7, dead_or_set: 123
insn=196, live_throughout: 7, dead_or_set: 
insn=198, live_throughout: 7, dead_or_set: 223
insn=199, live_throughout: 7, dead_or_set: 124, 223
insn=200, live_throughout: 7, 124, dead_or_set: 125
insn=201, live_throughout: 7, dead_or_set: 124, 125, 126
insn=202, live_throughout: 7, 126, dead_or_set: 224
insn=203, live_throughout: 7, 126, dead_or_set: 127, 224
insn=204, live_throughout: 7, dead_or_set: 126, 127, 128
insn=205, live_throughout: 7, 128, dead_or_set: 225
insn=206, live_throughout: 7, dead_or_set: 128, 129, 225
insn=207, live_throughout: 7, dead_or_set: 129
insn=208, live_throughout: 7, dead_or_set: 
insn=210, live_throughout: 7, dead_or_set: 226
insn=211, live_throughout: 7, dead_or_set: 130, 226
insn=212, live_throughout: 7, 130, dead_or_set: 131
insn=213, live_throughout: 7, dead_or_set: 130, 131, 132
insn=214, live_throughout: 7, 132, dead_or_set: 227
insn=215, live_throughout: 7, 132, dead_or_set: 133, 227
insn=216, live_throughout: 7, dead_or_set: 132, 133, 134
insn=217, live_throughout: 7, 134, dead_or_set: 228
insn=218, live_throughout: 7, dead_or_set: 134, 135, 228
insn=219, live_throughout: 7, dead_or_set: 135
insn=220, live_throughout: 7, dead_or_set: 
insn=222, live_throughout: 7, dead_or_set: 229
insn=223, live_throughout: 7, dead_or_set: 136, 229
insn=224, live_throughout: 7, 136, dead_or_set: 137
insn=225, live_throughout: 7, dead_or_set: 136, 137, 138
insn=226, live_throughout: 7, 138, dead_or_set: 230
insn=227, live_throughout: 7, 138, dead_or_set: 139, 230
insn=228, live_throughout: 7, dead_or_set: 138, 139, 140
insn=229, live_throughout: 7, 140, dead_or_set: 231
insn=230, live_throughout: 7, dead_or_set: 140, 141, 231
insn=231, live_throughout: 7, dead_or_set: 141
insn=232, live_throughout: 7, dead_or_set: 
insn=233, live_throughout: 7, dead_or_set: 
insn=235, live_throughout: 7, dead_or_set: 232
insn=236, live_throughout: 7, dead_or_set: 142, 232
insn=237, live_throughout: 7, 142, dead_or_set: 233
insn=238, live_throughout: 7, 142, dead_or_set: 143, 233
insn=239, live_throughout: 7, 142, 143, dead_or_set: 144
insn=240, live_throughout: 7, 142, dead_or_set: 143, 144, 145
insn=241, live_throughout: 7, 142, 145, dead_or_set: 234
insn=242, live_throughout: 7, 142, 145, dead_or_set: 146, 234
insn=243, live_throughout: 7, 142, dead_or_set: 145, 146, 147
insn=244, live_throughout: 7, 142, dead_or_set: 147, 148
insn=245, live_throughout: 7, 142, 148, dead_or_set: 149
insn=246, live_throughout: 7, 148, 149, dead_or_set: 142
insn=247, live_throughout: 7, 149, dead_or_set: 148
insn=248, live_throughout: 7, dead_or_set: 149
insn=249, live_throughout: 7, dead_or_set: 0
insn=250, live_throughout: 7, dead_or_set: 150
insn=251, live_throughout: 7, dead_or_set: 150
insn=252, live_throughout: 7, dead_or_set: 235
insn=253, live_throughout: 7, dead_or_set: 235
insn=254, live_throughout: 7, dead_or_set: 236
insn=255, live_throughout: 7, dead_or_set: 236
insn=256, live_throughout: 7, dead_or_set: 
insn=257, live_throughout: 7, dead_or_set: 237
insn=258, live_throughout: 7, 237, dead_or_set: 238
insn=259, live_throughout: 7, dead_or_set: 237, 238
insn=260, live_throughout: 7, dead_or_set: 
insn=261, live_throughout: 7, dead_or_set: 
insn=263, live_throughout: 7, dead_or_set: 
insn=264, live_throughout: 7, dead_or_set: 
insn=267, live_throughout: 7, dead_or_set: 
insn=268, live_throughout: 7, dead_or_set: 
insn=270, live_throughout: 7, dead_or_set: 239
insn=271, live_throughout: 7, dead_or_set: 151, 239
insn=272, live_throughout: 7, dead_or_set: 151
insn=273, live_throughout: 7, dead_or_set: 0
insn=463, live_throughout: 7, dead_or_set: 
insn=275, live_throughout: 7, dead_or_set: 240
insn=276, live_throughout: 7, dead_or_set: 240
insn=277, live_throughout: 7, dead_or_set: 0
insn=278, live_throughout: 7, dead_or_set: 152
insn=279, live_throughout: 7, dead_or_set: 152, 153
insn=280, live_throughout: 7, 153, dead_or_set: 
insn=281, live_throughout: 7, 153, dead_or_set: 
insn=282, live_throughout: 7, dead_or_set: 153
insn=283, live_throughout: 7, dead_or_set: 
insn=286, live_throughout: 7, dead_or_set: 
insn=288, live_throughout: 7, dead_or_set: 
insn=289, live_throughout: 7, dead_or_set: 
insn=291, live_throughout: 7, dead_or_set: 241
insn=292, live_throughout: 7, dead_or_set: 241
insn=293, live_throughout: 7, dead_or_set: 
insn=294, live_throughout: 7, dead_or_set: 
insn=296, live_throughout: 7, dead_or_set: 59
insn=490, live_throughout: 7, 59, dead_or_set: 
insn=299, live_throughout: 7, dead_or_set: 
insn=301, live_throughout: 7, dead_or_set: 154
insn=302, live_throughout: 7, dead_or_set: 154
insn=303, live_throughout: 7, dead_or_set: 
insn=305, live_throughout: 7, dead_or_set: 155
insn=306, live_throughout: 7, dead_or_set: 155, 156
insn=307, live_throughout: 7, 156, dead_or_set: 157
insn=308, live_throughout: 7, 156, dead_or_set: 157, 158
insn=309, live_throughout: 7, 156, 158, dead_or_set: 242
insn=310, live_throughout: 7, 156, 158, dead_or_set: 242
insn=311, live_throughout: 7, 158, dead_or_set: 156
insn=312, live_throughout: 7, dead_or_set: 158
insn=313, live_throughout: 7, dead_or_set: 0
insn=314, live_throughout: 7, dead_or_set: 0, 159
insn=315, live_throughout: 7, dead_or_set: 159
insn=316, live_throughout: 7, dead_or_set: 
insn=318, live_throughout: 7, dead_or_set: 160
insn=319, live_throughout: 7, 160, dead_or_set: 243
insn=320, live_throughout: 7, 160, dead_or_set: 243
insn=321, live_throughout: 7, dead_or_set: 160
insn=322, live_throughout: 7, dead_or_set: 0
insn=323, live_throughout: 7, dead_or_set: 0, 161
insn=324, live_throughout: 7, dead_or_set: 161
insn=325, live_throughout: 7, dead_or_set: 
insn=327, live_throughout: 7, dead_or_set: 
insn=328, live_throughout: 7, dead_or_set: 
insn=330, live_throughout: 7, dead_or_set: 162
insn=331, live_throughout: 7, 162, dead_or_set: 244
insn=332, live_throughout: 7, 162, dead_or_set: 244
insn=333, live_throughout: 7, dead_or_set: 162
insn=334, live_throughout: 7, dead_or_set: 0
insn=335, live_throughout: 7, dead_or_set: 0, 163
insn=336, live_throughout: 7, dead_or_set: 163
insn=337, live_throughout: 7, dead_or_set: 
insn=339, live_throughout: 7, dead_or_set: 
insn=340, live_throughout: 7, dead_or_set: 245
insn=341, live_throughout: 7, dead_or_set: 245, 246
insn=342, live_throughout: 7, dead_or_set: 246
insn=343, live_throughout: 7, dead_or_set: 
insn=345, live_throughout: 7, dead_or_set: 
insn=346, live_throughout: 7, dead_or_set: 
insn=348, live_throughout: 7, dead_or_set: 164
insn=349, live_throughout: 7, dead_or_set: 164, 165
insn=350, live_throughout: 7, 165, dead_or_set: 166
insn=351, live_throughout: 7, 165, dead_or_set: 166, 167
insn=352, live_throughout: 7, 165, 167, dead_or_set: 247
insn=353, live_throughout: 7, 165, 167, dead_or_set: 247
insn=354, live_throughout: 7, 167, dead_or_set: 165
insn=355, live_throughout: 7, dead_or_set: 167
insn=356, live_throughout: 7, dead_or_set: 0
insn=357, live_throughout: 7, dead_or_set: 0, 168
insn=358, live_throughout: 7, dead_or_set: 168
insn=359, live_throughout: 7, dead_or_set: 
insn=361, live_throughout: 7, dead_or_set: 169
insn=362, live_throughout: 7, 169, dead_or_set: 248
insn=363, live_throughout: 7, 169, dead_or_set: 248
insn=364, live_throughout: 7, dead_or_set: 169
insn=365, live_throughout: 7, dead_or_set: 0
insn=366, live_throughout: 7, dead_or_set: 0, 170
insn=367, live_throughout: 7, dead_or_set: 170
insn=368, live_throughout: 7, dead_or_set: 
insn=370, live_throughout: 7, dead_or_set: 171
insn=371, live_throughout: 7, 171, dead_or_set: 249
insn=372, live_throughout: 7, 171, dead_or_set: 249
insn=373, live_throughout: 7, dead_or_set: 171
insn=374, live_throughout: 7, dead_or_set: 250
insn=375, live_throughout: 7, dead_or_set: 250
insn=376, live_throughout: 7, dead_or_set: 251
insn=377, live_throughout: 7, dead_or_set: 251
insn=378, live_throughout: 7, dead_or_set: 252
insn=379, live_throughout: 7, dead_or_set: 252
insn=380, live_throughout: 7, dead_or_set: 0
insn=381, live_throughout: 7, dead_or_set: 0, 253
insn=382, live_throughout: 7, dead_or_set: 253
insn=383, live_throughout: 7, dead_or_set: 
insn=384, live_throughout: 7, dead_or_set: 172
insn=385, live_throughout: 7, dead_or_set: 172, 173
insn=386, live_throughout: 7, dead_or_set: 173
insn=492, live_throughout: 7, dead_or_set: 
insn=389, live_throughout: 7, dead_or_set: 
insn=391, live_throughout: 7, dead_or_set: 174
insn=392, live_throughout: 7, dead_or_set: 174, 175
insn=393, live_throughout: 7, 175, dead_or_set: 176
insn=394, live_throughout: 7, 175, dead_or_set: 176, 177
insn=395, live_throughout: 7, 175, 177, dead_or_set: 254
insn=396, live_throughout: 7, 175, 177, dead_or_set: 254
insn=397, live_throughout: 7, 177, dead_or_set: 175
insn=398, live_throughout: 7, dead_or_set: 177
insn=399, live_throughout: 7, dead_or_set: 0
insn=400, live_throughout: 7, dead_or_set: 0, 178
insn=401, live_throughout: 7, dead_or_set: 178
insn=402, live_throughout: 7, dead_or_set: 
insn=404, live_throughout: 7, dead_or_set: 
insn=405, live_throughout: 7, dead_or_set: 0
insn=406, live_throughout: 7, dead_or_set: 179
insn=407, live_throughout: 7, 179, dead_or_set: 255
insn=408, live_throughout: 7, 179, dead_or_set: 255
insn=409, live_throughout: 7, dead_or_set: 179
insn=410, live_throughout: 7, dead_or_set: 0
insn=411, live_throughout: 7, dead_or_set: 0, 180
insn=412, live_throughout: 7, dead_or_set: 180
insn=413, live_throughout: 7, dead_or_set: 
insn=415, live_throughout: 7, dead_or_set: 
insn=416, live_throughout: 7, dead_or_set: 0
insn=417, live_throughout: 7, dead_or_set: 181
insn=418, live_throughout: 7, dead_or_set: 181, 182
insn=419, live_throughout: 7, dead_or_set: 182
insn=420, live_throughout: 7, dead_or_set: 256
insn=421, live_throughout: 7, dead_or_set: 256
insn=422, live_throughout: 7, dead_or_set: 
insn=423, live_throughout: 7, dead_or_set: 257
insn=424, live_throughout: 7, dead_or_set: 257
insn=425, live_throughout: 7, dead_or_set: 258
insn=426, live_throughout: 7, dead_or_set: 258
insn=427, live_throughout: 7, dead_or_set: 259
insn=428, live_throughout: 7, dead_or_set: 259
insn=429, live_throughout: 7, dead_or_set: 260
insn=430, live_throughout: 7, dead_or_set: 260
insn=431, live_throughout: 7, dead_or_set: 
insn=432, live_throughout: 7, dead_or_set: 59
insn=494, live_throughout: 7, 59, dead_or_set: 
insn=435, live_throughout: 7, dead_or_set: 
insn=437, live_throughout: 7, dead_or_set: 261
insn=438, live_throughout: 7, dead_or_set: 261
insn=439, live_throughout: 7, dead_or_set: 
insn=440, live_throughout: 7, dead_or_set: 262
insn=441, live_throughout: 7, dead_or_set: 262
insn=442, live_throughout: 7, dead_or_set: 263
insn=443, live_throughout: 7, dead_or_set: 263
insn=444, live_throughout: 7, dead_or_set: 264
insn=445, live_throughout: 7, dead_or_set: 264
insn=446, live_throughout: 7, dead_or_set: 
insn=447, live_throughout: 7, dead_or_set: 265
insn=448, live_throughout: 7, dead_or_set: 265
insn=449, live_throughout: 7, dead_or_set: 266
insn=450, live_throughout: 7, dead_or_set: 266
insn=451, live_throughout: 7, dead_or_set: 267
insn=452, live_throughout: 7, dead_or_set: 267
insn=453, live_throughout: 7, dead_or_set: 268
insn=454, live_throughout: 7, dead_or_set: 268
insn=455, live_throughout: 7, dead_or_set: 0
insn=456, live_throughout: 7, dead_or_set: 0, 59
insn=496, live_throughout: 7, 59, dead_or_set: 
insn=503, live_throughout: 7, dead_or_set: 
insn=504, live_throughout: 7, dead_or_set: 
insn=461, live_throughout: 7, dead_or_set: 
insn=498, live_throughout: 7, dead_or_set: 
insn=466, live_throughout: 7, dead_or_set: 
insn=468, live_throughout: 7, dead_or_set: 0
insn=469, live_throughout: 7, dead_or_set: 183
insn=500, live_throughout: 7, 183, dead_or_set: 
insn=472, live_throughout: 7, 59, dead_or_set: 
insn=474, live_throughout: 7, dead_or_set: 59, 183
insn=477, live_throughout: 7, 183, dead_or_set: 
insn=478, live_throughout: 7, dead_or_set: 0, 183
insn=481, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 456
changing reg in insn 432
changing reg in insn 296
changing reg in insn 474
changing reg in insn 22
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 34
changing reg in insn 35
changing reg in insn 40
changing reg in insn 41
changing reg in insn 45
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 47
changing reg in insn 48
changing reg in insn 52
changing reg in insn 54
changing reg in insn 53
changing reg in insn 54
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 63
changing reg in insn 63
changing reg in insn 64
changing reg in insn 68
changing reg in insn 70
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 77
changing reg in insn 79
changing reg in insn 78
changing reg in insn 79
changing reg in insn 79
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 87
changing reg in insn 94
changing reg in insn 89
changing reg in insn 91
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 95
changing reg in insn 93
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 112
changing reg in insn 114
changing reg in insn 113
changing reg in insn 114
changing reg in insn 114
changing reg in insn 115
changing reg in insn 119
changing reg in insn 121
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 126
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 128
changing reg in insn 130
changing reg in insn 130
changing reg in insn 131
changing reg in insn 135
changing reg in insn 137
changing reg in insn 136
changing reg in insn 137
changing reg in insn 137
changing reg in insn 139
changing reg in insn 139
changing reg in insn 140
changing reg in insn 144
changing reg in insn 146
changing reg in insn 145
changing reg in insn 146
changing reg in insn 146
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 154
changing reg in insn 161
changing reg in insn 156
changing reg in insn 158
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 159
changing reg in insn 159
changing reg in insn 162
changing reg in insn 160
changing reg in insn 163
changing reg in insn 165
changing reg in insn 166
changing reg in insn 179
changing reg in insn 181
changing reg in insn 180
changing reg in insn 181
changing reg in insn 181
changing reg in insn 184
changing reg in insn 183
changing reg in insn 184
changing reg in insn 184
changing reg in insn 185
changing reg in insn 189
changing reg in insn 191
changing reg in insn 190
changing reg in insn 191
changing reg in insn 191
changing reg in insn 194
changing reg in insn 193
changing reg in insn 194
changing reg in insn 194
changing reg in insn 195
changing reg in insn 199
changing reg in insn 201
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 204
changing reg in insn 203
changing reg in insn 204
changing reg in insn 204
changing reg in insn 206
changing reg in insn 206
changing reg in insn 207
changing reg in insn 211
changing reg in insn 213
changing reg in insn 212
changing reg in insn 213
changing reg in insn 213
changing reg in insn 216
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 223
changing reg in insn 225
changing reg in insn 224
changing reg in insn 225
changing reg in insn 225
changing reg in insn 228
changing reg in insn 227
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 236
changing reg in insn 246
changing reg in insn 238
changing reg in insn 240
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 243
changing reg in insn 242
changing reg in insn 243
changing reg in insn 243
changing reg in insn 244
changing reg in insn 244
changing reg in insn 247
changing reg in insn 245
changing reg in insn 248
changing reg in insn 250
changing reg in insn 251
changing reg in insn 271
changing reg in insn 272
changing reg in insn 278
changing reg in insn 279
changing reg in insn 279
changing reg in insn 282
changing reg in insn 280
changing reg in insn 301
changing reg in insn 302
changing reg in insn 305
changing reg in insn 306
changing reg in insn 306
changing reg in insn 311
changing reg in insn 307
changing reg in insn 308
changing reg in insn 308
changing reg in insn 312
changing reg in insn 314
changing reg in insn 315
changing reg in insn 318
changing reg in insn 321
changing reg in insn 323
changing reg in insn 324
changing reg in insn 330
changing reg in insn 333
changing reg in insn 335
changing reg in insn 336
changing reg in insn 348
changing reg in insn 349
changing reg in insn 349
changing reg in insn 354
changing reg in insn 350
changing reg in insn 351
changing reg in insn 351
changing reg in insn 355
changing reg in insn 357
changing reg in insn 358
changing reg in insn 361
changing reg in insn 364
changing reg in insn 366
changing reg in insn 367
changing reg in insn 370
changing reg in insn 373
changing reg in insn 384
changing reg in insn 385
changing reg in insn 385
changing reg in insn 386
changing reg in insn 391
changing reg in insn 392
changing reg in insn 392
changing reg in insn 397
changing reg in insn 393
changing reg in insn 394
changing reg in insn 394
changing reg in insn 398
changing reg in insn 400
changing reg in insn 401
changing reg in insn 406
changing reg in insn 409
changing reg in insn 411
changing reg in insn 412
changing reg in insn 417
changing reg in insn 418
changing reg in insn 418
changing reg in insn 419
changing reg in insn 474
changing reg in insn 469
changing reg in insn 478
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 32
changing reg in insn 34
changing reg in insn 33
changing reg in insn 34
changing reg in insn 38
changing reg in insn 40
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 45
changing reg in insn 51
changing reg in insn 52
changing reg in insn 58
changing reg in insn 59
changing reg in insn 62
changing reg in insn 63
changing reg in insn 67
changing reg in insn 68
changing reg in insn 71
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 81
changing reg in insn 86
changing reg in insn 87
changing reg in insn 88
changing reg in insn 89
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 105
changing reg in insn 107
changing reg in insn 106
changing reg in insn 107
changing reg in insn 111
changing reg in insn 112
changing reg in insn 118
changing reg in insn 119
changing reg in insn 125
changing reg in insn 126
changing reg in insn 129
changing reg in insn 130
changing reg in insn 134
changing reg in insn 135
changing reg in insn 138
changing reg in insn 139
changing reg in insn 143
changing reg in insn 144
changing reg in insn 147
changing reg in insn 148
changing reg in insn 153
changing reg in insn 154
changing reg in insn 155
changing reg in insn 156
changing reg in insn 167
changing reg in insn 168
changing reg in insn 169
changing reg in insn 170
changing reg in insn 172
changing reg in insn 174
changing reg in insn 173
changing reg in insn 174
changing reg in insn 178
changing reg in insn 179
changing reg in insn 182
changing reg in insn 183
changing reg in insn 188
changing reg in insn 189
changing reg in insn 192
changing reg in insn 193
changing reg in insn 198
changing reg in insn 199
changing reg in insn 202
changing reg in insn 203
changing reg in insn 205
changing reg in insn 206
changing reg in insn 210
changing reg in insn 211
changing reg in insn 214
changing reg in insn 215
changing reg in insn 217
changing reg in insn 218
changing reg in insn 222
changing reg in insn 223
changing reg in insn 226
changing reg in insn 227
changing reg in insn 229
changing reg in insn 230
changing reg in insn 235
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 241
changing reg in insn 242
changing reg in insn 252
changing reg in insn 253
changing reg in insn 254
changing reg in insn 255
changing reg in insn 257
changing reg in insn 259
changing reg in insn 258
changing reg in insn 259
changing reg in insn 270
changing reg in insn 271
changing reg in insn 275
changing reg in insn 276
changing reg in insn 291
changing reg in insn 292
changing reg in insn 309
changing reg in insn 310
changing reg in insn 319
changing reg in insn 320
changing reg in insn 331
changing reg in insn 332
changing reg in insn 340
changing reg in insn 341
changing reg in insn 341
changing reg in insn 342
changing reg in insn 352
changing reg in insn 353
changing reg in insn 362
changing reg in insn 363
changing reg in insn 371
changing reg in insn 372
changing reg in insn 374
changing reg in insn 375
changing reg in insn 376
changing reg in insn 377
changing reg in insn 378
changing reg in insn 379
changing reg in insn 381
changing reg in insn 382
changing reg in insn 395
changing reg in insn 396
changing reg in insn 407
changing reg in insn 408
changing reg in insn 420
changing reg in insn 421
changing reg in insn 423
changing reg in insn 424
changing reg in insn 425
changing reg in insn 426
changing reg in insn 427
changing reg in insn 428
changing reg in insn 429
changing reg in insn 430
changing reg in insn 437
changing reg in insn 438
changing reg in insn 440
changing reg in insn 441
changing reg in insn 442
changing reg in insn 443
changing reg in insn 444
changing reg in insn 445
changing reg in insn 447
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 451
changing reg in insn 452
changing reg in insn 453
changing reg in insn 454
deleting insn with uid = 314.
deleting insn with uid = 323.
deleting insn with uid = 335.
deleting insn with uid = 357.
deleting insn with uid = 366.
deleting insn with uid = 381.
deleting insn with uid = 400.
deleting insn with uid = 411.
deleting insn with uid = 456.
deleting insn with uid = 469.
deleting insn with uid = 474.
deleting insn with uid = 478.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 249.
verify found no changes in insn with uid = 256.
verify found no changes in insn with uid = 273.
verify found no changes in insn with uid = 277.
verify found no changes in insn with uid = 293.
verify found no changes in insn with uid = 313.
verify found no changes in insn with uid = 322.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 356.
verify found no changes in insn with uid = 365.
verify found no changes in insn with uid = 380.
verify found no changes in insn with uid = 399.
verify found no changes in insn with uid = 405.
verify found no changes in insn with uid = 410.
verify found no changes in insn with uid = 416.
verify found no changes in insn with uid = 422.
verify found no changes in insn with uid = 431.
verify found no changes in insn with uid = 439.
verify found no changes in insn with uid = 446.
verify found no changes in insn with uid = 455.


Display_CheckersPossibilities

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={172d,155u} r1={75d,50u} r2={31d,6u} r6={1d,205u} r7={1d,135u} r8={24d} r9={24d} r10={24d} r11={24d} r12={24d} r13={24d} r14={24d} r15={24d} r17={104d,34u} r18={24d} r19={24d} r20={1d,1u,10e} r21={24d} r22={24d} r23={24d} r24={24d} r25={24d} r26={24d} r27={24d} r28={24d} r29={24d} r30={24d} r31={24d} r32={24d} r33={24d} r34={24d} r35={24d} r36={24d} r37={24d} r38={24d} r39={24d} r40={24d} r41={24d} r42={24d} r43={24d} r44={24d} r45={24d} r46={24d} r47={24d} r48={24d} r49={24d} r50={24d} r51={24d} r52={24d} 
;;    total ref usage 1989{1393d,586u,10e} in 381{357 regular + 24 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:759 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
        (const_int 0 [0])) src/gui.c:762 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
        (const_int 0 [0])) src/gui.c:763 64 {*movsi_internal}
     (nil))

(insn 8 7 486 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:764 64 {*movsi_internal}
     (nil))

(jump_insn 486 8 487 2 (set (pc)
        (label_ref 15)) src/gui.c:764 606 {jump}
     (nil)
 -> 15)
;; End of basic block 2 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 [100.0%] 

(barrier 487 486 17)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 184

;; Pred edge  4
(code_label 17 487 11 3 152 "" [1 uses])

(note 11 17 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 (set (reg:SI 0 ax [184])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])) src/gui.c:764 64 {*movsi_internal}
     (nil))

(insn 13 12 14 3 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [184])
                        (const_int 4 [0x4]))
                    (reg/f:SI 6 bp))
                (const_int -176 [0xffffffffffffff50])) [0 tab S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:764 64 {*movsi_internal}
     (nil))

(insn 14 13 15 3 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:764 252 {*addsi_1}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 15 14 16 4 151 "" [1 uses])

(note 16 15 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 16 19 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 i+0 S4 A32])
            (const_int 27 [0x1b]))) src/gui.c:764 6 {*cmpsi_1}
     (nil))

(jump_insn 19 18 20 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) src/gui.c:764 591 {*jcc_1}
     (nil)
 -> 17)
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  5 (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 185 186

;; Pred edge  4 (fallthru)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 (set (reg/f:SI 0 ax [185])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:767 64 {*movsi_internal}
     (nil))

(insn 22 21 23 5 (set (reg:SI 1 dx [orig:60 D.5661 ] [60])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [185])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:767 64 {*movsi_internal}
     (nil))

(insn 23 22 24 5 (set (reg/f:SI 0 ax [186])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:767 64 {*movsi_internal}
     (nil))

(insn 24 23 25 5 (set (reg:SI 0 ax [orig:61 D.5662 ] [61])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [186])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:767 64 {*movsi_internal}
     (nil))

(insn 25 24 26 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:60 D.5661 ] [60])
            (reg:SI 0 ax [orig:61 D.5662 ] [61]))) src/gui.c:767 6 {*cmpsi_1}
     (nil))

(jump_insn 26 25 27 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 466)
            (pc))) src/gui.c:767 591 {*jcc_1}
     (nil)
 -> 466)
;; End of basic block 5 -> ( 6 50)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  50

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5 (fallthru)
(note 27 26 28 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 488 6 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:769 64 {*movsi_internal}
     (nil))

(jump_insn 488 28 489 6 (set (pc)
        (label_ref 264)) src/gui.c:769 606 {jump}
     (nil)
 -> 264)
;; End of basic block 6 -> ( 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  28 [100.0%] 

(barrier 489 488 266)

;; Start of basic block ( 28) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 62 187 188

;; Pred edge  28
(code_label 266 489 31 7 161 "" [1 uses])

(note 31 266 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 7 (set (reg/f:SI 0 ax [187])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 33 32 34 7 (set (reg:SI 1 dx [188])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 34 33 35 7 (set (reg:SI 0 ax [orig:62 D.5665 ] [62])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [188])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [187]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[i_1].nb_checkers+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 35 34 36 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:62 D.5665 ] [62])
            (const_int 0 [0]))) src/gui.c:771 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 36 35 37 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) src/gui.c:771 591 {*jcc_1}
     (nil)
 -> 261)
;; End of basic block 7 -> ( 8 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  27

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 63 189 190

;; Pred edge  7 (fallthru)
(note 37 36 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 8 (set (reg/f:SI 0 ax [189])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 39 38 40 8 (set (reg:SI 1 dx [190])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 40 39 41 8 (set (reg:SI 0 ax [orig:63 D.5668 ] [63])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [190])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [189])) [0 gameState_20(D)->zones[i_1].player+0 S4 A32])) src/gui.c:771 64 {*movsi_internal}
     (nil))

(insn 41 40 42 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:63 D.5668 ] [63])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:771 6 {*cmpsi_1}
     (nil))

(jump_insn 42 41 43 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) src/gui.c:771 591 {*jcc_1}
     (nil)
 -> 261)
;; End of basic block 8 -> ( 9 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  27

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 64 65 66 191

;; Pred edge  8 (fallthru)
(note 43 42 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 44 43 45 9 (set (reg/f:SI 0 ax [191])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 45 44 46 9 (set (reg:SI 1 dx [orig:64 D.5673 ] [64])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [191])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 46 45 47 9 (set (reg:SI 0 ax [orig:65 i.22 ] [65])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 47 46 48 9 (parallel [
            (set (reg:SI 0 ax [orig:66 D.5675 ] [66])
                (plus:SI (reg:SI 1 dx [orig:64 D.5673 ] [64])
                    (reg:SI 0 ax [orig:65 i.22 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:773 252 {*addsi_1}
     (nil))

(insn 48 47 49 9 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:66 D.5675 ] [66])
            (const_int 27 [0x1b]))) src/gui.c:773 6 {*cmpsi_1}
     (nil))

(jump_insn 49 48 50 9 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) src/gui.c:773 591 {*jcc_1}
     (nil)
 -> 109)
;; End of basic block 9 -> ( 10 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  15

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 67 68 69 192

;; Pred edge  9 (fallthru)
(note 50 49 51 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 51 50 52 10 (set (reg/f:SI 0 ax [192])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 52 51 53 10 (set (reg:SI 1 dx [orig:67 D.5678 ] [67])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [192])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 53 52 54 10 (set (reg:SI 0 ax [orig:68 i.23 ] [68])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 54 53 55 10 (parallel [
            (set (reg:SI 0 ax [orig:69 D.5680 ] [69])
                (plus:SI (reg:SI 1 dx [orig:67 D.5678 ] [67])
                    (reg:SI 0 ax [orig:68 i.23 ] [68])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:773 252 {*addsi_1}
     (nil))

(insn 55 54 56 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:69 D.5680 ] [69])
            (const_int 26 [0x1a]))) src/gui.c:773 6 {*cmpsi_1}
     (nil))

(jump_insn 56 55 57 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) src/gui.c:773 591 {*jcc_1}
     (nil)
 -> 109)
;; End of basic block 10 -> ( 11 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)
;; Succ edge  15

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 70 71 72 73 193 194

;; Pred edge  10 (fallthru)
(note 57 56 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 11 (set (reg/f:SI 0 ax [193])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 59 58 60 11 (set (reg:SI 1 dx [orig:70 D.5683 ] [70])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [193])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 60 59 61 11 (set (reg:SI 0 ax [orig:71 i.24 ] [71])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 61 60 62 11 (parallel [
            (set (reg:SI 1 dx [orig:72 D.5685 ] [72])
                (plus:SI (reg:SI 1 dx [orig:70 D.5683 ] [70])
                    (reg:SI 0 ax [orig:71 i.24 ] [71])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:773 252 {*addsi_1}
     (nil))

(insn 62 61 63 11 (set (reg/f:SI 0 ax [194])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 63 62 64 11 (set (reg:SI 0 ax [orig:73 D.5686 ] [73])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:72 D.5685 ] [72])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [194]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5685_35].nb_checkers+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 64 63 65 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:73 D.5686 ] [73])
            (const_int 1 [0x1]))) src/gui.c:773 6 {*cmpsi_1}
     (nil))

(jump_insn 65 64 66 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) src/gui.c:773 591 {*jcc_1}
     (nil)
 -> 84)
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14
;; Succ edge  12 (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 74 75 76 77 195 196

;; Pred edge  11 (fallthru)
(note 66 65 67 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 12 (set (reg/f:SI 0 ax [195])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 68 67 69 12 (set (reg:SI 1 dx [orig:74 D.5688 ] [74])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [195])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 69 68 70 12 (set (reg:SI 0 ax [orig:75 i.25 ] [75])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 70 69 71 12 (parallel [
            (set (reg:SI 1 dx [orig:76 D.5690 ] [76])
                (plus:SI (reg:SI 1 dx [orig:74 D.5688 ] [74])
                    (reg:SI 0 ax [orig:75 i.25 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:773 252 {*addsi_1}
     (nil))

(insn 71 70 72 12 (set (reg/f:SI 0 ax [196])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 72 71 73 12 (set (reg:SI 0 ax [orig:77 D.5691 ] [77])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:76 D.5690 ] [76])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [196]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5690_39].nb_checkers+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 73 72 74 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:77 D.5691 ] [77])
            (const_int 0 [0]))) src/gui.c:773 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 74 73 75 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 84)
            (pc))) src/gui.c:773 591 {*jcc_1}
     (nil)
 -> 84)
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14
;; Succ edge  13 (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 78 79 80 81 197 198

;; Pred edge  12 (fallthru)
(note 75 74 76 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 76 75 77 13 (set (reg/f:SI 0 ax [197])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 77 76 78 13 (set (reg:SI 1 dx [orig:78 D.5693 ] [78])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [197])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 78 77 79 13 (set (reg:SI 0 ax [orig:79 i.26 ] [79])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 79 78 80 13 (parallel [
            (set (reg:SI 1 dx [orig:80 D.5695 ] [80])
                (plus:SI (reg:SI 1 dx [orig:78 D.5693 ] [78])
                    (reg:SI 0 ax [orig:79 i.26 ] [79])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:773 252 {*addsi_1}
     (nil))

(insn 80 79 81 13 (set (reg/f:SI 0 ax [198])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 81 80 82 13 (set (reg:SI 0 ax [orig:81 D.5696 ] [81])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:80 D.5695 ] [80])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [198])) [0 gameState_20(D)->zones[D.5695_43].player+0 S4 A32])) src/gui.c:773 64 {*movsi_internal}
     (nil))

(insn 82 81 83 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:81 D.5696 ] [81])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:773 6 {*cmpsi_1}
     (nil))

(jump_insn 83 82 84 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) src/gui.c:773 591 {*jcc_1}
     (nil)
 -> 109)
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  14 (fallthru)
;; Succ edge  15

;; Start of basic block ( 11 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 82 83 84 85 86 87 88 199 200 201 202 203 204

;; Pred edge  11
;; Pred edge  12
;; Pred edge  13 (fallthru)
(code_label 84 83 85 14 157 "" [2 uses])

(note 85 84 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 14 (set (reg:SI 0 ax [199])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 87 86 88 14 (parallel [
            (set (reg:SI 2 cx [orig:82 D.5697 ] [82])
                (plus:SI (reg:SI 0 ax [199])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:775 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 88 87 89 14 (set (reg/f:SI 0 ax [200])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 89 88 90 14 (set (reg:SI 1 dx [orig:83 D.5698 ] [83])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [200])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 90 89 91 14 (set (reg:SI 0 ax [orig:84 i.27 ] [84])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 91 90 92 14 (parallel [
            (set (reg:SI 0 ax [orig:85 D.5700 ] [85])
                (plus:SI (reg:SI 1 dx [orig:83 D.5698 ] [83])
                    (reg:SI 0 ax [orig:84 i.27 ] [84])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:775 252 {*addsi_1}
     (nil))

(insn 92 91 93 14 (parallel [
            (set (reg:SI 1 dx [orig:86 D.5701 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 D.5700 ] [85])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:775 252 {*addsi_1}
     (nil))

(insn 93 92 94 14 (set (reg/f:SI 0 ax [orig:87 D.5702 ] [87])
        (symbol_ref/f:SI ("*.LC24") [flags 0x2]  <var_decl 0x408fdf60 *.LC24>)) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 94 93 95 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [orig:82 D.5697 ] [82])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 95 94 96 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:86 D.5701 ] [86])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(insn 96 95 97 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:87 D.5702 ] [87])) src/gui.c:775 64 {*movsi_internal}
     (nil))

(call_insn 97 96 98 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:775 927 {*call_value_0}
     (nil)
    (nil))

(insn 98 97 99 14 (set (reg:SI 0 ax [orig:88 i.28 ] [88])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(insn 99 98 100 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [orig:88 i.28 ] [88])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(insn 100 99 101 14 (set (reg/f:SI 0 ax [201])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(insn 101 100 102 14 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [201])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(insn 102 101 103 14 (set (reg/f:SI 0 ax [202])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(insn 103 102 104 14 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [202])) src/gui.c:776 64 {*movsi_internal}
     (nil))

(call_insn 104 103 105 14 (call (mem:QI (symbol_ref:SI ("colorChecker") [flags 0x3]  <function_decl 0x4081a680 colorChecker>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:776 618 {*call_0}
     (nil)
    (nil))

(insn 105 104 106 14 (set (reg:SI 0 ax [203])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])) src/gui.c:777 64 {*movsi_internal}
     (nil))

(insn 106 105 107 14 (set (reg:SI 1 dx [204])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:777 64 {*movsi_internal}
     (nil))

(insn 107 106 108 14 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [203])
                        (const_int 4 [0x4]))
                    (reg/f:SI 6 bp))
                (const_int -176 [0xffffffffffffff50])) [0 tab S4 A32])
        (reg:SI 1 dx [204])) src/gui.c:777 64 {*movsi_internal}
     (nil))

(insn 108 107 109 14 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:778 252 {*addsi_1}
     (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  15 (fallthru)

;; Start of basic block ( 9 10 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 89 90 91 205

;; Pred edge  9
;; Pred edge  10
;; Pred edge  13
;; Pred edge  14 (fallthru)
(code_label 109 108 110 15 156 "" [3 uses])

(note 110 109 111 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 15 (set (reg/f:SI 0 ax [205])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 112 111 113 15 (set (reg:SI 1 dx [orig:89 D.5706 ] [89])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [205])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 113 112 114 15 (set (reg:SI 0 ax [orig:90 i.29 ] [90])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 114 113 115 15 (parallel [
            (set (reg:SI 0 ax [orig:91 D.5708 ] [91])
                (plus:SI (reg:SI 1 dx [orig:89 D.5706 ] [89])
                    (reg:SI 0 ax [orig:90 i.29 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:780 252 {*addsi_1}
     (nil))

(insn 115 114 116 15 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:91 D.5708 ] [91])
            (const_int 27 [0x1b]))) src/gui.c:780 6 {*cmpsi_1}
     (nil))

(jump_insn 116 115 117 15 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) src/gui.c:780 591 {*jcc_1}
     (nil)
 -> 176)
;; End of basic block 15 -> ( 16 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  21

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 92 93 94 206

;; Pred edge  15 (fallthru)
(note 117 116 118 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 16 (set (reg/f:SI 0 ax [206])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 119 118 120 16 (set (reg:SI 1 dx [orig:92 D.5711 ] [92])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [206])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 120 119 121 16 (set (reg:SI 0 ax [orig:93 i.30 ] [93])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 121 120 122 16 (parallel [
            (set (reg:SI 0 ax [orig:94 D.5713 ] [94])
                (plus:SI (reg:SI 1 dx [orig:92 D.5711 ] [92])
                    (reg:SI 0 ax [orig:93 i.30 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:780 252 {*addsi_1}
     (nil))

(insn 122 121 123 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:94 D.5713 ] [94])
            (const_int 26 [0x1a]))) src/gui.c:780 6 {*cmpsi_1}
     (nil))

(jump_insn 123 122 124 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) src/gui.c:780 591 {*jcc_1}
     (nil)
 -> 176)
;; End of basic block 16 -> ( 17 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)
;; Succ edge  21

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95 96 97 98 207 208

;; Pred edge  16 (fallthru)
(note 124 123 125 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 125 124 126 17 (set (reg/f:SI 0 ax [207])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 126 125 127 17 (set (reg:SI 1 dx [orig:95 D.5716 ] [95])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [207])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 127 126 128 17 (set (reg:SI 0 ax [orig:96 i.31 ] [96])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 128 127 129 17 (parallel [
            (set (reg:SI 1 dx [orig:97 D.5718 ] [97])
                (plus:SI (reg:SI 1 dx [orig:95 D.5716 ] [95])
                    (reg:SI 0 ax [orig:96 i.31 ] [96])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:780 252 {*addsi_1}
     (nil))

(insn 129 128 130 17 (set (reg/f:SI 0 ax [208])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 130 129 131 17 (set (reg:SI 0 ax [orig:98 D.5719 ] [98])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:97 D.5718 ] [97])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [208]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5718_62].nb_checkers+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 131 130 132 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.5719 ] [98])
            (const_int 0 [0]))) src/gui.c:780 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 132 131 133 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) src/gui.c:780 591 {*jcc_1}
     (nil)
 -> 151)
;; End of basic block 17 -> ( 20 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20
;; Succ edge  18 (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 99 100 101 102 209 210

;; Pred edge  17 (fallthru)
(note 133 132 134 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 134 133 135 18 (set (reg/f:SI 0 ax [209])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 135 134 136 18 (set (reg:SI 1 dx [orig:99 D.5721 ] [99])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [209])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 136 135 137 18 (set (reg:SI 0 ax [orig:100 i.32 ] [100])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 137 136 138 18 (parallel [
            (set (reg:SI 1 dx [orig:101 D.5723 ] [101])
                (plus:SI (reg:SI 1 dx [orig:99 D.5721 ] [99])
                    (reg:SI 0 ax [orig:100 i.32 ] [100])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:780 252 {*addsi_1}
     (nil))

(insn 138 137 139 18 (set (reg/f:SI 0 ax [210])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 139 138 140 18 (set (reg:SI 0 ax [orig:102 D.5724 ] [102])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:101 D.5723 ] [101])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [210]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5723_66].nb_checkers+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 140 139 141 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:102 D.5724 ] [102])
            (const_int 1 [0x1]))) src/gui.c:780 6 {*cmpsi_1}
     (nil))

(jump_insn 141 140 142 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 151)
            (pc))) src/gui.c:780 591 {*jcc_1}
     (nil)
 -> 151)
;; End of basic block 18 -> ( 20 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20
;; Succ edge  19 (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 103 104 105 106 211 212

;; Pred edge  18 (fallthru)
(note 142 141 143 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 143 142 144 19 (set (reg/f:SI 0 ax [211])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 144 143 145 19 (set (reg:SI 1 dx [orig:103 D.5726 ] [103])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [211])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 145 144 146 19 (set (reg:SI 0 ax [orig:104 i.33 ] [104])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 146 145 147 19 (parallel [
            (set (reg:SI 1 dx [orig:105 D.5728 ] [105])
                (plus:SI (reg:SI 1 dx [orig:103 D.5726 ] [103])
                    (reg:SI 0 ax [orig:104 i.33 ] [104])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:780 252 {*addsi_1}
     (nil))

(insn 147 146 148 19 (set (reg/f:SI 0 ax [212])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 148 147 149 19 (set (reg:SI 0 ax [orig:106 D.5729 ] [106])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:105 D.5728 ] [105])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [212])) [0 gameState_20(D)->zones[D.5728_70].player+0 S4 A32])) src/gui.c:780 64 {*movsi_internal}
     (nil))

(insn 149 148 150 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:106 D.5729 ] [106])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:780 6 {*cmpsi_1}
     (nil))

(jump_insn 150 149 151 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 176)
            (pc))) src/gui.c:780 591 {*jcc_1}
     (nil)
 -> 176)
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  20 (fallthru)
;; Succ edge  21

;; Start of basic block ( 17 18 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 107 108 109 110 111 112 113 213 214 215 216 217 218

;; Pred edge  17
;; Pred edge  18
;; Pred edge  19 (fallthru)
(code_label 151 150 152 20 159 "" [2 uses])

(note 152 151 153 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 153 152 154 20 (set (reg:SI 0 ax [213])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 154 153 155 20 (parallel [
            (set (reg:SI 2 cx [orig:107 D.5730 ] [107])
                (plus:SI (reg:SI 0 ax [213])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:782 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 155 154 156 20 (set (reg/f:SI 0 ax [214])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 156 155 157 20 (set (reg:SI 1 dx [orig:108 D.5731 ] [108])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [214])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 157 156 158 20 (set (reg:SI 0 ax [orig:109 i.34 ] [109])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 158 157 159 20 (parallel [
            (set (reg:SI 0 ax [orig:110 D.5733 ] [110])
                (plus:SI (reg:SI 1 dx [orig:108 D.5731 ] [108])
                    (reg:SI 0 ax [orig:109 i.34 ] [109])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:782 252 {*addsi_1}
     (nil))

(insn 159 158 160 20 (parallel [
            (set (reg:SI 1 dx [orig:111 D.5734 ] [111])
                (plus:SI (reg:SI 0 ax [orig:110 D.5733 ] [110])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:782 252 {*addsi_1}
     (nil))

(insn 160 159 161 20 (set (reg/f:SI 0 ax [orig:112 D.5735 ] [112])
        (symbol_ref/f:SI ("*.LC25") [flags 0x2]  <var_decl 0x409cd000 *.LC25>)) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 161 160 162 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [orig:107 D.5730 ] [107])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 162 161 163 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:111 D.5734 ] [111])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(insn 163 162 164 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:112 D.5735 ] [112])) src/gui.c:782 64 {*movsi_internal}
     (nil))

(call_insn 164 163 165 20 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:782 927 {*call_value_0}
     (nil)
    (nil))

(insn 165 164 166 20 (set (reg:SI 0 ax [orig:113 i.35 ] [113])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(insn 166 165 167 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [orig:113 i.35 ] [113])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(insn 167 166 168 20 (set (reg/f:SI 0 ax [215])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(insn 168 167 169 20 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [215])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(insn 169 168 170 20 (set (reg/f:SI 0 ax [216])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(insn 170 169 171 20 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [216])) src/gui.c:783 64 {*movsi_internal}
     (nil))

(call_insn 171 170 172 20 (call (mem:QI (symbol_ref:SI ("colorChecker") [flags 0x3]  <function_decl 0x4081a680 colorChecker>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:783 618 {*call_0}
     (nil)
    (nil))

(insn 172 171 173 20 (set (reg:SI 0 ax [217])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])) src/gui.c:784 64 {*movsi_internal}
     (nil))

(insn 173 172 174 20 (set (reg:SI 1 dx [218])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:784 64 {*movsi_internal}
     (nil))

(insn 174 173 175 20 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [217])
                        (const_int 4 [0x4]))
                    (reg/f:SI 6 bp))
                (const_int -176 [0xffffffffffffff50])) [0 tab S4 A32])
        (reg:SI 1 dx [218])) src/gui.c:784 64 {*movsi_internal}
     (nil))

(insn 175 174 176 20 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:785 252 {*addsi_1}
     (nil))
;; End of basic block 20 -> ( 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 (fallthru)

;; Start of basic block ( 15 16 19 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114 115 116 117 118 219 220

;; Pred edge  15
;; Pred edge  16
;; Pred edge  19
;; Pred edge  20 (fallthru)
(code_label 176 175 177 21 158 "" [3 uses])

(note 177 176 178 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 178 177 179 21 (set (reg/f:SI 0 ax [219])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 179 178 180 21 (set (reg:SI 1 dx [orig:114 D.5739 ] [114])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [219])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 180 179 181 21 (set (reg:SI 0 ax [orig:115 i.36 ] [115])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 181 180 182 21 (parallel [
            (set (reg:SI 1 dx [orig:116 D.5741 ] [116])
                (plus:SI (reg:SI 1 dx [orig:114 D.5739 ] [114])
                    (reg:SI 0 ax [orig:115 i.36 ] [115])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 182 181 183 21 (set (reg/f:SI 0 ax [220])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 183 182 184 21 (set (reg:SI 0 ax [orig:117 D.5742 ] [117])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [220])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 184 183 185 21 (parallel [
            (set (reg:SI 0 ax [orig:118 D.5743 ] [118])
                (plus:SI (reg:SI 1 dx [orig:116 D.5741 ] [116])
                    (reg:SI 0 ax [orig:117 D.5742 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 185 184 186 21 (set (reg:CC 17 flags)
        (compare:CC (reg:SI 0 ax [orig:118 D.5743 ] [118])
            (const_int 27 [0x1b]))) src/gui.c:787 6 {*cmpsi_1}
     (nil))

(jump_insn 186 185 187 21 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) src/gui.c:787 591 {*jcc_1}
     (nil)
 -> 261)
;; End of basic block 21 -> ( 22 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)
;; Succ edge  27

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 119 120 121 122 123 221 222

;; Pred edge  21 (fallthru)
(note 187 186 188 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 188 187 189 22 (set (reg/f:SI 0 ax [221])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 189 188 190 22 (set (reg:SI 1 dx [orig:119 D.5746 ] [119])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [221])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 190 189 191 22 (set (reg:SI 0 ax [orig:120 i.37 ] [120])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 191 190 192 22 (parallel [
            (set (reg:SI 1 dx [orig:121 D.5748 ] [121])
                (plus:SI (reg:SI 1 dx [orig:119 D.5746 ] [119])
                    (reg:SI 0 ax [orig:120 i.37 ] [120])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 192 191 193 22 (set (reg/f:SI 0 ax [222])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 193 192 194 22 (set (reg:SI 0 ax [orig:122 D.5749 ] [122])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [222])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 194 193 195 22 (parallel [
            (set (reg:SI 0 ax [orig:123 D.5750 ] [123])
                (plus:SI (reg:SI 1 dx [orig:121 D.5748 ] [121])
                    (reg:SI 0 ax [orig:122 D.5749 ] [122])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 195 194 196 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:123 D.5750 ] [123])
            (const_int 26 [0x1a]))) src/gui.c:787 6 {*cmpsi_1}
     (nil))

(jump_insn 196 195 197 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) src/gui.c:787 591 {*jcc_1}
     (nil)
 -> 261)
;; End of basic block 22 -> ( 23 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  23 (fallthru)
;; Succ edge  27

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 124 125 126 127 128 129 223 224 225

;; Pred edge  22 (fallthru)
(note 197 196 198 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 198 197 199 23 (set (reg/f:SI 0 ax [223])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 199 198 200 23 (set (reg:SI 1 dx [orig:124 D.5753 ] [124])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [223])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 200 199 201 23 (set (reg:SI 0 ax [orig:125 i.38 ] [125])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 201 200 202 23 (parallel [
            (set (reg:SI 1 dx [orig:126 D.5755 ] [126])
                (plus:SI (reg:SI 1 dx [orig:124 D.5753 ] [124])
                    (reg:SI 0 ax [orig:125 i.38 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 202 201 203 23 (set (reg/f:SI 0 ax [224])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 203 202 204 23 (set (reg:SI 0 ax [orig:127 D.5756 ] [127])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [224])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 204 203 205 23 (parallel [
            (set (reg:SI 1 dx [orig:128 D.5757 ] [128])
                (plus:SI (reg:SI 1 dx [orig:126 D.5755 ] [126])
                    (reg:SI 0 ax [orig:127 D.5756 ] [127])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 205 204 206 23 (set (reg/f:SI 0 ax [225])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 206 205 207 23 (set (reg:SI 0 ax [orig:129 D.5758 ] [129])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:128 D.5757 ] [128])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [225]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5757_94].nb_checkers+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 207 206 208 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:129 D.5758 ] [129])
            (const_int 1 [0x1]))) src/gui.c:787 6 {*cmpsi_1}
     (nil))

(jump_insn 208 207 209 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 233)
            (pc))) src/gui.c:787 591 {*jcc_1}
     (nil)
 -> 233)
;; End of basic block 23 -> ( 26 24)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26
;; Succ edge  24 (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 130 131 132 133 134 135 226 227 228

;; Pred edge  23 (fallthru)
(note 209 208 210 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 210 209 211 24 (set (reg/f:SI 0 ax [226])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 211 210 212 24 (set (reg:SI 1 dx [orig:130 D.5760 ] [130])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [226])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 212 211 213 24 (set (reg:SI 0 ax [orig:131 i.39 ] [131])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 213 212 214 24 (parallel [
            (set (reg:SI 1 dx [orig:132 D.5762 ] [132])
                (plus:SI (reg:SI 1 dx [orig:130 D.5760 ] [130])
                    (reg:SI 0 ax [orig:131 i.39 ] [131])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 214 213 215 24 (set (reg/f:SI 0 ax [227])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 215 214 216 24 (set (reg:SI 0 ax [orig:133 D.5763 ] [133])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [227])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 216 215 217 24 (parallel [
            (set (reg:SI 1 dx [orig:134 D.5764 ] [134])
                (plus:SI (reg:SI 1 dx [orig:132 D.5762 ] [132])
                    (reg:SI 0 ax [orig:133 D.5763 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 217 216 218 24 (set (reg/f:SI 0 ax [228])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 218 217 219 24 (set (reg:SI 0 ax [orig:135 D.5765 ] [135])
        (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:134 D.5764 ] [134])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [228]))
                (const_int 4 [0x4])) [0 gameState_20(D)->zones[D.5764_100].nb_checkers+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 219 218 220 24 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:135 D.5765 ] [135])
            (const_int 0 [0]))) src/gui.c:787 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 220 219 221 24 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 233)
            (pc))) src/gui.c:787 591 {*jcc_1}
     (nil)
 -> 233)
;; End of basic block 24 -> ( 26 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26
;; Succ edge  25 (fallthru)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 136 137 138 139 140 141 229 230 231

;; Pred edge  24 (fallthru)
(note 221 220 222 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 222 221 223 25 (set (reg/f:SI 0 ax [229])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 223 222 224 25 (set (reg:SI 1 dx [orig:136 D.5767 ] [136])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [229])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 224 223 225 25 (set (reg:SI 0 ax [orig:137 i.40 ] [137])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 225 224 226 25 (parallel [
            (set (reg:SI 1 dx [orig:138 D.5769 ] [138])
                (plus:SI (reg:SI 1 dx [orig:136 D.5767 ] [136])
                    (reg:SI 0 ax [orig:137 i.40 ] [137])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 226 225 227 25 (set (reg/f:SI 0 ax [230])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 227 226 228 25 (set (reg:SI 0 ax [orig:139 D.5770 ] [139])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [230])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 228 227 229 25 (parallel [
            (set (reg:SI 1 dx [orig:140 D.5771 ] [140])
                (plus:SI (reg:SI 1 dx [orig:138 D.5769 ] [138])
                    (reg:SI 0 ax [orig:139 D.5770 ] [139])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:787 252 {*addsi_1}
     (nil))

(insn 229 228 230 25 (set (reg/f:SI 0 ax [231])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 230 229 231 25 (set (reg:SI 0 ax [orig:141 D.5772 ] [141])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 dx [orig:140 D.5771 ] [140])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [231])) [0 gameState_20(D)->zones[D.5771_106].player+0 S4 A32])) src/gui.c:787 64 {*movsi_internal}
     (nil))

(insn 231 230 232 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:141 D.5772 ] [141])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:787 6 {*cmpsi_1}
     (nil))

(jump_insn 232 231 233 25 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 261)
            (pc))) src/gui.c:787 591 {*jcc_1}
     (nil)
 -> 261)
;; End of basic block 25 -> ( 26 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26 (fallthru)
;; Succ edge  27

;; Start of basic block ( 23 24 25) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 142 143 144 145 146 147 148 149 150 232 233 234 235 236 237 238

;; Pred edge  23
;; Pred edge  24
;; Pred edge  25 (fallthru)
(code_label 233 232 234 26 160 "" [2 uses])

(note 234 233 235 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 235 234 236 26 (set (reg:SI 0 ax [232])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 236 235 237 26 (parallel [
            (set (reg:SI 2 cx [orig:142 D.5773 ] [142])
                (plus:SI (reg:SI 0 ax [232])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:789 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 20 frame)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 1 [0x1]))
        (nil)))

(insn 237 236 238 26 (set (reg/f:SI 0 ax [233])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 238 237 239 26 (set (reg:SI 1 dx [orig:143 D.5774 ] [143])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [233])
                (const_int 224 [0xe0])) [0 gameState_20(D)->die1+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 239 238 240 26 (set (reg:SI 0 ax [orig:144 i.41 ] [144])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 240 239 241 26 (parallel [
            (set (reg:SI 1 dx [orig:145 D.5776 ] [145])
                (plus:SI (reg:SI 1 dx [orig:143 D.5774 ] [143])
                    (reg:SI 0 ax [orig:144 i.41 ] [144])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:789 252 {*addsi_1}
     (nil))

(insn 241 240 242 26 (set (reg/f:SI 0 ax [234])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 242 241 243 26 (set (reg:SI 0 ax [orig:146 D.5777 ] [146])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [234])
                (const_int 228 [0xe4])) [0 gameState_20(D)->die2+0 S4 A32])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 243 242 244 26 (parallel [
            (set (reg:SI 0 ax [orig:147 D.5778 ] [147])
                (plus:SI (reg:SI 1 dx [orig:145 D.5776 ] [145])
                    (reg:SI 0 ax [orig:146 D.5777 ] [146])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:789 252 {*addsi_1}
     (nil))

(insn 244 243 245 26 (parallel [
            (set (reg:SI 1 dx [orig:148 D.5779 ] [148])
                (plus:SI (reg:SI 0 ax [orig:147 D.5778 ] [147])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:789 252 {*addsi_1}
     (nil))

(insn 245 244 246 26 (set (reg/f:SI 0 ax [orig:149 D.5780 ] [149])
        (symbol_ref/f:SI ("*.LC26") [flags 0x2]  <var_decl 0x409cd060 *.LC26>)) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 246 245 247 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [orig:142 D.5773 ] [142])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 247 246 248 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:148 D.5779 ] [148])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(insn 248 247 249 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:149 D.5780 ] [149])) src/gui.c:789 64 {*movsi_internal}
     (nil))

(call_insn 249 248 250 26 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:789 927 {*call_value_0}
     (nil)
    (nil))

(insn 250 249 251 26 (set (reg:SI 0 ax [orig:150 i.42 ] [150])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(insn 251 250 252 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [orig:150 i.42 ] [150])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(insn 252 251 253 26 (set (reg/f:SI 0 ax [235])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(insn 253 252 254 26 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [235])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(insn 254 253 255 26 (set (reg/f:SI 0 ax [236])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(insn 255 254 256 26 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [236])) src/gui.c:790 64 {*movsi_internal}
     (nil))

(call_insn 256 255 257 26 (call (mem:QI (symbol_ref:SI ("colorChecker") [flags 0x3]  <function_decl 0x4081a680 colorChecker>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:790 618 {*call_0}
     (nil)
    (nil))

(insn 257 256 258 26 (set (reg:SI 0 ax [237])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])) src/gui.c:791 64 {*movsi_internal}
     (nil))

(insn 258 257 259 26 (set (reg:SI 1 dx [238])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])) src/gui.c:791 64 {*movsi_internal}
     (nil))

(insn 259 258 260 26 (set (mem/s/j:SI (plus:SI (plus:SI (mult:SI (reg:SI 0 ax [237])
                        (const_int 4 [0x4]))
                    (reg/f:SI 6 bp))
                (const_int -176 [0xffffffffffffff50])) [0 tab S4 A32])
        (reg:SI 1 dx [238])) src/gui.c:791 64 {*movsi_internal}
     (nil))

(insn 260 259 261 26 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:792 252 {*addsi_1}
     (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  27 (fallthru)

;; Start of basic block ( 7 8 21 22 25 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  7
;; Pred edge  8
;; Pred edge  21
;; Pred edge  22
;; Pred edge  25
;; Pred edge  26 (fallthru)
(code_label 261 260 262 27 155 "" [5 uses])

(note 262 261 263 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 263 262 264 27 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:769 252 {*addsi_1}
     (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  28 (fallthru)

;; Start of basic block ( 27 6) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  27 (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 264 263 265 28 154 "" [1 uses])

(note 265 264 267 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 267 265 268 28 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 i+0 S4 A32])
            (const_int 23 [0x17]))) src/gui.c:769 6 {*cmpsi_1}
     (nil))

(jump_insn 268 267 269 28 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 266)
            (pc))) src/gui.c:769 591 {*jcc_1}
     (nil)
 -> 266)
;; End of basic block 28 -> ( 7 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7
;; Succ edge  29 (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 151 239

;; Pred edge  28 (fallthru)
(note 269 268 270 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 270 269 271 29 (set (reg/f:SI 0 ax [239])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:796 64 {*movsi_internal}
     (nil))

(insn 271 270 272 29 (set (reg/f:SI 0 ax [orig:151 D.5782 ] [151])
        (mem/s/f/j:SI (reg/f:SI 0 ax [239]) [0 display_52(D)->screen+0 S4 A32])) src/gui.c:796 64 {*movsi_internal}
     (nil))

(insn 272 271 273 29 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:151 D.5782 ] [151])) src/gui.c:796 64 {*movsi_internal}
     (nil))

(call_insn 273 272 463 29 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Flip") [flags 0x41]  <function_decl 0x4079fa00 SDL_Flip>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:796 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 29 -> ( 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 (fallthru)

;; Start of basic block ( 29 49) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 152 153 240

;; Pred edge  29 (fallthru)
;; Pred edge  49 [100.0%] 
(code_label 463 273 274 30 171 "" [1 uses])

(note 274 463 275 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 275 274 276 30 (parallel [
            (set (reg:SI 0 ax [240])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -64 [0xffffffffffffffc0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:799 252 {*addsi_1}
     (nil))

(insn 276 275 277 30 (set (mem/f/i:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [240])) src/gui.c:799 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))

(call_insn 277 276 278 30 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_WaitEvent") [flags 0x41]  <function_decl 0x407d8f80 SDL_WaitEvent>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:799 927 {*call_value_0}
     (nil)
    (nil))

(insn 278 277 279 30 (set (reg:QI 0 ax [orig:152 D.5783 ] [152])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 event.type+0 S1 A32])) src/gui.c:804 66 {*movqi_internal}
     (nil))

(insn 279 278 280 30 (parallel [
            (set (reg:SI 0 ax [orig:153 D.5784 ] [153])
                (zero_extend:SI (reg:QI 0 ax [orig:152 D.5783 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:804 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 280 279 281 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 D.5784 ] [153])
            (const_int 6 [0x6]))) src/gui.c:804 6 {*cmpsi_1}
     (nil))

(jump_insn 281 280 483 30 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 299)
            (pc))) src/gui.c:804 591 {*jcc_1}
     (nil)
 -> 299)
;; End of basic block 30 -> ( 35 31)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 153


;; Succ edge  35
;; Succ edge  31 (fallthru)

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 153
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 153
;; lr  def 	 17 [flags]

;; Pred edge  30 (fallthru)
(note 483 281 282 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 282 483 283 31 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:153 D.5784 ] [153])
            (const_int 12 [0xc]))) src/gui.c:804 6 {*cmpsi_1}
     (nil))

(jump_insn 283 282 286 31 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 461)
            (pc))) src/gui.c:804 591 {*jcc_1}
     (nil)
 -> 461)
;; End of basic block 31 -> ( 32 49)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  32 (fallthru)
;; Succ edge  49

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  31 (fallthru)
(code_label 286 283 287 32 164 "" [0 uses])

(note 287 286 288 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 288 287 289 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:807 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 289 288 290 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 294)
            (pc))) src/gui.c:807 591 {*jcc_1}
     (nil)
 -> 294)
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 (fallthru)
;; Succ edge  34

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 241

;; Pred edge  32 (fallthru)
(note 290 289 291 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 291 290 292 33 (set (reg/f:SI 0 ax [241])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])) src/gui.c:808 64 {*movsi_internal}
     (nil))

(insn 292 291 293 33 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [241])) src/gui.c:808 64 {*movsi_internal}
     (nil))

(call_insn 293 292 294 33 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:808 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34 (fallthru)

;; Start of basic block ( 32 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  32
;; Pred edge  33 (fallthru)
(code_label 294 293 295 34 165 "" [1 uses])

(note 295 294 296 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 296 295 490 34 (set (reg:SI 0 ax [orig:59 D.5787 ] [59])
        (const_int 1 [0x1])) src/gui.c:809 64 {*movsi_internal}
     (nil))

(jump_insn 490 296 491 34 (set (pc)
        (label_ref 472)) src/gui.c:809 606 {jump}
     (nil)
 -> 472)
;; End of basic block 34 -> ( 51)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  51 [100.0%] 

(barrier 491 490 299)

;; Start of basic block ( 30) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 154

;; Pred edge  30
(code_label 299 491 300 35 163 "" [1 uses])

(note 300 299 301 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 301 300 302 35 (set (reg:QI 0 ax [orig:154 D.5788 ] [154])
        (mem/s/j/c:QI (plus:SI (reg/f:SI 6 bp)
                (const_int -62 [0xffffffffffffffc2])) [0 event.button.button+0 S1 A16])) src/gui.c:813 66 {*movqi_internal}
     (nil))

(insn 302 301 303 35 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:154 D.5788 ] [154])
            (const_int 1 [0x1]))) src/gui.c:813 4 {*cmpqi_1}
     (nil))

(jump_insn 303 302 304 35 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 503)
            (pc))) src/gui.c:813 591 {*jcc_1}
     (nil)
 -> 503)
;; End of basic block 35 -> ( 36 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  36 (fallthru)
;; Succ edge  53

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 155 156 157 158 159 242

;; Pred edge  35 (fallthru)
(note 304 303 305 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 305 304 306 36 (set (reg:HI 0 ax [orig:155 D.5791 ] [155])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 event.button.y+0 S2 A16])) src/gui.c:816 65 {*movhi_internal}
     (nil))

(insn 306 305 307 36 (set (reg:SI 1 dx [orig:156 D.5792 ] [156])
        (zero_extend:SI (reg:HI 0 ax [orig:155 D.5791 ] [155]))) src/gui.c:816 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 307 306 308 36 (set (reg:HI 0 ax [orig:157 D.5793 ] [157])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 event.button.x+0 S2 A32])) src/gui.c:816 65 {*movhi_internal}
     (nil))

(insn 308 307 309 36 (set (reg:SI 0 ax [orig:158 D.5794 ] [158])
        (zero_extend:SI (reg:HI 0 ax [orig:157 D.5793 ] [157]))) src/gui.c:816 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 309 308 310 36 (parallel [
            (set (reg:SI 2 cx [242])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:816 252 {*addsi_1}
     (nil))

(insn 310 309 311 36 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [242])) src/gui.c:816 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))

(insn 311 310 312 36 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:156 D.5792 ] [156])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(insn 312 311 313 36 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:158 D.5794 ] [158])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(call_insn 313 312 315 36 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("CheckerWithScreenPosition") [flags 0x3]  <function_decl 0x4081a600 CheckerWithScreenPosition>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:816 927 {*call_value_0}
     (nil)
    (nil))

(insn 315 313 316 36 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:159 D.5795 ] [159])
            (const_int 0 [0]))) src/gui.c:816 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 316 315 317 36 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) src/gui.c:816 591 {*jcc_1}
     (nil)
 -> 343)
;; End of basic block 36 -> ( 37 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  37 (fallthru)
;; Succ edge  41

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 160 161 243

;; Pred edge  36 (fallthru)
(note 317 316 318 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 318 317 319 37 (set (reg:SI 0 ax [orig:160 posDepart.43 ] [160])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 posDepart+0 S4 A32])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(insn 319 318 320 37 (parallel [
            (set (reg:SI 1 dx [243])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -176 [0xffffffffffffff50])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:816 252 {*addsi_1}
     (nil))

(insn 320 319 321 37 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [243])) src/gui.c:816 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -168 [0xffffffffffffff58]))
        (nil)))

(insn 321 320 322 37 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:160 posDepart.43 ] [160])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(call_insn 322 321 324 37 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("inTab") [flags 0x3]  <function_decl 0x4081a800 inTab>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:816 927 {*call_value_0}
     (nil)
    (nil))

(insn 324 322 325 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:161 D.5799 ] [161])
            (const_int 0 [0]))) src/gui.c:816 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 325 324 326 37 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) src/gui.c:816 591 {*jcc_1}
     (nil)
 -> 343)
;; End of basic block 37 -> ( 38 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  38 (fallthru)
;; Succ edge  41

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  37 (fallthru)
(note 326 325 327 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 327 326 328 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:816 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 328 327 329 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) src/gui.c:816 591 {*jcc_1}
     (nil)
 -> 343)
;; End of basic block 38 -> ( 39 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  39 (fallthru)
;; Succ edge  41

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 162 163 244

;; Pred edge  38 (fallthru)
(note 329 328 330 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 330 329 331 39 (set (reg:SI 0 ax [orig:162 posDepart.44 ] [162])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 posDepart+0 S4 A32])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(insn 331 330 332 39 (set (reg/f:SI 1 dx [244])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(insn 332 331 333 39 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 1 dx [244])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(insn 333 332 334 39 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:162 posDepart.44 ] [162])) src/gui.c:816 64 {*movsi_internal}
     (nil))

(call_insn 334 333 336 39 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("inTab") [flags 0x3]  <function_decl 0x4081a800 inTab>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:816 927 {*call_value_0}
     (nil)
    (nil))

(insn 336 334 337 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:163 D.5805 ] [163])
            (const_int 0 [0]))) src/gui.c:816 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 337 336 338 39 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 343)
            (pc))) src/gui.c:816 591 {*jcc_1}
     (nil)
 -> 343)
;; End of basic block 39 -> ( 40 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  40 (fallthru)
;; Succ edge  41

;; Start of basic block ( 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 245 246

;; Pred edge  39 (fallthru)
(note 338 337 339 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 339 338 340 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:818 2 {*cmpsi_ccno_1}
     (nil))

(insn 340 339 341 40 (set (reg:QI 0 ax [245])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) src/gui.c:818 585 {*setcc_qi}
     (nil))

(insn 341 340 342 40 (parallel [
            (set (reg:SI 0 ax [246])
                (zero_extend:SI (reg:QI 0 ax [245])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:818 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 342 341 343 40 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
        (reg:SI 0 ax [246])) src/gui.c:818 64 {*movsi_internal}
     (nil))
;; End of basic block 40 -> ( 41)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  41 (fallthru)

;; Start of basic block ( 36 37 38 39 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  36
;; Pred edge  37
;; Pred edge  38
;; Pred edge  39
;; Pred edge  40 (fallthru)
(code_label 343 342 344 41 168 "" [4 uses])

(note 344 343 345 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 345 344 346 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:821 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 346 345 347 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 389)
            (pc))) src/gui.c:821 591 {*jcc_1}
     (nil)
 -> 389)
;; End of basic block 41 -> ( 42 45)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  42 (fallthru)
;; Succ edge  45

;; Start of basic block ( 41) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 164 165 166 167 168 247

;; Pred edge  41 (fallthru)
(note 347 346 348 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 348 347 349 42 (set (reg:HI 0 ax [orig:164 D.5810 ] [164])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 event.button.y+0 S2 A16])) src/gui.c:823 65 {*movhi_internal}
     (nil))

(insn 349 348 350 42 (set (reg:SI 1 dx [orig:165 D.5811 ] [165])
        (zero_extend:SI (reg:HI 0 ax [orig:164 D.5810 ] [164]))) src/gui.c:823 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 350 349 351 42 (set (reg:HI 0 ax [orig:166 D.5812 ] [166])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 event.button.x+0 S2 A32])) src/gui.c:823 65 {*movhi_internal}
     (nil))

(insn 351 350 352 42 (set (reg:SI 0 ax [orig:167 D.5813 ] [167])
        (zero_extend:SI (reg:HI 0 ax [orig:166 D.5812 ] [166]))) src/gui.c:823 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 352 351 353 42 (parallel [
            (set (reg:SI 2 cx [247])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:823 252 {*addsi_1}
     (nil))

(insn 353 352 354 42 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [247])) src/gui.c:823 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -28 [0xffffffffffffffe4]))
        (nil)))

(insn 354 353 355 42 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:165 D.5811 ] [165])) src/gui.c:823 64 {*movsi_internal}
     (nil))

(insn 355 354 356 42 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:167 D.5813 ] [167])) src/gui.c:823 64 {*movsi_internal}
     (nil))

(call_insn 356 355 358 42 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("CheckerWithScreenPosition") [flags 0x3]  <function_decl 0x4081a600 CheckerWithScreenPosition>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:823 927 {*call_value_0}
     (nil)
    (nil))

(insn 358 356 359 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:168 D.5814 ] [168])
            (const_int 0 [0]))) src/gui.c:823 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 359 358 360 42 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 503)
            (pc))) src/gui.c:823 591 {*jcc_1}
     (nil)
 -> 503)
;; End of basic block 42 -> ( 43 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  43 (fallthru)
;; Succ edge  53

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 169 170 248

;; Pred edge  42 (fallthru)
(note 360 359 361 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 361 360 362 43 (set (reg:SI 0 ax [orig:169 posDepart.45 ] [169])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 posDepart+0 S4 A32])) src/gui.c:825 64 {*movsi_internal}
     (nil))

(insn 362 361 363 43 (parallel [
            (set (reg:SI 1 dx [248])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -176 [0xffffffffffffff50])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:825 252 {*addsi_1}
     (nil))

(insn 363 362 364 43 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [248])) src/gui.c:825 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -168 [0xffffffffffffff58]))
        (nil)))

(insn 364 363 365 43 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:169 posDepart.45 ] [169])) src/gui.c:825 64 {*movsi_internal}
     (nil))

(call_insn 365 364 367 43 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("inTab") [flags 0x3]  <function_decl 0x4081a800 inTab>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:825 927 {*call_value_0}
     (nil)
    (nil))

(insn 367 365 368 43 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:170 D.5818 ] [170])
            (const_int 0 [0]))) src/gui.c:825 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 368 367 369 43 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 503)
            (pc))) src/gui.c:825 591 {*jcc_1}
     (nil)
 -> 503)
;; End of basic block 43 -> ( 44 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  44 (fallthru)
;; Succ edge  53

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 171 172 173 249 250 251 252 253

;; Pred edge  43 (fallthru)
(note 369 368 370 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 370 369 371 44 (set (reg:SI 0 ax [orig:171 posDepart.46 ] [171])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 posDepart+0 S4 A32])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 371 370 372 44 (set (reg/f:SI 1 dx [249])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 372 371 373 44 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg/f:SI 1 dx [249])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 373 372 374 44 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 0 ax [orig:171 posDepart.46 ] [171])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 374 373 375 44 (set (reg:SI 0 ax [250])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 player+0 S4 A32])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 375 374 376 44 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [250])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 376 375 377 44 (set (reg/f:SI 0 ax [251])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 377 376 378 44 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [251])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 378 377 379 44 (set (reg/f:SI 0 ax [252])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 379 378 380 44 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [252])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(call_insn 380 379 382 44 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Display_Arrow_Possibilities") [flags 0x3]  <function_decl 0x4081a480 Display_Arrow_Possibilities>) [0 S1 A8])
            (const_int 20 [0x14]))) src/gui.c:827 927 {*call_value_0}
     (nil)
    (nil))

(insn 382 380 383 44 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])
        (reg:SI 0 ax [253])) src/gui.c:827 64 {*movsi_internal}
     (nil))

(insn 383 382 384 44 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posDepartSelected+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:828 64 {*movsi_internal}
     (nil))

(insn 384 383 385 44 (set (reg:SI 0 ax [orig:172 posDepart.47 ] [172])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 posDepart+0 S4 A32])) src/gui.c:829 64 {*movsi_internal}
     (nil))

(insn 385 384 386 44 (parallel [
            (set (reg:SI 0 ax [orig:173 D.5823 ] [173])
                (plus:SI (reg:SI 0 ax [orig:172 posDepart.47 ] [172])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:829 252 {*addsi_1}
     (nil))

(insn 386 385 492 44 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 mouvement.src_point+0 S4 A32])
        (reg:SI 0 ax [orig:173 D.5823 ] [173])) src/gui.c:829 64 {*movsi_internal}
     (nil))

(jump_insn 492 386 493 44 (set (pc)
        (label_ref:SI 503)) src/gui.c:855 606 {jump}
     (nil)
 -> 503)
;; End of basic block 44 -> ( 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  53 [100.0%] 

(barrier 493 492 389)

;; Start of basic block ( 41) -> 45
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 174 175 176 177 178 254

;; Pred edge  41
(code_label 389 493 390 45 169 "" [1 uses])

(note 390 389 391 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 391 390 392 45 (set (reg:HI 0 ax [orig:174 D.5825 ] [174])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -58 [0xffffffffffffffc6])) [0 event.button.y+0 S2 A16])) src/gui.c:835 65 {*movhi_internal}
     (nil))

(insn 392 391 393 45 (set (reg:SI 1 dx [orig:175 D.5826 ] [175])
        (zero_extend:SI (reg:HI 0 ax [orig:174 D.5825 ] [174]))) src/gui.c:835 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 393 392 394 45 (set (reg:HI 0 ax [orig:176 D.5827 ] [176])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 event.button.x+0 S2 A32])) src/gui.c:835 65 {*movhi_internal}
     (nil))

(insn 394 393 395 45 (set (reg:SI 0 ax [orig:177 D.5828 ] [177])
        (zero_extend:SI (reg:HI 0 ax [orig:176 D.5827 ] [176]))) src/gui.c:835 119 {*zero_extendhisi2_movzwl}
     (nil))

(insn 395 394 396 45 (parallel [
            (set (reg:SI 2 cx [254])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:835 252 {*addsi_1}
     (nil))

(insn 396 395 397 45 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [254])) src/gui.c:835 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -24 [0xffffffffffffffe8]))
        (nil)))

(insn 397 396 398 45 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:175 D.5826 ] [175])) src/gui.c:835 64 {*movsi_internal}
     (nil))

(insn 398 397 399 45 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:177 D.5828 ] [177])) src/gui.c:835 64 {*movsi_internal}
     (nil))

(call_insn 399 398 401 45 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("CheckerWithScreenPosition") [flags 0x3]  <function_decl 0x4081a600 CheckerWithScreenPosition>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:835 927 {*call_value_0}
     (nil)
    (nil))

(insn 401 399 402 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:178 D.5829 ] [178])
            (const_int 0 [0]))) src/gui.c:835 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 402 401 403 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 435)
            (pc))) src/gui.c:835 591 {*jcc_1}
     (nil)
 -> 435)
;; End of basic block 45 -> ( 46 48)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  46 (fallthru)
;; Succ edge  48

;; Start of basic block ( 45) -> 46
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 179 180 255

;; Pred edge  45 (fallthru)
(note 403 402 404 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 404 403 405 46 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC27") [flags 0x2]  <var_decl 0x409cd0c0 *.LC27>)) src/gui.c:837 64 {*movsi_internal}
     (nil))

(call_insn 405 404 406 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0x406b1e00 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:837 927 {*call_value_0}
     (nil)
    (nil))

(insn 406 405 407 46 (set (reg:SI 0 ax [orig:179 posArrivee.48 ] [179])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 posArrivee+0 S4 A32])) src/gui.c:838 64 {*movsi_internal}
     (nil))

(insn 407 406 408 46 (set (reg/f:SI 1 dx [255])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])) src/gui.c:838 64 {*movsi_internal}
     (nil))

(insn 408 407 409 46 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 1 dx [255])) src/gui.c:838 64 {*movsi_internal}
     (nil))

(insn 409 408 410 46 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg:SI 0 ax [orig:179 posArrivee.48 ] [179])) src/gui.c:838 64 {*movsi_internal}
     (nil))

(call_insn 410 409 412 46 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("inTab") [flags 0x3]  <function_decl 0x4081a800 inTab>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:838 927 {*call_value_0}
     (nil)
    (nil))

(insn 412 410 413 46 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:180 D.5833 ] [180])
            (const_int 0 [0]))) src/gui.c:838 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 413 412 414 46 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 503)
            (pc))) src/gui.c:838 591 {*jcc_1}
     (nil)
 -> 503)
;; End of basic block 46 -> ( 47 53)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  47 (fallthru)
;; Succ edge  53

;; Start of basic block ( 46) -> 47
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 181 182 256 257 258 259 260

;; Pred edge  46 (fallthru)
(note 414 413 415 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 415 414 416 47 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC28") [flags 0x2]  <var_decl 0x409cd120 *.LC28>)) src/gui.c:840 64 {*movsi_internal}
     (nil))

(call_insn 416 415 417 47 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0x406b1e00 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:840 927 {*call_value_0}
     (nil)
    (nil))

(insn 417 416 418 47 (set (reg:SI 0 ax [orig:181 posArrivee.49 ] [181])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 posArrivee+0 S4 A32])) src/gui.c:841 64 {*movsi_internal}
     (nil))

(insn 418 417 419 47 (parallel [
            (set (reg:SI 0 ax [orig:182 D.5837 ] [182])
                (plus:SI (reg:SI 0 ax [orig:181 posArrivee.49 ] [181])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:841 252 {*addsi_1}
     (nil))

(insn 419 418 420 47 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 mouvement.dest_point+0 S4 A32])
        (reg:SI 0 ax [orig:182 D.5837 ] [182])) src/gui.c:841 64 {*movsi_internal}
     (nil))

(insn 420 419 421 47 (set (reg/f:SI 0 ax [256])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])) src/gui.c:842 64 {*movsi_internal}
     (nil))

(insn 421 420 422 47 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [256])) src/gui.c:842 64 {*movsi_internal}
     (nil))

(call_insn 422 421 423 47 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:842 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 423 422 424 47 (set (reg/f:SI 0 ax [257])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(insn 424 423 425 47 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 0 ax [257])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(insn 425 424 426 47 (parallel [
            (set (reg:SI 0 ax [258])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -44 [0xffffffffffffffd4])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:843 252 {*addsi_1}
     (nil))

(insn 426 425 427 47 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [258])) src/gui.c:843 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -36 [0xffffffffffffffdc]))
        (nil)))

(insn 427 426 428 47 (set (reg/f:SI 0 ax [259])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(insn 428 427 429 47 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [259])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(insn 429 428 430 47 (set (reg/f:SI 0 ax [260])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(insn 430 429 431 47 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [260])) src/gui.c:843 64 {*movsi_internal}
     (nil))

(call_insn 431 430 432 47 (call (mem:QI (symbol_ref:SI ("Checker_Move") [flags 0x3]  <function_decl 0x4081a280 Checker_Move>) [0 S1 A8])
        (const_int 16 [0x10])) src/gui.c:843 618 {*call_0}
     (nil)
    (nil))

(insn 432 431 494 47 (set (reg:SI 0 ax [orig:59 D.5787 ] [59])
        (const_int 0 [0])) src/gui.c:844 64 {*movsi_internal}
     (nil))

(jump_insn 494 432 495 47 (set (pc)
        (label_ref 472)) src/gui.c:844 606 {jump}
     (nil)
 -> 472)
;; End of basic block 47 -> ( 51)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  51 [100.0%] 

(barrier 495 494 435)

;; Start of basic block ( 45) -> 48
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 59 261 262 263 264 265 266 267 268

;; Pred edge  45
(code_label 435 495 436 48 170 "" [1 uses])

(note 436 435 437 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 437 436 438 48 (set (reg/f:SI 0 ax [261])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arriveesValides+0 S4 A32])) src/gui.c:849 64 {*movsi_internal}
     (nil))

(insn 438 437 439 48 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [261])) src/gui.c:849 64 {*movsi_internal}
     (nil))

(call_insn 439 438 440 48 (call (mem:QI (symbol_ref:SI ("free") [flags 0x41]  <function_decl 0x406bdf00 free>) [0 S1 A8])
        (const_int 4 [0x4])) src/gui.c:849 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 440 439 441 48 (set (reg/f:SI 0 ax [262])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(insn 441 440 442 48 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [262])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(insn 442 441 443 48 (set (reg/f:SI 0 ax [263])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(insn 443 442 444 48 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [263])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(insn 444 443 445 48 (set (reg/f:SI 0 ax [264])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(insn 445 444 446 48 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [264])) src/gui.c:850 64 {*movsi_internal}
     (nil))

(call_insn 446 445 447 48 (call (mem:QI (symbol_ref:SI ("Display_RefreshGameBoard") [flags 0x3]  <function_decl 0x4081a780 Display_RefreshGameBoard>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:850 618 {*call_0}
     (nil)
    (nil))

(insn 447 446 448 48 (set (reg/f:SI 0 ax [265])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 game+0 S4 A32])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 448 447 449 48 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/f:SI 0 ax [265])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 449 448 450 48 (set (reg:SI 0 ax [266])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 16 [0x10])) [0 player+0 S4 A32])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 450 449 451 48 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [266])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 451 450 452 48 (set (reg/f:SI 0 ax [267])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 452 451 453 48 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [267])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 453 452 454 48 (set (reg/f:SI 0 ax [268])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(insn 454 453 455 48 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [268])) src/gui.c:851 64 {*movsi_internal}
     (nil))

(call_insn 455 454 496 48 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Display_CheckersPossibilities") [flags 0x3]  <function_decl 0x4081a580 Display_CheckersPossibilities>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:851 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 496 455 497 48 (set (pc)
        (label_ref 472)) src/gui.c:851 606 {jump}
     (nil)
 -> 472)
;; End of basic block 48 -> ( 51)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  51 [100.0%] 

(barrier 497 496 503)

;; Start of basic block ( 35 46 44 43 42) -> 53
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  35
;; Pred edge  46
;; Pred edge  44 [100.0%] 
;; Pred edge  43
;; Pred edge  42
(code_label 503 497 502 53 172 "" [5 uses])

(note 502 503 504 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 504 502 461 53 (const_int 0 [0]) src/gui.c:855 638 {nop}
     (nil))
;; End of basic block 53 -> ( 49)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  49 [100.0%]  (fallthru)

;; Start of basic block ( 31 53) -> 49
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  31
;; Pred edge  53 [100.0%]  (fallthru)
(code_label 461 504 462 49 162 "" [1 uses])

(note 462 461 498 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(jump_insn 498 462 499 49 (set (pc)
        (label_ref 463)) src/gui.c:857 606 {jump}
     (nil)
 -> 463)
;; End of basic block 49 -> ( 30)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 [100.0%] 

(barrier 499 498 466)

;; Start of basic block ( 5) -> 50
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 183

;; Pred edge  5
(code_label 466 499 467 50 153 "" [1 uses])

(note 467 466 468 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 468 467 500 50 (clobber (reg/i:SI 0 ax)) src/gui.c:859 -1
     (nil))

(jump_insn 500 468 501 50 (set (pc)
        (label_ref 477)) 606 {jump}
     (nil)
 -> 477)
;; End of basic block 50 -> ( 52)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 183


;; Succ edge  52 [100.0%] 

(barrier 501 500 472)

;; Start of basic block ( 47 34 48) -> 51
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 183

;; Pred edge  47 [100.0%] 
;; Pred edge  34 [100.0%] 
;; Pred edge  48 [100.0%] 
(code_label 472 501 473 51 166 "" [3 uses])

(note 473 472 477 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 51 -> ( 52)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 183


;; Succ edge  52 [100.0%]  (fallthru)

;; Start of basic block ( 51 50) -> 52
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 183
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 183
;; lr  def 	 0 [ax]

;; Pred edge  51 [100.0%]  (fallthru)
;; Pred edge  50 [100.0%] 
(code_label 477 473 485 52 150 "" [1 uses])

(note 485 477 481 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 481 485 505 52 (use (reg/i:SI 0 ax)) src/gui.c:859 -1
     (nil))
;; End of basic block 52 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 505 481 0 NOTE_INSN_DELETED)


;; Function Display_Arrow_Possibilities (Display_Arrow_Possibilities)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 35 n_edges 57 count 35 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r198: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a57 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a87 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a90 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a95 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a100 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a101 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a108 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a109 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a110 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a111 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a116 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a117 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a118 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a123 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a126 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a127 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a129 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    r166: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a133 (r166,l0) best AREG, cover GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a134 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a135 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a136 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a137 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a138 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a139 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    r159: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r159,l0) best AREG, cover GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r132,l0) best GENERAL_REGS, cover GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r128,l0) best GENERAL_REGS, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r117,l0) best GENERAL_REGS, cover GENERAL_REGS
    r116: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r116,l0) best GENERAL_REGS, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a58 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a69 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a73 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a74 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a79 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a80 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a82 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a83 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a84 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a85 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a86 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a81 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a88 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a89 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a91 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a92 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a93 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a94 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a96 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a97 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a98 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a99 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a102 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a103 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a104 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a105 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a106 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a107 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a112 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a113 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a114 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a115 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a119 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a120 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a121 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a122 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a124 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a125 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a128 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a130 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a131 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a132 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r159,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r158,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a2(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r198,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r155,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a7(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a8(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a10(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a11(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a12(r197,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a13(r148,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a14(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a15(r196,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r144,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a19(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a20(r142,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a21(r141,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a22(r195,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r194,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r140,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a25(r139,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r138,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r193,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a29(r192,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a33(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a34(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a35(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a36(r191,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a39(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r128,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a41(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a42(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a43(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a44(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a45(r190,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a46(r189,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a48(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a49(r188,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a50(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a51(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a52(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a53(r117,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a54(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a55(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a56(r187,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a57(r186,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a58(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a59(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a60(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a61(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a62(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a63(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a64(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a65(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a66(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a67(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a68(r185,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a69(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a70(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a71(r184,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a72(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a73(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a74(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a75(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a76(r183,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a77(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a78(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a79(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a80(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a81(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a82(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a83(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a84(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a85(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a86(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a87(r182,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a88(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a89(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a90(r181,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a91(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a92(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a93(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a94(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a95(r180,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a96(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a97(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a98(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a99(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a100(r179,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a101(r178,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a102(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a103(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a104(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a105(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a106(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a107(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a108(r177,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a109(r176,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a110(r175,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a111(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a112(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a113(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a114(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a115(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a116(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a117(r172,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a118(r171,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a119(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a120(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a121(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a122(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a123(r170,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a124(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a125(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a126(r169,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a127(r168,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a128(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a129(r167,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a130(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a131(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a132(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a133(r166,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a134(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a135(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a136(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a137(r162,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a138(r161,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a139(r160,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8

   Insn 310(l0): point = 0
   Insn 307(l0): point = 2
   Insn 303(l0): point = 4
   Insn 302(l0): point = 6
   Insn 301(l0): point = 8
   Insn 300(l0): point = 10
   Insn 299(l0): point = 12
   Insn 298(l0): point = 14
   Insn 295(l0): point = 17
   Insn 294(l0): point = 19
   Insn 290(l0): point = 22
   Insn 287(l0): point = 25
   Insn 286(l0): point = 27
   Insn 285(l0): point = 29
   Insn 284(l0): point = 31
   Insn 283(l0): point = 33
   Insn 282(l0): point = 35
   Insn 281(l0): point = 37
   Insn 280(l0): point = 39
   Insn 279(l0): point = 41
   Insn 278(l0): point = 43
   Insn 277(l0): point = 45
   Insn 276(l0): point = 47
   Insn 275(l0): point = 49
   Insn 274(l0): point = 51
   Insn 273(l0): point = 53
   Insn 272(l0): point = 55
   Insn 271(l0): point = 57
   Insn 270(l0): point = 59
   Insn 269(l0): point = 61
   Insn 268(l0): point = 63
   Insn 267(l0): point = 65
   Insn 266(l0): point = 67
   Insn 265(l0): point = 69
   Insn 264(l0): point = 71
   Insn 263(l0): point = 73
   Insn 262(l0): point = 75
   Insn 261(l0): point = 77
   Insn 259(l0): point = 80
   Insn 258(l0): point = 82
   Insn 257(l0): point = 84
   Insn 254(l0): point = 87
   Insn 253(l0): point = 89
   Insn 252(l0): point = 91
   Insn 250(l0): point = 94
   Insn 249(l0): point = 96
   Insn 248(l0): point = 98
   Insn 246(l0): point = 101
   Insn 245(l0): point = 103
   Insn 244(l0): point = 105
   Insn 242(l0): point = 108
   Insn 241(l0): point = 110
   Insn 240(l0): point = 112
   Insn 239(l0): point = 114
   Insn 238(l0): point = 116
   Insn 237(l0): point = 118
   Insn 236(l0): point = 120
   Insn 235(l0): point = 122
   Insn 234(l0): point = 124
   Insn 233(l0): point = 126
   Insn 232(l0): point = 128
   Insn 231(l0): point = 130
   Insn 230(l0): point = 132
   Insn 317(l0): point = 135
   Insn 226(l0): point = 137
   Insn 225(l0): point = 139
   Insn 315(l0): point = 142
   Insn 220(l0): point = 144
   Insn 219(l0): point = 146
   Insn 218(l0): point = 148
   Insn 217(l0): point = 150
   Insn 216(l0): point = 152
   Insn 215(l0): point = 154
   Insn 214(l0): point = 156
   Insn 213(l0): point = 158
   Insn 212(l0): point = 160
   Insn 211(l0): point = 162
   Insn 210(l0): point = 164
   Insn 209(l0): point = 166
   Insn 208(l0): point = 168
   Insn 207(l0): point = 170
   Insn 206(l0): point = 172
   Insn 205(l0): point = 174
   Insn 204(l0): point = 176
   Insn 203(l0): point = 178
   Insn 202(l0): point = 180
   Insn 201(l0): point = 182
   Insn 200(l0): point = 184
   Insn 199(l0): point = 186
   Insn 198(l0): point = 188
   Insn 197(l0): point = 190
   Insn 196(l0): point = 192
   Insn 195(l0): point = 194
   Insn 194(l0): point = 196
   Insn 193(l0): point = 198
   Insn 190(l0): point = 201
   Insn 189(l0): point = 203
   Insn 187(l0): point = 206
   Insn 186(l0): point = 208
   Insn 183(l0): point = 211
   Insn 182(l0): point = 213
   Insn 181(l0): point = 215
   Insn 179(l0): point = 218
   Insn 178(l0): point = 220
   Insn 177(l0): point = 222
   Insn 175(l0): point = 225
   Insn 174(l0): point = 227
   Insn 173(l0): point = 229
   Insn 171(l0): point = 232
   Insn 170(l0): point = 234
   Insn 169(l0): point = 236
   Insn 166(l0): point = 239
   Insn 165(l0): point = 241
   Insn 164(l0): point = 243
   Insn 163(l0): point = 245
   Insn 162(l0): point = 247
   Insn 161(l0): point = 249
   Insn 160(l0): point = 251
   Insn 159(l0): point = 253
   Insn 158(l0): point = 255
   Insn 157(l0): point = 257
   Insn 156(l0): point = 259
   Insn 155(l0): point = 261
   Insn 154(l0): point = 263
   Insn 153(l0): point = 265
   Insn 152(l0): point = 267
   Insn 151(l0): point = 269
   Insn 150(l0): point = 271
   Insn 149(l0): point = 273
   Insn 148(l0): point = 275
   Insn 147(l0): point = 277
   Insn 146(l0): point = 279
   Insn 145(l0): point = 281
   Insn 144(l0): point = 283
   Insn 141(l0): point = 286
   Insn 140(l0): point = 288
   Insn 139(l0): point = 290
   Insn 137(l0): point = 293
   Insn 136(l0): point = 295
   Insn 135(l0): point = 297
   Insn 133(l0): point = 300
   Insn 132(l0): point = 302
   Insn 131(l0): point = 304
   Insn 129(l0): point = 307
   Insn 128(l0): point = 309
   Insn 127(l0): point = 311
   Insn 124(l0): point = 314
   Insn 123(l0): point = 316
   Insn 122(l0): point = 318
   Insn 121(l0): point = 320
   Insn 120(l0): point = 322
   Insn 119(l0): point = 324
   Insn 118(l0): point = 326
   Insn 117(l0): point = 328
   Insn 116(l0): point = 330
   Insn 115(l0): point = 332
   Insn 114(l0): point = 334
   Insn 113(l0): point = 336
   Insn 112(l0): point = 338
   Insn 111(l0): point = 340
   Insn 110(l0): point = 342
   Insn 109(l0): point = 344
   Insn 108(l0): point = 346
   Insn 107(l0): point = 348
   Insn 106(l0): point = 350
   Insn 105(l0): point = 352
   Insn 104(l0): point = 354
   Insn 101(l0): point = 357
   Insn 100(l0): point = 359
   Insn 99(l0): point = 361
   Insn 97(l0): point = 364
   Insn 96(l0): point = 366
   Insn 95(l0): point = 368
   Insn 93(l0): point = 371
   Insn 92(l0): point = 373
   Insn 91(l0): point = 375
   Insn 89(l0): point = 378
   Insn 88(l0): point = 380
   Insn 87(l0): point = 382
   Insn 86(l0): point = 384
   Insn 85(l0): point = 386
   Insn 84(l0): point = 388
   Insn 83(l0): point = 390
   Insn 82(l0): point = 392
   Insn 81(l0): point = 394
   Insn 80(l0): point = 396
   Insn 79(l0): point = 398
   Insn 78(l0): point = 400
   Insn 77(l0): point = 402
   Insn 76(l0): point = 404
   Insn 75(l0): point = 406
   Insn 74(l0): point = 408
   Insn 73(l0): point = 410
   Insn 72(l0): point = 412
   Insn 71(l0): point = 414
   Insn 70(l0): point = 416
   Insn 69(l0): point = 418
   Insn 68(l0): point = 420
   Insn 67(l0): point = 422
   Insn 66(l0): point = 424
   Insn 65(l0): point = 426
   Insn 64(l0): point = 428
   Insn 63(l0): point = 430
   Insn 62(l0): point = 432
   Insn 61(l0): point = 434
   Insn 60(l0): point = 436
   Insn 59(l0): point = 438
   Insn 58(l0): point = 440
   Insn 56(l0): point = 443
   Insn 55(l0): point = 445
   Insn 54(l0): point = 447
   Insn 53(l0): point = 449
   Insn 52(l0): point = 451
   Insn 51(l0): point = 453
   Insn 50(l0): point = 455
   Insn 49(l0): point = 457
   Insn 48(l0): point = 459
   Insn 47(l0): point = 461
   Insn 46(l0): point = 463
   Insn 43(l0): point = 466
   Insn 41(l0): point = 469
   Insn 40(l0): point = 471
   Insn 39(l0): point = 473
   Insn 37(l0): point = 476
   Insn 36(l0): point = 478
   Insn 32(l0): point = 481
   Insn 31(l0): point = 483
   Insn 30(l0): point = 485
   Insn 29(l0): point = 487
   Insn 28(l0): point = 489
   Insn 313(l0): point = 492
   Insn 24(l0): point = 494
   Insn 23(l0): point = 496
   Insn 22(l0): point = 498
   Insn 21(l0): point = 500
   Insn 20(l0): point = 502
   Insn 19(l0): point = 504
   Insn 18(l0): point = 506
   Insn 17(l0): point = 508
   Insn 16(l0): point = 510
   Insn 15(l0): point = 512
   Insn 14(l0): point = 514
   Insn 13(l0): point = 516
   Insn 12(l0): point = 518
   Insn 11(l0): point = 520
   Insn 10(l0): point = 522
   Insn 9(l0): point = 524
   Insn 8(l0): point = 526
   Insn 7(l0): point = 528
   Insn 6(l0): point = 530
   Insn 5(l0): point = 532
 a0(r159): [3..4]
 a1(r158): [5..6]
 a2(r157): [11..12]
 a3(r198): [13..14]
 a4(r149): [28..45]
 a5(r156): [28..29]
 a6(r155): [30..31]
 a7(r154): [32..33]
 a8(r153): [34..35]
 a9(r152): [34..37]
 a10(r151): [38..39]
 a11(r150): [38..41]
 a12(r197): [42..43]
 a13(r148): [46..47]
 a14(r147): [48..49]
 a15(r196): [60..61]
 a16(r146): [64..65]
 a17(r145): [66..67]
 a18(r144): [68..69]
 a19(r143): [68..71]
 a20(r142): [72..73]
 a21(r141): [72..75]
 a22(r195): [76..77]
 a23(r194): [83..84]
 a24(r140): [90..91]
 a25(r139): [97..98]
 a26(r138): [104..105]
 a27(r137): [111..112]
 a28(r193 [0]): [115..116]
 a28(r193 [1]): [115..116]
 a29(r192): [117..118]
 a30(r136): [117..120]
 a31(r135): [121..122]
 a32(r134): [123..124]
 a33(r133): [123..126]
 a34(r132): [127..128]
 a35(r131): [127..130]
 a36(r191): [131..132]
 a37(r123): [147..166]
 a38(r130): [147..148]
 a39(r129): [149..150]
 a40(r128): [151..152]
 a41(r127): [153..154]
 a42(r126): [153..156]
 a43(r125): [157..158]
 a44(r124): [157..162]
 a45(r190): [159..160]
 a46(r189): [163..164]
 a47(r122): [167..168]
 a48(r121): [169..170]
 a49(r188): [179..180]
 a50(r120): [183..184]
 a51(r119): [185..186]
 a52(r118): [187..188]
 a53(r117): [187..190]
 a54(r116): [191..192]
 a55(r115): [191..196]
 a56(r187): [193..194]
 a57(r186): [197..198]
 a58(r114): [214..215]
 a59(r113): [221..222]
 a60(r112): [228..229]
 a61(r111): [235..236]
 a62(r105): [242..255]
 a63(r110): [242..243]
 a64(r109): [244..245]
 a65(r108): [246..247]
 a66(r107): [248..249]
 a67(r106): [248..251]
 a68(r185): [252..253]
 a69(r104): [256..257]
 a70(r103): [258..259]
 a71(r184): [270..271]
 a72(r102): [274..275]
 a73(r101): [276..277]
 a74(r100): [278..279]
 a75(r99): [278..281]
 a76(r183): [282..283]
 a77(r98): [289..290]
 a78(r97): [296..297]
 a79(r96): [303..304]
 a80(r95): [310..311]
 a81(r89): [317..330]
 a82(r94): [317..318]
 a83(r93): [319..320]
 a84(r92): [321..322]
 a85(r91): [323..324]
 a86(r90): [323..326]
 a87(r182): [327..328]
 a88(r88): [331..332]
 a89(r87): [333..334]
 a90(r181): [341..342]
 a91(r86): [345..346]
 a92(r85): [347..348]
 a93(r84): [349..350]
 a94(r83): [349..352]
 a95(r180): [353..354]
 a96(r82): [360..361]
 a97(r81): [367..368]
 a98(r80): [374..375]
 a99(r79): [381..382]
 a100(r179 [0]): [389..390]
 a100(r179 [1]): [389..390]
 a101(r178): [391..392]
 a102(r78): [391..394]
 a103(r77): [395..396]
 a104(r76): [397..398]
 a105(r75): [397..400]
 a106(r74): [401..402]
 a107(r73): [401..406]
 a108(r177): [403..404]
 a109(r176): [407..408]
 a110(r175 [0]): [411..412]
 a110(r175 [1]): [411..412]
 a111(r174): [413..414]
 a112(r72): [413..416]
 a113(r71): [417..418]
 a114(r70): [419..420]
 a115(r69): [419..422]
 a116(r173): [423..424]
 a117(r172 [0]): [427..428]
 a117(r172 [1]): [427..428]
 a118(r171): [429..430]
 a119(r68): [429..432]
 a120(r67): [433..434]
 a121(r66): [435..436]
 a122(r65): [435..438]
 a123(r170): [439..440]
 a124(r64): [446..447]
 a125(r63): [446..451]
 a126(r169): [448..449]
 a127(r168): [452..453]
 a128(r62): [458..463]
 a129(r167): [460..461]
 a130(r61): [484..485]
 a131(r60): [486..487]
 a132(r59): [488..489]
 a133(r166): [499..500]
 a134(r165): [509..510]
 a135(r164): [513..514]
 a136(r163): [517..518]
 a137(r162): [523..524]
 a138(r161): [527..528]
 a139(r160): [531..532]
Compressing live ranges: from 535 to 224 - 41%
Ranges after the compression:
 a0(r159): [0..1]
 a1(r158): [2..3]
 a2(r157): [4..5]
 a3(r198): [6..7]
 a4(r149): [8..19]
 a5(r156): [8..9]
 a6(r155): [10..11]
 a7(r154): [12..13]
 a8(r153): [14..15]
 a9(r152): [14..15]
 a10(r151): [16..17]
 a11(r150): [16..17]
 a12(r197): [18..19]
 a13(r148): [20..21]
 a14(r147): [22..23]
 a15(r196): [24..25]
 a16(r146): [26..27]
 a17(r145): [28..29]
 a18(r144): [30..31]
 a19(r143): [30..31]
 a20(r142): [32..33]
 a21(r141): [32..33]
 a22(r195): [34..35]
 a23(r194): [36..37]
 a24(r140): [38..39]
 a25(r139): [40..41]
 a26(r138): [42..43]
 a27(r137): [44..45]
 a28(r193 [0]): [46..47]
 a28(r193 [1]): [46..47]
 a29(r192): [48..49]
 a30(r136): [48..49]
 a31(r135): [50..51]
 a32(r134): [52..53]
 a33(r133): [52..53]
 a34(r132): [54..55]
 a35(r131): [54..55]
 a36(r191): [56..57]
 a37(r123): [58..71]
 a38(r130): [58..59]
 a39(r129): [60..61]
 a40(r128): [62..63]
 a41(r127): [64..65]
 a42(r126): [64..65]
 a43(r125): [66..67]
 a44(r124): [66..69]
 a45(r190): [68..69]
 a46(r189): [70..71]
 a47(r122): [72..73]
 a48(r121): [74..75]
 a49(r188): [76..77]
 a50(r120): [78..79]
 a51(r119): [80..81]
 a52(r118): [82..83]
 a53(r117): [82..83]
 a54(r116): [84..85]
 a55(r115): [84..87]
 a56(r187): [86..87]
 a57(r186): [88..89]
 a58(r114): [90..91]
 a59(r113): [92..93]
 a60(r112): [94..95]
 a61(r111): [96..97]
 a62(r105): [98..107]
 a63(r110): [98..99]
 a64(r109): [100..101]
 a65(r108): [102..103]
 a66(r107): [104..105]
 a67(r106): [104..105]
 a68(r185): [106..107]
 a69(r104): [108..109]
 a70(r103): [110..111]
 a71(r184): [112..113]
 a72(r102): [114..115]
 a73(r101): [116..117]
 a74(r100): [118..119]
 a75(r99): [118..119]
 a76(r183): [120..121]
 a77(r98): [122..123]
 a78(r97): [124..125]
 a79(r96): [126..127]
 a80(r95): [128..129]
 a81(r89): [130..139]
 a82(r94): [130..131]
 a83(r93): [132..133]
 a84(r92): [134..135]
 a85(r91): [136..137]
 a86(r90): [136..137]
 a87(r182): [138..139]
 a88(r88): [140..141]
 a89(r87): [142..143]
 a90(r181): [144..145]
 a91(r86): [146..147]
 a92(r85): [148..149]
 a93(r84): [150..151]
 a94(r83): [150..151]
 a95(r180): [152..153]
 a96(r82): [154..155]
 a97(r81): [156..157]
 a98(r80): [158..159]
 a99(r79): [160..161]
 a100(r179 [0]): [162..163]
 a100(r179 [1]): [162..163]
 a101(r178): [164..165]
 a102(r78): [164..165]
 a103(r77): [166..167]
 a104(r76): [168..169]
 a105(r75): [168..169]
 a106(r74): [170..171]
 a107(r73): [170..173]
 a108(r177): [172..173]
 a109(r176): [174..175]
 a110(r175 [0]): [176..177]
 a110(r175 [1]): [176..177]
 a111(r174): [178..179]
 a112(r72): [178..179]
 a113(r71): [180..181]
 a114(r70): [182..183]
 a115(r69): [182..183]
 a116(r173): [184..185]
 a117(r172 [0]): [186..187]
 a117(r172 [1]): [186..187]
 a118(r171): [188..189]
 a119(r68): [188..189]
 a120(r67): [190..191]
 a121(r66): [192..193]
 a122(r65): [192..193]
 a123(r170): [194..195]
 a124(r64): [196..197]
 a125(r63): [196..199]
 a126(r169): [198..199]
 a127(r168): [200..201]
 a128(r62): [202..203]
 a129(r167): [202..203]
 a130(r61): [204..205]
 a131(r60): [206..207]
 a132(r59): [208..209]
 a133(r166): [210..211]
 a134(r165): [212..213]
 a135(r164): [214..215]
 a136(r163): [216..217]
 a137(r162): [218..219]
 a138(r161): [220..221]
 a139(r160): [222..223]
  regions=3, blocks=35, points=224
    allocnos=140 (big 4), copies=0, conflicts=0, ranges=144
Disposition:
  132:r59  l0     0  131:r60  l0     0  130:r61  l0     0  128:r62  l0     0
  125:r63  l0     1  124:r64  l0     0  122:r65  l0     1  121:r66  l0     0
  120:r67  l0     0  119:r68  l0     1  115:r69  l0     1  114:r70  l0     0
  113:r71  l0     0  112:r72  l0     1  107:r73  l0     1  106:r74  l0     0
  105:r75  l0     1  104:r76  l0     0  103:r77  l0     0  102:r78  l0     1
   99:r79  l0     0   98:r80  l0     0   97:r81  l0     0   96:r82  l0     0
   94:r83  l0     1   93:r84  l0     0   92:r85  l0     0   91:r86  l0     0
   89:r87  l0     0   88:r88  l0     0   81:r89  l0     0   86:r90  l0     2
   85:r91  l0     1   84:r92  l0     1   83:r93  l0     1   82:r94  l0     1
   80:r95  l0     0   79:r96  l0     0   78:r97  l0     0   77:r98  l0     0
   75:r99  l0     1   74:r100 l0     0   73:r101 l0     0   72:r102 l0     0
   70:r103 l0     0   69:r104 l0     0   62:r105 l0     0   67:r106 l0     2
   66:r107 l0     1   65:r108 l0     1   64:r109 l0     1   63:r110 l0     1
   61:r111 l0     0   60:r112 l0     0   59:r113 l0     0   58:r114 l0     0
   55:r115 l0     1   54:r116 l0     0   53:r117 l0     1   52:r118 l0     0
   51:r119 l0     0   50:r120 l0     0   48:r121 l0     0   47:r122 l0     0
   37:r123 l0     0   44:r124 l0     2   43:r125 l0     1   42:r126 l0     2
   41:r127 l0     1   40:r128 l0     1   39:r129 l0     1   38:r130 l0     1
   35:r131 l0     1   34:r132 l0     0   33:r133 l0     1   32:r134 l0     0
   31:r135 l0     0   30:r136 l0     1   27:r137 l0     0   26:r138 l0     0
   25:r139 l0     0   24:r140 l0     0   21:r141 l0     1   20:r142 l0     0
   19:r143 l0     1   18:r144 l0     0   17:r145 l0     0   16:r146 l0     0
   14:r147 l0     0   13:r148 l0     0    4:r149 l0     0   11:r150 l0     2
   10:r151 l0     1    9:r152 l0     2    8:r153 l0     1    7:r154 l0     1
    6:r155 l0     1    5:r156 l0     1    2:r157 l0     0    1:r158 l0     0
    0:r159 l0     0  139:r160 l0     0  138:r161 l0     0  137:r162 l0     0
  136:r163 l0     0  135:r164 l0     0  134:r165 l0     0  133:r166 l0     0
  129:r167 l0     1  127:r168 l0     0  126:r169 l0     0  123:r170 l0     0
  118:r171 l0     0  117:r172 l0     0  116:r173 l0     0  111:r174 l0     0
  110:r175 l0     0  109:r176 l0     0  108:r177 l0     0  101:r178 l0     0
  100:r179 l0     0   95:r180 l0     0   90:r181 l0     0   87:r182 l0     1
   76:r183 l0     0   71:r184 l0     0   68:r185 l0     1   57:r186 l0     0
   56:r187 l0     0   49:r188 l0     0   46:r189 l0     1   45:r190 l0     1
   36:r191 l0     0   29:r192 l0     0   28:r193 l0     0   23:r194 l0     0
   22:r195 l0     0   15:r196 l0     0   12:r197 l0     1    3:r198 l0     0
+++Costs: overall -2, reg -2, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 160
insn=6, live_throughout: 7, dead_or_set: 160
insn=7, live_throughout: 7, dead_or_set: 161
insn=8, live_throughout: 7, dead_or_set: 161
insn=9, live_throughout: 7, dead_or_set: 162
insn=10, live_throughout: 7, dead_or_set: 162
insn=11, live_throughout: 7, dead_or_set: 
insn=12, live_throughout: 7, dead_or_set: 163
insn=13, live_throughout: 7, dead_or_set: 163
insn=14, live_throughout: 7, dead_or_set: 164
insn=15, live_throughout: 7, dead_or_set: 164
insn=16, live_throughout: 7, dead_or_set: 165
insn=17, live_throughout: 7, dead_or_set: 165
insn=18, live_throughout: 7, dead_or_set: 
insn=19, live_throughout: 7, dead_or_set: 
insn=20, live_throughout: 7, dead_or_set: 0
insn=21, live_throughout: 7, dead_or_set: 0, 166
insn=22, live_throughout: 7, dead_or_set: 166
insn=23, live_throughout: 7, dead_or_set: 
insn=24, live_throughout: 7, dead_or_set: 
insn=313, live_throughout: 7, dead_or_set: 
insn=35, live_throughout: 7, dead_or_set: 
insn=28, live_throughout: 7, dead_or_set: 59
insn=29, live_throughout: 7, dead_or_set: 59, 60
insn=30, live_throughout: 7, dead_or_set: 60, 61
insn=31, live_throughout: 7, dead_or_set: 61
insn=32, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 
insn=37, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 
insn=41, live_throughout: 7, dead_or_set: 
insn=43, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 62
insn=47, live_throughout: 7, 62, dead_or_set: 167
insn=48, live_throughout: 7, 62, dead_or_set: 167
insn=49, live_throughout: 7, dead_or_set: 62
insn=50, live_throughout: 7, dead_or_set: 0
insn=51, live_throughout: 7, dead_or_set: 168
insn=52, live_throughout: 7, dead_or_set: 63, 168
insn=53, live_throughout: 7, 63, dead_or_set: 169
insn=54, live_throughout: 7, 63, dead_or_set: 64, 169
insn=55, live_throughout: 7, dead_or_set: 63, 64
insn=56, live_throughout: 7, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 170
insn=59, live_throughout: 7, dead_or_set: 65, 170
insn=60, live_throughout: 7, 65, dead_or_set: 66
insn=61, live_throughout: 7, dead_or_set: 65, 66, 67
insn=62, live_throughout: 7, dead_or_set: 67, 68
insn=63, live_throughout: 7, 68, dead_or_set: 171
insn=64, live_throughout: 7, dead_or_set: 68, 171, 172
insn=65, live_throughout: 7, dead_or_set: 172
insn=66, live_throughout: 7, dead_or_set: 173
insn=67, live_throughout: 7, dead_or_set: 69, 173
insn=68, live_throughout: 7, 69, dead_or_set: 70
insn=69, live_throughout: 7, dead_or_set: 69, 70, 71
insn=70, live_throughout: 7, dead_or_set: 71, 72
insn=71, live_throughout: 7, 72, dead_or_set: 174
insn=72, live_throughout: 7, dead_or_set: 72, 174, 175
insn=73, live_throughout: 7, dead_or_set: 175
insn=74, live_throughout: 7, dead_or_set: 176
insn=75, live_throughout: 7, dead_or_set: 73, 176
insn=76, live_throughout: 7, 73, dead_or_set: 177
insn=77, live_throughout: 7, 73, dead_or_set: 74, 177
insn=78, live_throughout: 7, dead_or_set: 73, 74, 75
insn=79, live_throughout: 7, 75, dead_or_set: 76
insn=80, live_throughout: 7, dead_or_set: 75, 76, 77
insn=81, live_throughout: 7, dead_or_set: 77, 78
insn=82, live_throughout: 7, 78, dead_or_set: 178
insn=83, live_throughout: 7, dead_or_set: 78, 178, 179
insn=84, live_throughout: 7, dead_or_set: 179
insn=85, live_throughout: 7, dead_or_set: 
insn=86, live_throughout: 7, dead_or_set: 
insn=87, live_throughout: 7, dead_or_set: 79
insn=88, live_throughout: 7, dead_or_set: 79
insn=89, live_throughout: 7, dead_or_set: 
insn=91, live_throughout: 7, dead_or_set: 80
insn=92, live_throughout: 7, dead_or_set: 80
insn=93, live_throughout: 7, dead_or_set: 
insn=95, live_throughout: 7, dead_or_set: 81
insn=96, live_throughout: 7, dead_or_set: 81
insn=97, live_throughout: 7, dead_or_set: 
insn=99, live_throughout: 7, dead_or_set: 82
insn=100, live_throughout: 7, dead_or_set: 82
insn=101, live_throughout: 7, dead_or_set: 
insn=102, live_throughout: 7, dead_or_set: 
insn=104, live_throughout: 7, dead_or_set: 180
insn=105, live_throughout: 7, dead_or_set: 83, 180
insn=106, live_throughout: 7, 83, dead_or_set: 84
insn=107, live_throughout: 7, dead_or_set: 83, 84, 85
insn=108, live_throughout: 7, dead_or_set: 85, 86
insn=109, live_throughout: 7, dead_or_set: 86
insn=110, live_throughout: 7, dead_or_set: 181
insn=111, live_throughout: 7, dead_or_set: 181
insn=112, live_throughout: 7, dead_or_set: 
insn=113, live_throughout: 7, dead_or_set: 
insn=114, live_throughout: 7, dead_or_set: 87
insn=115, live_throughout: 7, dead_or_set: 87, 88
insn=116, live_throughout: 7, dead_or_set: 88, 89
insn=117, live_throughout: 7, 89, dead_or_set: 182
insn=118, live_throughout: 7, 89, dead_or_set: 90, 182
insn=119, live_throughout: 7, 89, 90, dead_or_set: 91
insn=120, live_throughout: 7, 89, dead_or_set: 90, 91, 92
insn=121, live_throughout: 7, 89, dead_or_set: 92, 93
insn=122, live_throughout: 7, 89, dead_or_set: 93, 94
insn=123, live_throughout: 7, dead_or_set: 89, 94
insn=124, live_throughout: 7, dead_or_set: 
insn=125, live_throughout: 7, dead_or_set: 
insn=127, live_throughout: 7, dead_or_set: 95
insn=128, live_throughout: 7, dead_or_set: 95
insn=129, live_throughout: 7, dead_or_set: 
insn=131, live_throughout: 7, dead_or_set: 96
insn=132, live_throughout: 7, dead_or_set: 96
insn=133, live_throughout: 7, dead_or_set: 
insn=135, live_throughout: 7, dead_or_set: 97
insn=136, live_throughout: 7, dead_or_set: 97
insn=137, live_throughout: 7, dead_or_set: 
insn=139, live_throughout: 7, dead_or_set: 98
insn=140, live_throughout: 7, dead_or_set: 98
insn=141, live_throughout: 7, dead_or_set: 
insn=142, live_throughout: 7, dead_or_set: 
insn=144, live_throughout: 7, dead_or_set: 183
insn=145, live_throughout: 7, dead_or_set: 99, 183
insn=146, live_throughout: 7, 99, dead_or_set: 100
insn=147, live_throughout: 7, dead_or_set: 99, 100, 101
insn=148, live_throughout: 7, dead_or_set: 101, 102
insn=149, live_throughout: 7, dead_or_set: 102
insn=150, live_throughout: 7, dead_or_set: 184
insn=151, live_throughout: 7, dead_or_set: 184
insn=152, live_throughout: 7, dead_or_set: 
insn=153, live_throughout: 7, dead_or_set: 
insn=154, live_throughout: 7, dead_or_set: 0
insn=155, live_throughout: 7, dead_or_set: 
insn=156, live_throughout: 7, dead_or_set: 103
insn=157, live_throughout: 7, dead_or_set: 103, 104
insn=158, live_throughout: 7, dead_or_set: 104, 105
insn=159, live_throughout: 7, 105, dead_or_set: 185
insn=160, live_throughout: 7, 105, dead_or_set: 106, 185
insn=161, live_throughout: 7, 105, 106, dead_or_set: 107
insn=162, live_throughout: 7, 105, dead_or_set: 106, 107, 108
insn=163, live_throughout: 7, 105, dead_or_set: 108, 109
insn=164, live_throughout: 7, 105, dead_or_set: 109, 110
insn=165, live_throughout: 7, dead_or_set: 105, 110
insn=166, live_throughout: 7, dead_or_set: 
insn=167, live_throughout: 7, dead_or_set: 
insn=169, live_throughout: 7, dead_or_set: 111
insn=170, live_throughout: 7, dead_or_set: 111
insn=171, live_throughout: 7, dead_or_set: 
insn=173, live_throughout: 7, dead_or_set: 112
insn=174, live_throughout: 7, dead_or_set: 112
insn=175, live_throughout: 7, dead_or_set: 
insn=177, live_throughout: 7, dead_or_set: 113
insn=178, live_throughout: 7, dead_or_set: 113
insn=179, live_throughout: 7, dead_or_set: 
insn=181, live_throughout: 7, dead_or_set: 114
insn=182, live_throughout: 7, dead_or_set: 114
insn=183, live_throughout: 7, dead_or_set: 
insn=184, live_throughout: 7, dead_or_set: 
insn=186, live_throughout: 7, dead_or_set: 
insn=187, live_throughout: 7, dead_or_set: 
insn=189, live_throughout: 7, dead_or_set: 
insn=190, live_throughout: 7, dead_or_set: 
insn=191, live_throughout: 7, dead_or_set: 
insn=193, live_throughout: 7, dead_or_set: 186
insn=194, live_throughout: 7, dead_or_set: 115, 186
insn=195, live_throughout: 7, 115, dead_or_set: 187
insn=196, live_throughout: 7, 115, dead_or_set: 116, 187
insn=197, live_throughout: 7, dead_or_set: 115, 116, 117
insn=198, live_throughout: 7, 117, dead_or_set: 118
insn=199, live_throughout: 7, dead_or_set: 117, 118, 119
insn=200, live_throughout: 7, dead_or_set: 119, 120
insn=201, live_throughout: 7, dead_or_set: 120
insn=202, live_throughout: 7, dead_or_set: 188
insn=203, live_throughout: 7, dead_or_set: 188
insn=204, live_throughout: 7, dead_or_set: 
insn=205, live_throughout: 7, dead_or_set: 
insn=206, live_throughout: 7, dead_or_set: 0
insn=207, live_throughout: 7, dead_or_set: 121
insn=208, live_throughout: 7, dead_or_set: 121, 122
insn=209, live_throughout: 7, dead_or_set: 122, 123
insn=210, live_throughout: 7, 123, dead_or_set: 189
insn=211, live_throughout: 7, 123, dead_or_set: 124, 189
insn=212, live_throughout: 7, 123, 124, dead_or_set: 190
insn=213, live_throughout: 7, 123, 124, dead_or_set: 125, 190
insn=214, live_throughout: 7, 123, dead_or_set: 124, 125, 126
insn=215, live_throughout: 7, 123, 126, dead_or_set: 127
insn=216, live_throughout: 7, 123, dead_or_set: 126, 127, 128
insn=217, live_throughout: 7, 123, dead_or_set: 128, 129
insn=218, live_throughout: 7, 123, dead_or_set: 129, 130
insn=219, live_throughout: 7, dead_or_set: 123, 130
insn=220, live_throughout: 7, dead_or_set: 
insn=315, live_throughout: 7, dead_or_set: 
insn=223, live_throughout: 7, dead_or_set: 
insn=225, live_throughout: 7, dead_or_set: 
insn=226, live_throughout: 7, dead_or_set: 
insn=317, live_throughout: 7, dead_or_set: 
insn=293, live_throughout: 7, dead_or_set: 
insn=230, live_throughout: 7, dead_or_set: 191
insn=231, live_throughout: 7, dead_or_set: 131, 191
insn=232, live_throughout: 7, 131, dead_or_set: 132
insn=233, live_throughout: 7, dead_or_set: 131, 132, 133
insn=234, live_throughout: 7, 133, dead_or_set: 134
insn=235, live_throughout: 7, dead_or_set: 133, 134, 135
insn=236, live_throughout: 7, dead_or_set: 135, 136
insn=237, live_throughout: 7, 136, dead_or_set: 192
insn=238, live_throughout: 7, dead_or_set: 136, 192, 193
insn=239, live_throughout: 7, dead_or_set: 193
insn=240, live_throughout: 7, dead_or_set: 137
insn=241, live_throughout: 7, dead_or_set: 137
insn=242, live_throughout: 7, dead_or_set: 
insn=244, live_throughout: 7, dead_or_set: 138
insn=245, live_throughout: 7, dead_or_set: 138
insn=246, live_throughout: 7, dead_or_set: 
insn=248, live_throughout: 7, dead_or_set: 139
insn=249, live_throughout: 7, dead_or_set: 139
insn=250, live_throughout: 7, dead_or_set: 
insn=252, live_throughout: 7, dead_or_set: 140
insn=253, live_throughout: 7, dead_or_set: 140
insn=254, live_throughout: 7, dead_or_set: 
insn=255, live_throughout: 7, dead_or_set: 
insn=257, live_throughout: 7, dead_or_set: 194
insn=258, live_throughout: 7, dead_or_set: 194
insn=259, live_throughout: 7, dead_or_set: 
insn=261, live_throughout: 7, dead_or_set: 195
insn=262, live_throughout: 7, dead_or_set: 141, 195
insn=263, live_throughout: 7, 141, dead_or_set: 142
insn=264, live_throughout: 7, dead_or_set: 141, 142, 143
insn=265, live_throughout: 7, 143, dead_or_set: 144
insn=266, live_throughout: 7, dead_or_set: 143, 144, 145
insn=267, live_throughout: 7, dead_or_set: 145, 146
insn=268, live_throughout: 7, dead_or_set: 146
insn=269, live_throughout: 7, dead_or_set: 196
insn=270, live_throughout: 7, dead_or_set: 196
insn=271, live_throughout: 7, dead_or_set: 
insn=272, live_throughout: 7, dead_or_set: 
insn=273, live_throughout: 7, dead_or_set: 0
insn=274, live_throughout: 7, dead_or_set: 
insn=275, live_throughout: 7, dead_or_set: 147
insn=276, live_throughout: 7, dead_or_set: 147, 148
insn=277, live_throughout: 7, dead_or_set: 148, 149
insn=278, live_throughout: 7, 149, dead_or_set: 197
insn=279, live_throughout: 7, 149, dead_or_set: 150, 197
insn=280, live_throughout: 7, 149, 150, dead_or_set: 151
insn=281, live_throughout: 7, 149, dead_or_set: 150, 151, 152
insn=282, live_throughout: 7, 149, 152, dead_or_set: 153
insn=283, live_throughout: 7, 149, dead_or_set: 152, 153, 154
insn=284, live_throughout: 7, 149, dead_or_set: 154, 155
insn=285, live_throughout: 7, 149, dead_or_set: 155, 156
insn=286, live_throughout: 7, dead_or_set: 149, 156
insn=287, live_throughout: 7, dead_or_set: 
insn=288, live_throughout: 7, dead_or_set: 
insn=290, live_throughout: 7, dead_or_set: 
insn=291, live_throughout: 7, dead_or_set: 
insn=294, live_throughout: 7, dead_or_set: 
insn=295, live_throughout: 7, dead_or_set: 
insn=296, live_throughout: 7, dead_or_set: 
insn=298, live_throughout: 7, dead_or_set: 198
insn=299, live_throughout: 7, dead_or_set: 157, 198
insn=300, live_throughout: 7, dead_or_set: 157
insn=301, live_throughout: 7, dead_or_set: 0
insn=302, live_throughout: 7, dead_or_set: 158
insn=303, live_throughout: 7, dead_or_set: 158, 159
insn=307, live_throughout: 7, dead_or_set: 0, 159
insn=310, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 46
changing reg in insn 49
changing reg in insn 52
changing reg in insn 55
changing reg in insn 54
changing reg in insn 55
changing reg in insn 59
changing reg in insn 61
changing reg in insn 60
changing reg in insn 61
changing reg in insn 61
changing reg in insn 62
changing reg in insn 62
changing reg in insn 64
changing reg in insn 67
changing reg in insn 69
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 72
changing reg in insn 75
changing reg in insn 78
changing reg in insn 77
changing reg in insn 78
changing reg in insn 78
changing reg in insn 80
changing reg in insn 79
changing reg in insn 80
changing reg in insn 80
changing reg in insn 81
changing reg in insn 81
changing reg in insn 83
changing reg in insn 87
changing reg in insn 88
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 99
changing reg in insn 100
changing reg in insn 105
changing reg in insn 107
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 108
changing reg in insn 109
changing reg in insn 114
changing reg in insn 115
changing reg in insn 115
changing reg in insn 116
changing reg in insn 116
changing reg in insn 123
changing reg in insn 118
changing reg in insn 120
changing reg in insn 119
changing reg in insn 120
changing reg in insn 120
changing reg in insn 121
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 123
changing reg in insn 127
changing reg in insn 128
changing reg in insn 131
changing reg in insn 132
changing reg in insn 135
changing reg in insn 136
changing reg in insn 139
changing reg in insn 140
changing reg in insn 145
changing reg in insn 147
changing reg in insn 146
changing reg in insn 147
changing reg in insn 147
changing reg in insn 148
changing reg in insn 148
changing reg in insn 149
changing reg in insn 156
changing reg in insn 157
changing reg in insn 157
changing reg in insn 158
changing reg in insn 158
changing reg in insn 165
changing reg in insn 160
changing reg in insn 162
changing reg in insn 161
changing reg in insn 162
changing reg in insn 162
changing reg in insn 163
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 169
changing reg in insn 170
changing reg in insn 173
changing reg in insn 174
changing reg in insn 177
changing reg in insn 178
changing reg in insn 181
changing reg in insn 182
changing reg in insn 194
changing reg in insn 197
changing reg in insn 196
changing reg in insn 197
changing reg in insn 197
changing reg in insn 199
changing reg in insn 198
changing reg in insn 199
changing reg in insn 199
changing reg in insn 200
changing reg in insn 200
changing reg in insn 201
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 209
changing reg in insn 219
changing reg in insn 211
changing reg in insn 214
changing reg in insn 213
changing reg in insn 214
changing reg in insn 214
changing reg in insn 216
changing reg in insn 215
changing reg in insn 216
changing reg in insn 216
changing reg in insn 217
changing reg in insn 217
changing reg in insn 218
changing reg in insn 218
changing reg in insn 219
changing reg in insn 231
changing reg in insn 233
changing reg in insn 232
changing reg in insn 233
changing reg in insn 233
changing reg in insn 235
changing reg in insn 234
changing reg in insn 235
changing reg in insn 235
changing reg in insn 236
changing reg in insn 236
changing reg in insn 238
changing reg in insn 240
changing reg in insn 241
changing reg in insn 244
changing reg in insn 245
changing reg in insn 248
changing reg in insn 249
changing reg in insn 252
changing reg in insn 253
changing reg in insn 262
changing reg in insn 264
changing reg in insn 263
changing reg in insn 264
changing reg in insn 264
changing reg in insn 266
changing reg in insn 265
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 267
changing reg in insn 268
changing reg in insn 275
changing reg in insn 276
changing reg in insn 276
changing reg in insn 277
changing reg in insn 277
changing reg in insn 286
changing reg in insn 279
changing reg in insn 281
changing reg in insn 280
changing reg in insn 281
changing reg in insn 281
changing reg in insn 283
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 284
changing reg in insn 285
changing reg in insn 285
changing reg in insn 286
changing reg in insn 299
changing reg in insn 300
changing reg in insn 302
changing reg in insn 303
changing reg in insn 303
changing reg in insn 307
changing reg in insn 5
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 10
changing reg in insn 12
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 58
changing reg in insn 59
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 71
changing reg in insn 72
changing reg in insn 72
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 83
changing reg in insn 84
changing reg in insn 104
changing reg in insn 105
changing reg in insn 110
changing reg in insn 111
changing reg in insn 117
changing reg in insn 118
changing reg in insn 144
changing reg in insn 145
changing reg in insn 150
changing reg in insn 151
changing reg in insn 159
changing reg in insn 160
changing reg in insn 193
changing reg in insn 194
changing reg in insn 195
changing reg in insn 196
changing reg in insn 202
changing reg in insn 203
changing reg in insn 210
changing reg in insn 211
changing reg in insn 212
changing reg in insn 213
changing reg in insn 230
changing reg in insn 231
changing reg in insn 237
changing reg in insn 238
changing reg in insn 238
changing reg in insn 239
changing reg in insn 257
changing reg in insn 258
changing reg in insn 261
changing reg in insn 262
changing reg in insn 269
changing reg in insn 270
changing reg in insn 278
changing reg in insn 279
changing reg in insn 298
changing reg in insn 299
Spilling for insn 62.
Spilling for insn 70.
Spilling for insn 81.
Spilling for insn 236.

Reloads for insn # 62
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:67 D.5543 ] [67])
	reload_out (SI) = (reg:SI 1 dx [orig:68 D.5544 ] [68])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:67 D.5543 ] [67])
	reload_out_reg: (reg:SI 1 dx [orig:68 D.5544 ] [68])
	reload_reg_rtx: (reg:SI 1 dx [orig:68 D.5544 ] [68])

Reloads for insn # 70
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:71 D.5547 ] [71])
	reload_out (SI) = (reg:SI 1 dx [orig:72 D.5548 ] [72])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:71 D.5547 ] [71])
	reload_out_reg: (reg:SI 1 dx [orig:72 D.5548 ] [72])
	reload_reg_rtx: (reg:SI 1 dx [orig:72 D.5548 ] [72])

Reloads for insn # 81
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:77 D.5553 ] [77])
	reload_out (SI) = (reg:SI 1 dx [orig:78 D.5554 ] [78])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:77 D.5553 ] [77])
	reload_out_reg: (reg:SI 1 dx [orig:78 D.5554 ] [78])
	reload_reg_rtx: (reg:SI 1 dx [orig:78 D.5554 ] [78])

Reloads for insn # 236
Reload 0: reload_in (SI) = (reg:SI 0 ax [orig:135 D.5629 ] [135])
	reload_out (SI) = (reg:SI 1 dx [orig:136 D.5630 ] [136])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 0 ax [orig:135 D.5629 ] [135])
	reload_out_reg: (reg:SI 1 dx [orig:136 D.5630 ] [136])
	reload_reg_rtx: (reg:SI 1 dx [orig:136 D.5630 ] [136])
deleting insn with uid = 21.
deleting insn with uid = 122.
deleting insn with uid = 164.
deleting insn with uid = 218.
deleting insn with uid = 285.
deleting insn with uid = 303.
deleting insn with uid = 307.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 20.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 112.
verify found no changes in insn with uid = 152.
verify found no changes in insn with uid = 154.
verify found no changes in insn with uid = 204.
verify found no changes in insn with uid = 206.
verify found no changes in insn with uid = 271.
verify found no changes in insn with uid = 273.
verify found no changes in insn with uid = 301.


Display_Arrow_Possibilities

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={104d,93u} r1={58d,45u} r2={19d,6u} r6={1d,165u} r7={1d,67u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r17={82d,23u} r18={12d} r19={12d} r20={1d,1u} r21={12d} r22={12d} r23={12d} r24={12d} r25={12d} r26={12d} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} 
;;    total ref usage 1170{770d,400u,0e} in 248{236 regular + 12 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 160 161 162 163 164 165 166

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [160])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 24 [0x18])) [0 game+0 S4 A32])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 0 ax [160])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (set (reg/f:SI 0 ax [161])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(insn 8 7 9 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [161])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg/f:SI 0 ax [162])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(insn 10 9 11 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [162])) src/gui.c:864 64 {*movsi_internal}
     (nil))

(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:SI ("Display_RefreshGameBoard") [flags 0x3]  <function_decl 0x4081a780 Display_RefreshGameBoard>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:864 618 {*call_0}
     (nil)
    (nil))

(insn 12 11 13 2 (set (reg:SI 0 ax [163])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 20 [0x14])) [0 depart+0 S4 A32])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(insn 13 12 14 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 0 ax [163])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(insn 14 13 15 2 (set (reg/f:SI 0 ax [164])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(insn 15 14 16 2 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/f:SI 0 ax [164])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(insn 16 15 17 2 (set (reg/f:SI 0 ax [165])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(insn 17 16 18 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [165])) src/gui.c:865 64 {*movsi_internal}
     (nil))

(call_insn 18 17 19 2 (call (mem:QI (symbol_ref:SI ("colorChecker") [flags 0x3]  <function_decl 0x4081a680 colorChecker>) [0 S1 A8])
        (const_int 12 [0xc])) src/gui.c:865 618 {*call_0}
     (nil)
    (nil))

(insn 19 18 20 2 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (const_int 112 [0x70])) src/gui.c:867 64 {*movsi_internal}
     (nil))

(call_insn 20 19 22 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("malloc") [flags 0x41]  <function_decl 0x406c3400 malloc>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:867 927 {*call_value_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

(insn 22 20 23 2 (set (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])
        (reg/f:SI 0 ax [166])) src/gui.c:867 64 {*movsi_internal}
     (nil))

(insn 23 22 24 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
        (const_int 0 [0])) src/gui.c:868 64 {*movsi_internal}
     (nil))

(insn 24 23 313 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:869 64 {*movsi_internal}
     (nil))

(jump_insn 313 24 314 2 (set (pc)
        (label_ref 33)) src/gui.c:869 606 {jump}
     (nil)
 -> 33)
;; End of basic block 2 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 [100.0%] 

(barrier 314 313 35)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61

;; Pred edge  4
(code_label 35 314 27 3 175 "" [1 uses])

(note 27 35 28 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 3 (set (reg:SI 0 ax [orig:59 i.2 ] [59])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])) src/gui.c:869 64 {*movsi_internal}
     (nil))

(insn 29 28 30 3 (parallel [
            (set (reg:SI 0 ax [orig:60 D.5532 ] [60])
                (ashift:SI (reg:SI 0 ax [orig:59 i.2 ] [59])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:869 497 {*ashlsi3_1}
     (nil))

(insn 30 29 31 3 (parallel [
            (set (reg/f:SI 0 ax [orig:61 D.5533 ] [61])
                (plus:SI (reg:SI 0 ax [orig:60 D.5532 ] [60])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:869 252 {*addsi_1}
     (nil))

(insn 31 30 32 3 (set (mem:SI (reg/f:SI 0 ax [orig:61 D.5533 ] [61]) [0 *D.5533_21+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:869 64 {*movsi_internal}
     (nil))

(insn 32 31 33 3 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:869 252 {*addsi_1}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 33 32 34 4 174 "" [1 uses])

(note 34 33 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 36 34 37 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 i+0 S4 A32])
            (const_int 27 [0x1b]))) src/gui.c:869 6 {*cmpsi_1}
     (nil))

(jump_insn 37 36 38 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) src/gui.c:869 591 {*jcc_1}
     (nil)
 -> 35)
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  5 (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  4 (fallthru)
(note 38 37 39 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 39 38 40 5 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:870 64 {*movsi_internal}
     (nil))

(insn 40 39 41 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32])
            (const_int 1 [0x1]))) src/gui.c:871 6 {*cmpsi_1}
     (nil))

(jump_insn 41 40 42 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) src/gui.c:871 591 {*jcc_1}
     (nil)
 -> 44)
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5 (fallthru)
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 6 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])
        (const_int -1 [0xffffffffffffffff])) src/gui.c:873 64 {*movsi_internal}
     (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 62 63 64 167 168 169

;; Pred edge  5
;; Pred edge  6 (fallthru)
(code_label 44 43 45 7 176 "" [1 uses])

(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 7 (set (reg/f:SI 0 ax [orig:62 D.5536 ] [62])
        (symbol_ref/f:SI ("*.LC29") [flags 0x2]  <var_decl 0x409cd1e0 *.LC29>)) src/gui.c:875 64 {*movsi_internal}
     (nil))

(insn 47 46 48 7 (set (reg:SI 1 dx [167])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:875 64 {*movsi_internal}
     (nil))

(insn 48 47 49 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [167])) src/gui.c:875 64 {*movsi_internal}
     (nil))

(insn 49 48 50 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:62 D.5536 ] [62])) src/gui.c:875 64 {*movsi_internal}
     (nil))

(call_insn 50 49 51 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 8 [0x8]))) src/gui.c:875 927 {*call_value_0}
     (nil)
    (nil))

(insn 51 50 52 7 (set (reg/f:SI 0 ax [168])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:876 64 {*movsi_internal}
     (nil))

(insn 52 51 53 7 (set (reg:SI 1 dx [orig:63 D.5537 ] [63])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [168])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:876 64 {*movsi_internal}
     (nil))

(insn 53 52 54 7 (set (reg/f:SI 0 ax [169])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:876 64 {*movsi_internal}
     (nil))

(insn 54 53 55 7 (set (reg:SI 0 ax [orig:64 D.5538 ] [64])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [169])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:876 64 {*movsi_internal}
     (nil))

(insn 55 54 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:63 D.5537 ] [63])
            (reg:SI 0 ax [orig:64 D.5538 ] [64]))) src/gui.c:876 6 {*cmpsi_1}
     (nil))

(jump_insn 56 55 57 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 223)
            (pc))) src/gui.c:876 591 {*jcc_1}
     (nil)
 -> 223)
;; End of basic block 7 -> ( 8 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  8 (fallthru)
;; Succ edge  25

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 170 171 172 173 174 175 176 177 178 179

;; Pred edge  7 (fallthru)
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 8 (set (reg/f:SI 0 ax [170])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:878 64 {*movsi_internal}
     (nil))

(insn 59 58 60 8 (set (reg:SI 1 dx [orig:65 D.5541 ] [65])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [170])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:878 64 {*movsi_internal}
     (nil))

(insn 60 59 61 8 (set (reg:SI 0 ax [orig:66 sens.3 ] [66])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:878 64 {*movsi_internal}
     (nil))

(insn 61 60 320 8 (parallel [
            (set (reg:SI 0 ax [orig:67 D.5543 ] [67])
                (mult:SI (reg:SI 0 ax [orig:66 sens.3 ] [66])
                    (reg:SI 1 dx [orig:65 D.5541 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:878 333 {*mulsi3_1}
     (nil))

(insn 320 61 62 8 (set (reg:SI 1 dx [orig:68 D.5544 ] [68])
        (reg:SI 0 ax [orig:67 D.5543 ] [67])) src/gui.c:878 64 {*movsi_internal}
     (nil))

(insn 62 320 63 8 (parallel [
            (set (reg:SI 1 dx [orig:68 D.5544 ] [68])
                (plus:SI (reg:SI 1 dx [orig:68 D.5544 ] [68])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:878 252 {*addsi_1}
     (nil))

(insn 63 62 64 8 (set (reg/f:SI 0 ax [171])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:878 64 {*movsi_internal}
     (nil))

(insn 64 63 65 8 (set (reg:DI 0 ax [172])
        (mem/s/j:DI (plus:SI (mult:SI (reg:SI 1 dx [orig:68 D.5544 ] [68])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [171])) [0 gameState_13(D)->zones S8 A32])) src/gui.c:878 63 {*movdi_internal}
     (nil))

(insn 65 64 66 8 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 ArriveeAvecDE1+0 S8 A32])
        (reg:DI 0 ax [172])) src/gui.c:878 63 {*movdi_internal}
     (nil))

(insn 66 65 67 8 (set (reg/f:SI 0 ax [173])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:879 64 {*movsi_internal}
     (nil))

(insn 67 66 68 8 (set (reg:SI 1 dx [orig:69 D.5545 ] [69])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [173])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:879 64 {*movsi_internal}
     (nil))

(insn 68 67 69 8 (set (reg:SI 0 ax [orig:70 sens.4 ] [70])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:879 64 {*movsi_internal}
     (nil))

(insn 69 68 321 8 (parallel [
            (set (reg:SI 0 ax [orig:71 D.5547 ] [71])
                (mult:SI (reg:SI 0 ax [orig:70 sens.4 ] [70])
                    (reg:SI 1 dx [orig:69 D.5545 ] [69])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:879 333 {*mulsi3_1}
     (nil))

(insn 321 69 70 8 (set (reg:SI 1 dx [orig:72 D.5548 ] [72])
        (reg:SI 0 ax [orig:71 D.5547 ] [71])) src/gui.c:879 64 {*movsi_internal}
     (nil))

(insn 70 321 71 8 (parallel [
            (set (reg:SI 1 dx [orig:72 D.5548 ] [72])
                (plus:SI (reg:SI 1 dx [orig:72 D.5548 ] [72])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:879 252 {*addsi_1}
     (nil))

(insn 71 70 72 8 (set (reg/f:SI 0 ax [174])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:879 64 {*movsi_internal}
     (nil))

(insn 72 71 73 8 (set (reg:DI 0 ax [175])
        (mem/s/j:DI (plus:SI (mult:SI (reg:SI 1 dx [orig:72 D.5548 ] [72])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [174])) [0 gameState_13(D)->zones S8 A32])) src/gui.c:879 63 {*movdi_internal}
     (nil))

(insn 73 72 74 8 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 ArriveeAvecDE2+0 S8 A32])
        (reg:DI 0 ax [175])) src/gui.c:879 63 {*movdi_internal}
     (nil))

(insn 74 73 75 8 (set (reg/f:SI 0 ax [176])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 75 74 76 8 (set (reg:SI 1 dx [orig:73 D.5549 ] [73])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [176])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 76 75 77 8 (set (reg/f:SI 0 ax [177])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 77 76 78 8 (set (reg:SI 0 ax [orig:74 D.5550 ] [74])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [177])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 78 77 79 8 (parallel [
            (set (reg:SI 1 dx [orig:75 D.5551 ] [75])
                (plus:SI (reg:SI 1 dx [orig:73 D.5549 ] [73])
                    (reg:SI 0 ax [orig:74 D.5550 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:880 252 {*addsi_1}
     (nil))

(insn 79 78 80 8 (set (reg:SI 0 ax [orig:76 sens.5 ] [76])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 80 79 322 8 (parallel [
            (set (reg:SI 0 ax [orig:77 D.5553 ] [77])
                (mult:SI (reg:SI 0 ax [orig:76 sens.5 ] [76])
                    (reg:SI 1 dx [orig:75 D.5551 ] [75])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:880 333 {*mulsi3_1}
     (nil))

(insn 322 80 81 8 (set (reg:SI 1 dx [orig:78 D.5554 ] [78])
        (reg:SI 0 ax [orig:77 D.5553 ] [77])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 81 322 82 8 (parallel [
            (set (reg:SI 1 dx [orig:78 D.5554 ] [78])
                (plus:SI (reg:SI 1 dx [orig:78 D.5554 ] [78])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:880 252 {*addsi_1}
     (nil))

(insn 82 81 83 8 (set (reg/f:SI 0 ax [178])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:880 64 {*movsi_internal}
     (nil))

(insn 83 82 84 8 (set (reg:DI 0 ax [179])
        (mem/s/j:DI (plus:SI (mult:SI (reg:SI 1 dx [orig:78 D.5554 ] [78])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [178])) [0 gameState_13(D)->zones S8 A32])) src/gui.c:880 63 {*movdi_internal}
     (nil))

(insn 84 83 85 8 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE1ETDE2+0 S8 A32])
        (reg:DI 0 ax [179])) src/gui.c:880 63 {*movdi_internal}
     (nil))

(insn 85 84 86 8 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 arrowWithDie1+0 S4 A32])
        (const_int 0 [0])) src/gui.c:881 64 {*movsi_internal}
     (nil))

(insn 86 85 87 8 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arrowWithDie2+0 S4 A32])
        (const_int 0 [0])) src/gui.c:882 64 {*movsi_internal}
     (nil))

(insn 87 86 88 8 (set (reg:SI 0 ax [orig:79 D.5557 ] [79])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 ArriveeAvecDE1.player+0 S4 A32])) src/gui.c:884 64 {*movsi_internal}
     (nil))

(insn 88 87 89 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:79 D.5557 ] [79])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:884 6 {*cmpsi_1}
     (nil))

(jump_insn 89 88 90 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) src/gui.c:884 591 {*jcc_1}
     (nil)
 -> 102)
;; End of basic block 8 -> ( 12 9)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12
;; Succ edge  9 (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 80

;; Pred edge  8 (fallthru)
(note 90 89 91 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 9 (set (reg:SI 0 ax [orig:80 D.5559 ] [80])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 ArriveeAvecDE1.nb_checkers+0 S4 A32])) src/gui.c:884 64 {*movsi_internal}
     (nil))

(insn 92 91 93 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:80 D.5559 ] [80])
            (const_int 0 [0]))) src/gui.c:884 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 93 92 94 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 102)
            (pc))) src/gui.c:884 591 {*jcc_1}
     (nil)
 -> 102)
;; End of basic block 9 -> ( 12 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12
;; Succ edge  10 (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 81

;; Pred edge  9 (fallthru)
(note 94 93 95 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 10 (set (reg:SI 0 ax [orig:81 D.5561 ] [81])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -64 [0xffffffffffffffc0])) [0 ArriveeAvecDE1.player+0 S4 A32])) src/gui.c:884 64 {*movsi_internal}
     (nil))

(insn 96 95 97 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:81 D.5561 ] [81])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:884 6 {*cmpsi_1}
     (nil))

(jump_insn 97 96 98 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) src/gui.c:884 591 {*jcc_1}
     (nil)
 -> 125)
;; End of basic block 10 -> ( 11 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  11 (fallthru)
;; Succ edge  13

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 82

;; Pred edge  10 (fallthru)
(note 98 97 99 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 99 98 100 11 (set (reg:SI 0 ax [orig:82 D.5563 ] [82])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -60 [0xffffffffffffffc4])) [0 ArriveeAvecDE1.nb_checkers+0 S4 A32])) src/gui.c:884 64 {*movsi_internal}
     (nil))

(insn 100 99 101 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:82 D.5563 ] [82])
            (const_int 1 [0x1]))) src/gui.c:884 6 {*cmpsi_1}
     (nil))

(jump_insn 101 100 102 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 125)
            (pc))) src/gui.c:884 591 {*jcc_1}
     (nil)
 -> 125)
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  13

;; Start of basic block ( 8 9 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 83 84 85 86 87 88 89 90 91 92 93 94 180 181 182

;; Pred edge  8
;; Pred edge  9
;; Pred edge  11 (fallthru)
(code_label 102 101 103 12 178 "" [2 uses])

(note 103 102 104 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 12 (set (reg/f:SI 0 ax [180])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(insn 105 104 106 12 (set (reg:SI 1 dx [orig:83 D.5564 ] [83])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [180])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(insn 106 105 107 12 (set (reg:SI 0 ax [orig:84 sens.6 ] [84])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(insn 107 106 108 12 (parallel [
            (set (reg:SI 0 ax [orig:85 D.5566 ] [85])
                (mult:SI (reg:SI 0 ax [orig:84 sens.6 ] [84])
                    (reg:SI 1 dx [orig:83 D.5564 ] [83])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:887 333 {*mulsi3_1}
     (nil))

(insn 108 107 109 12 (parallel [
            (set (reg:SI 0 ax [orig:86 D.5567 ] [86])
                (plus:SI (reg:SI 0 ax [orig:85 D.5566 ] [85])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:887 252 {*addsi_1}
     (nil))

(insn 109 108 110 12 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:86 D.5567 ] [86])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(insn 110 109 111 12 (set (reg/f:SI 0 ax [181])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(insn 111 110 112 12 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [181])) src/gui.c:887 64 {*movsi_internal}
     (nil))

(call_insn 112 111 113 12 (call (mem:QI (symbol_ref:SI ("Draw_Selected_Arrow") [flags 0x3]  <function_decl 0x4081a500 Draw_Selected_Arrow>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:887 618 {*call_0}
     (nil)
    (nil))

(insn 113 112 114 12 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 arrowWithDie1+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:888 64 {*movsi_internal}
     (nil))

(insn 114 113 115 12 (set (reg:SI 0 ax [orig:87 cpt.7 ] [87])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])) src/gui.c:889 64 {*movsi_internal}
     (nil))

(insn 115 114 116 12 (parallel [
            (set (reg:SI 0 ax [orig:88 D.5569 ] [88])
                (ashift:SI (reg:SI 0 ax [orig:87 cpt.7 ] [87])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:889 497 {*ashlsi3_1}
     (nil))

(insn 116 115 117 12 (parallel [
            (set (reg/f:SI 0 ax [orig:89 D.5570 ] [89])
                (plus:SI (reg:SI 0 ax [orig:88 D.5569 ] [88])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:889 252 {*addsi_1}
     (nil))

(insn 117 116 118 12 (set (reg/f:SI 1 dx [182])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:889 64 {*movsi_internal}
     (nil))

(insn 118 117 119 12 (set (reg:SI 2 cx [orig:90 D.5571 ] [90])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 dx [182])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:889 64 {*movsi_internal}
     (nil))

(insn 119 118 120 12 (set (reg:SI 1 dx [orig:91 sens.8 ] [91])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:889 64 {*movsi_internal}
     (nil))

(insn 120 119 121 12 (parallel [
            (set (reg:SI 1 dx [orig:92 D.5573 ] [92])
                (mult:SI (reg:SI 1 dx [orig:91 sens.8 ] [91])
                    (reg:SI 2 cx [orig:90 D.5571 ] [90])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:889 333 {*mulsi3_1}
     (nil))

(insn 121 120 123 12 (parallel [
            (set (reg:SI 1 dx [orig:93 D.5574 ] [93])
                (plus:SI (reg:SI 1 dx [orig:92 D.5573 ] [92])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:889 252 {*addsi_1}
     (nil))

(insn 123 121 124 12 (set (mem:SI (reg/f:SI 0 ax [orig:89 D.5570 ] [89]) [0 *D.5570_56+0 S4 A32])
        (reg:SI 1 dx [orig:94 D.5575 ] [94])) src/gui.c:889 64 {*movsi_internal}
     (nil))

(insn 124 123 125 12 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:890 252 {*addsi_1}
     (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  13 (fallthru)

;; Start of basic block ( 10 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 95

;; Pred edge  10
;; Pred edge  11
;; Pred edge  12 (fallthru)
(code_label 125 124 126 13 179 "" [2 uses])

(note 126 125 127 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 127 126 128 13 (set (reg:SI 0 ax [orig:95 D.5578 ] [95])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 ArriveeAvecDE2.player+0 S4 A32])) src/gui.c:892 64 {*movsi_internal}
     (nil))

(insn 128 127 129 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:95 D.5578 ] [95])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:892 6 {*cmpsi_1}
     (nil))

(jump_insn 129 128 130 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) src/gui.c:892 591 {*jcc_1}
     (nil)
 -> 142)
;; End of basic block 13 -> ( 17 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17
;; Succ edge  14 (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96

;; Pred edge  13 (fallthru)
(note 130 129 131 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 131 130 132 14 (set (reg:SI 0 ax [orig:96 D.5580 ] [96])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 ArriveeAvecDE2.nb_checkers+0 S4 A32])) src/gui.c:892 64 {*movsi_internal}
     (nil))

(insn 132 131 133 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:96 D.5580 ] [96])
            (const_int 0 [0]))) src/gui.c:892 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 133 132 134 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 142)
            (pc))) src/gui.c:892 591 {*jcc_1}
     (nil)
 -> 142)
;; End of basic block 14 -> ( 17 15)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17
;; Succ edge  15 (fallthru)

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 97

;; Pred edge  14 (fallthru)
(note 134 133 135 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 135 134 136 15 (set (reg:SI 0 ax [orig:97 D.5582 ] [97])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 ArriveeAvecDE2.player+0 S4 A32])) src/gui.c:892 64 {*movsi_internal}
     (nil))

(insn 136 135 137 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:97 D.5582 ] [97])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:892 6 {*cmpsi_1}
     (nil))

(jump_insn 137 136 138 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 167)
            (pc))) src/gui.c:892 591 {*jcc_1}
     (nil)
 -> 167)
;; End of basic block 15 -> ( 16 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  16 (fallthru)
;; Succ edge  18

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 98

;; Pred edge  15 (fallthru)
(note 138 137 139 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 16 (set (reg:SI 0 ax [orig:98 D.5584 ] [98])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 ArriveeAvecDE2.nb_checkers+0 S4 A32])) src/gui.c:892 64 {*movsi_internal}
     (nil))

(insn 140 139 141 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:98 D.5584 ] [98])
            (const_int 1 [0x1]))) src/gui.c:892 6 {*cmpsi_1}
     (nil))

(jump_insn 141 140 142 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 167)
            (pc))) src/gui.c:892 591 {*jcc_1}
     (nil)
 -> 167)
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  17 (fallthru)
;; Succ edge  18

;; Start of basic block ( 13 14 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 99 100 101 102 103 104 105 106 107 108 109 110 183 184 185

;; Pred edge  13
;; Pred edge  14
;; Pred edge  16 (fallthru)
(code_label 142 141 143 17 180 "" [2 uses])

(note 143 142 144 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 144 143 145 17 (set (reg/f:SI 0 ax [183])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(insn 145 144 146 17 (set (reg:SI 1 dx [orig:99 D.5585 ] [99])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [183])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(insn 146 145 147 17 (set (reg:SI 0 ax [orig:100 sens.9 ] [100])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(insn 147 146 148 17 (parallel [
            (set (reg:SI 0 ax [orig:101 D.5587 ] [101])
                (mult:SI (reg:SI 0 ax [orig:100 sens.9 ] [100])
                    (reg:SI 1 dx [orig:99 D.5585 ] [99])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:895 333 {*mulsi3_1}
     (nil))

(insn 148 147 149 17 (parallel [
            (set (reg:SI 0 ax [orig:102 D.5588 ] [102])
                (plus:SI (reg:SI 0 ax [orig:101 D.5587 ] [101])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:895 252 {*addsi_1}
     (nil))

(insn 149 148 150 17 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:102 D.5588 ] [102])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(insn 150 149 151 17 (set (reg/f:SI 0 ax [184])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(insn 151 150 152 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [184])) src/gui.c:895 64 {*movsi_internal}
     (nil))

(call_insn 152 151 153 17 (call (mem:QI (symbol_ref:SI ("Draw_Selected_Arrow") [flags 0x3]  <function_decl 0x4081a500 Draw_Selected_Arrow>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:895 618 {*call_0}
     (nil)
    (nil))

(insn 153 152 154 17 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC30") [flags 0x2]  <var_decl 0x409cd240 *.LC30>)) src/gui.c:896 64 {*movsi_internal}
     (nil))

(call_insn 154 153 155 17 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0x406b1e00 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:896 927 {*call_value_0}
     (nil)
    (nil))

(insn 155 154 156 17 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 arrowWithDie2+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:897 64 {*movsi_internal}
     (nil))

(insn 156 155 157 17 (set (reg:SI 0 ax [orig:103 cpt.10 ] [103])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])) src/gui.c:898 64 {*movsi_internal}
     (nil))

(insn 157 156 158 17 (parallel [
            (set (reg:SI 0 ax [orig:104 D.5590 ] [104])
                (ashift:SI (reg:SI 0 ax [orig:103 cpt.10 ] [103])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:898 497 {*ashlsi3_1}
     (nil))

(insn 158 157 159 17 (parallel [
            (set (reg/f:SI 0 ax [orig:105 D.5591 ] [105])
                (plus:SI (reg:SI 0 ax [orig:104 D.5590 ] [104])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:898 252 {*addsi_1}
     (nil))

(insn 159 158 160 17 (set (reg/f:SI 1 dx [185])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:898 64 {*movsi_internal}
     (nil))

(insn 160 159 161 17 (set (reg:SI 2 cx [orig:106 D.5592 ] [106])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 dx [185])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:898 64 {*movsi_internal}
     (nil))

(insn 161 160 162 17 (set (reg:SI 1 dx [orig:107 sens.11 ] [107])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:898 64 {*movsi_internal}
     (nil))

(insn 162 161 163 17 (parallel [
            (set (reg:SI 1 dx [orig:108 D.5594 ] [108])
                (mult:SI (reg:SI 1 dx [orig:107 sens.11 ] [107])
                    (reg:SI 2 cx [orig:106 D.5592 ] [106])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:898 333 {*mulsi3_1}
     (nil))

(insn 163 162 165 17 (parallel [
            (set (reg:SI 1 dx [orig:109 D.5595 ] [109])
                (plus:SI (reg:SI 1 dx [orig:108 D.5594 ] [108])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:898 252 {*addsi_1}
     (nil))

(insn 165 163 166 17 (set (mem:SI (reg/f:SI 0 ax [orig:105 D.5591 ] [105]) [0 *D.5591_74+0 S4 A32])
        (reg:SI 1 dx [orig:110 D.5596 ] [110])) src/gui.c:898 64 {*movsi_internal}
     (nil))

(insn 166 165 167 17 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:899 252 {*addsi_1}
     (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  18 (fallthru)

;; Start of basic block ( 15 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 111

;; Pred edge  15
;; Pred edge  16
;; Pred edge  17 (fallthru)
(code_label 167 166 168 18 181 "" [2 uses])

(note 168 167 169 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 169 168 170 18 (set (reg:SI 0 ax [orig:111 D.5600 ] [111])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE1ETDE2.player+0 S4 A32])) src/gui.c:901 64 {*movsi_internal}
     (nil))

(insn 170 169 171 18 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:111 D.5600 ] [111])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:901 6 {*cmpsi_1}
     (nil))

(jump_insn 171 170 172 18 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 184)
;; End of basic block 18 -> ( 22 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22
;; Succ edge  19 (fallthru)

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 112

;; Pred edge  18 (fallthru)
(note 172 171 173 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 173 172 174 19 (set (reg:SI 0 ax [orig:112 D.5602 ] [112])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 ArriveeAvecDE1ETDE2.nb_checkers+0 S4 A32])) src/gui.c:901 64 {*movsi_internal}
     (nil))

(insn 174 173 175 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:112 D.5602 ] [112])
            (const_int 0 [0]))) src/gui.c:901 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 175 174 176 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 184)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 184)
;; End of basic block 19 -> ( 22 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22
;; Succ edge  20 (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 113

;; Pred edge  19 (fallthru)
(note 176 175 177 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 177 176 178 20 (set (reg:SI 0 ax [orig:113 D.5604 ] [113])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE1ETDE2.player+0 S4 A32])) src/gui.c:901 64 {*movsi_internal}
     (nil))

(insn 178 177 179 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:113 D.5604 ] [113])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:901 6 {*cmpsi_1}
     (nil))

(jump_insn 179 178 180 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 296)
;; End of basic block 20 -> ( 21 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  21 (fallthru)
;; Succ edge  34

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 114

;; Pred edge  20 (fallthru)
(note 180 179 181 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 181 180 182 21 (set (reg:SI 0 ax [orig:114 D.5606 ] [114])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 ArriveeAvecDE1ETDE2.nb_checkers+0 S4 A32])) src/gui.c:901 64 {*movsi_internal}
     (nil))

(insn 182 181 183 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:114 D.5606 ] [114])
            (const_int 1 [0x1]))) src/gui.c:901 6 {*cmpsi_1}
     (nil))

(jump_insn 183 182 184 21 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 296)
;; End of basic block 21 -> ( 22 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  22 (fallthru)
;; Succ edge  34

;; Start of basic block ( 18 19 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  18
;; Pred edge  19
;; Pred edge  21 (fallthru)
(code_label 184 183 185 22 182 "" [2 uses])

(note 185 184 186 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 186 185 187 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])) [0 arrowWithDie1+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:901 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 187 186 188 22 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 191)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 191)
;; End of basic block 22 -> ( 24 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24
;; Succ edge  23 (fallthru)

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  22 (fallthru)
(note 188 187 189 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 189 188 190 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 arrowWithDie2+0 S4 A32])
            (const_int 0 [0]))) src/gui.c:901 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 190 189 191 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 296)
            (pc))) src/gui.c:901 591 {*jcc_1}
     (nil)
 -> 296)
;; End of basic block 23 -> ( 24 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  24 (fallthru)
;; Succ edge  34

;; Start of basic block ( 22 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 186 187 188 189 190

;; Pred edge  22
;; Pred edge  23 (fallthru)
(code_label 191 190 192 24 184 "" [1 uses])

(note 192 191 193 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 24 (set (reg/f:SI 0 ax [186])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 194 193 195 24 (set (reg:SI 1 dx [orig:115 D.5608 ] [115])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [186])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 195 194 196 24 (set (reg/f:SI 0 ax [187])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 196 195 197 24 (set (reg:SI 0 ax [orig:116 D.5609 ] [116])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [187])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 197 196 198 24 (parallel [
            (set (reg:SI 1 dx [orig:117 D.5610 ] [117])
                (plus:SI (reg:SI 1 dx [orig:115 D.5608 ] [115])
                    (reg:SI 0 ax [orig:116 D.5609 ] [116])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:904 252 {*addsi_1}
     (nil))

(insn 198 197 199 24 (set (reg:SI 0 ax [orig:118 sens.12 ] [118])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 199 198 200 24 (parallel [
            (set (reg:SI 0 ax [orig:119 D.5612 ] [119])
                (mult:SI (reg:SI 0 ax [orig:118 sens.12 ] [118])
                    (reg:SI 1 dx [orig:117 D.5610 ] [117])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:904 333 {*mulsi3_1}
     (nil))

(insn 200 199 201 24 (parallel [
            (set (reg:SI 0 ax [orig:120 D.5613 ] [120])
                (plus:SI (reg:SI 0 ax [orig:119 D.5612 ] [119])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:904 252 {*addsi_1}
     (nil))

(insn 201 200 202 24 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:120 D.5613 ] [120])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 202 201 203 24 (set (reg/f:SI 0 ax [188])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(insn 203 202 204 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [188])) src/gui.c:904 64 {*movsi_internal}
     (nil))

(call_insn 204 203 205 24 (call (mem:QI (symbol_ref:SI ("Draw_Selected_Arrow") [flags 0x3]  <function_decl 0x4081a500 Draw_Selected_Arrow>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:904 618 {*call_0}
     (nil)
    (nil))

(insn 205 204 206 24 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC31") [flags 0x2]  <var_decl 0x409cd2a0 *.LC31>)) src/gui.c:905 64 {*movsi_internal}
     (nil))

(call_insn 206 205 207 24 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0x406b1e00 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:905 927 {*call_value_0}
     (nil)
    (nil))

(insn 207 206 208 24 (set (reg:SI 0 ax [orig:121 cpt.13 ] [121])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 208 207 209 24 (parallel [
            (set (reg:SI 0 ax [orig:122 D.5615 ] [122])
                (ashift:SI (reg:SI 0 ax [orig:121 cpt.13 ] [121])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:906 497 {*ashlsi3_1}
     (nil))

(insn 209 208 210 24 (parallel [
            (set (reg/f:SI 0 ax [orig:123 D.5616 ] [123])
                (plus:SI (reg:SI 0 ax [orig:122 D.5615 ] [122])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:906 252 {*addsi_1}
     (nil))

(insn 210 209 211 24 (set (reg/f:SI 1 dx [189])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 211 210 212 24 (set (reg:SI 2 cx [orig:124 D.5617 ] [124])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 dx [189])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 212 211 213 24 (set (reg/f:SI 1 dx [190])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 213 212 214 24 (set (reg:SI 1 dx [orig:125 D.5618 ] [125])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 dx [190])
                (const_int 228 [0xe4])) [0 gameState_13(D)->die2+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 214 213 215 24 (parallel [
            (set (reg:SI 2 cx [orig:126 D.5619 ] [126])
                (plus:SI (reg:SI 2 cx [orig:124 D.5617 ] [124])
                    (reg:SI 1 dx [orig:125 D.5618 ] [125])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:906 252 {*addsi_1}
     (nil))

(insn 215 214 216 24 (set (reg:SI 1 dx [orig:127 sens.14 ] [127])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 216 215 217 24 (parallel [
            (set (reg:SI 1 dx [orig:128 D.5621 ] [128])
                (mult:SI (reg:SI 1 dx [orig:127 sens.14 ] [127])
                    (reg:SI 2 cx [orig:126 D.5619 ] [126])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:906 333 {*mulsi3_1}
     (nil))

(insn 217 216 219 24 (parallel [
            (set (reg:SI 1 dx [orig:129 D.5622 ] [129])
                (plus:SI (reg:SI 1 dx [orig:128 D.5621 ] [128])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:906 252 {*addsi_1}
     (nil))

(insn 219 217 220 24 (set (mem:SI (reg/f:SI 0 ax [orig:123 D.5616 ] [123]) [0 *D.5616_93+0 S4 A32])
        (reg:SI 1 dx [orig:130 D.5623 ] [130])) src/gui.c:906 64 {*movsi_internal}
     (nil))

(insn 220 219 315 24 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:907 252 {*addsi_1}
     (nil))

(jump_insn 315 220 316 24 (set (pc)
        (label_ref 296)) 606 {jump}
     (nil)
 -> 296)
;; End of basic block 24 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  34 [100.0%] 

(barrier 316 315 223)

;; Start of basic block ( 7) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  7
(code_label 223 316 224 25 177 "" [1 uses])

(note 224 223 225 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 225 224 226 25 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 nbpossibilite+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:913 64 {*movsi_internal}
     (nil))

(insn 226 225 317 25 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) src/gui.c:914 64 {*movsi_internal}
     (nil))

(jump_insn 317 226 318 25 (set (pc)
        (label_ref 291)) src/gui.c:914 606 {jump}
     (nil)
 -> 291)
;; End of basic block 25 -> ( 33)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 [100.0%] 

(barrier 318 317 293)

;; Start of basic block ( 33) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 131 132 133 134 135 136 137 191 192 193

;; Pred edge  33
(code_label 293 318 229 26 188 "" [1 uses])

(note 229 293 230 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 230 229 231 26 (set (reg/f:SI 0 ax [191])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 231 230 232 26 (set (reg:SI 1 dx [orig:131 D.5625 ] [131])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [191])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 232 231 233 26 (set (reg:SI 0 ax [orig:132 sens.15 ] [132])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 233 232 234 26 (parallel [
            (set (reg:SI 1 dx [orig:133 D.5627 ] [133])
                (mult:SI (reg:SI 1 dx [orig:131 D.5625 ] [131])
                    (reg:SI 0 ax [orig:132 sens.15 ] [132])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:916 333 {*mulsi3_1}
     (nil))

(insn 234 233 235 26 (set (reg:SI 0 ax [orig:134 i.16 ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 235 234 323 26 (parallel [
            (set (reg:SI 0 ax [orig:135 D.5629 ] [135])
                (mult:SI (reg:SI 0 ax [orig:134 i.16 ] [134])
                    (reg:SI 1 dx [orig:133 D.5627 ] [133])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:916 333 {*mulsi3_1}
     (nil))

(insn 323 235 236 26 (set (reg:SI 1 dx [orig:136 D.5630 ] [136])
        (reg:SI 0 ax [orig:135 D.5629 ] [135])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 236 323 237 26 (parallel [
            (set (reg:SI 1 dx [orig:136 D.5630 ] [136])
                (plus:SI (reg:SI 1 dx [orig:136 D.5630 ] [136])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:916 252 {*addsi_1}
     (nil))

(insn 237 236 238 26 (set (reg/f:SI 0 ax [192])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:916 64 {*movsi_internal}
     (nil))

(insn 238 237 239 26 (set (reg:DI 0 ax [193])
        (mem/s/j:DI (plus:SI (mult:SI (reg:SI 1 dx [orig:136 D.5630 ] [136])
                    (const_int 8 [0x8]))
                (reg/f:SI 0 ax [192])) [0 gameState_13(D)->zones S8 A32])) src/gui.c:916 63 {*movdi_internal}
     (nil))

(insn 239 238 240 26 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE+0 S8 A32])
        (reg:DI 0 ax [193])) src/gui.c:916 63 {*movdi_internal}
     (nil))

(insn 240 239 241 26 (set (reg:SI 0 ax [orig:137 D.5633 ] [137])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE.player+0 S4 A32])) src/gui.c:917 64 {*movsi_internal}
     (nil))

(insn 241 240 242 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:137 D.5633 ] [137])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:917 6 {*cmpsi_1}
     (nil))

(jump_insn 242 241 243 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 255)
            (pc))) src/gui.c:917 591 {*jcc_1}
     (nil)
 -> 255)
;; End of basic block 26 -> ( 30 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30
;; Succ edge  27 (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 138

;; Pred edge  26 (fallthru)
(note 243 242 244 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 244 243 245 27 (set (reg:SI 0 ax [orig:138 D.5635 ] [138])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 ArriveeAvecDE.nb_checkers+0 S4 A32])) src/gui.c:917 64 {*movsi_internal}
     (nil))

(insn 245 244 246 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:138 D.5635 ] [138])
            (const_int 0 [0]))) src/gui.c:917 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 246 245 247 27 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 255)
            (pc))) src/gui.c:917 591 {*jcc_1}
     (nil)
 -> 255)
;; End of basic block 27 -> ( 30 28)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30
;; Succ edge  28 (fallthru)

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 139

;; Pred edge  27 (fallthru)
(note 247 246 248 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 248 247 249 28 (set (reg:SI 0 ax [orig:139 D.5637 ] [139])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -48 [0xffffffffffffffd0])) [0 ArriveeAvecDE.player+0 S4 A32])) src/gui.c:917 64 {*movsi_internal}
     (nil))

(insn 249 248 250 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:139 D.5637 ] [139])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 16 [0x10])) [0 player+0 S4 A32]))) src/gui.c:917 6 {*cmpsi_1}
     (nil))

(jump_insn 250 249 251 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 255)
            (pc))) src/gui.c:917 591 {*jcc_1}
     (nil)
 -> 255)
;; End of basic block 28 -> ( 30 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30
;; Succ edge  29 (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 140

;; Pred edge  28 (fallthru)
(note 251 250 252 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 252 251 253 29 (set (reg:SI 0 ax [orig:140 D.5639 ] [140])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 ArriveeAvecDE.nb_checkers+0 S4 A32])) src/gui.c:917 64 {*movsi_internal}
     (nil))

(insn 253 252 254 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:140 D.5639 ] [140])
            (const_int 1 [0x1]))) src/gui.c:917 6 {*cmpsi_1}
     (nil))

(jump_insn 254 253 255 29 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) src/gui.c:917 591 {*jcc_1}
     (nil)
 -> 288)
;; End of basic block 29 -> ( 30 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  30 (fallthru)
;; Succ edge  32

;; Start of basic block ( 26 27 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 194

;; Pred edge  26
;; Pred edge  27
;; Pred edge  28
;; Pred edge  29 (fallthru)
(code_label 255 254 256 30 186 "" [3 uses])

(note 256 255 257 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 257 256 258 30 (set (reg:SI 0 ax [194])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 nbpossibilite+0 S4 A32])) src/gui.c:917 64 {*movsi_internal}
     (nil))

(insn 258 257 259 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [194])
            (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32]))) src/gui.c:917 6 {*cmpsi_1}
     (nil))

(jump_insn 259 258 260 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 288)
            (pc))) src/gui.c:917 591 {*jcc_1}
     (nil)
 -> 288)
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  31 (fallthru)
;; Succ edge  32

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 195 196 197

;; Pred edge  30 (fallthru)
(note 260 259 261 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 261 260 262 31 (set (reg/f:SI 0 ax [195])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 262 261 263 31 (set (reg:SI 1 dx [orig:141 D.5642 ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 0 ax [195])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 263 262 264 31 (set (reg:SI 0 ax [orig:142 sens.17 ] [142])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 264 263 265 31 (parallel [
            (set (reg:SI 1 dx [orig:143 D.5644 ] [143])
                (mult:SI (reg:SI 1 dx [orig:141 D.5642 ] [141])
                    (reg:SI 0 ax [orig:142 sens.17 ] [142])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:920 333 {*mulsi3_1}
     (nil))

(insn 265 264 266 31 (set (reg:SI 0 ax [orig:144 i.18 ] [144])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 266 265 267 31 (parallel [
            (set (reg:SI 0 ax [orig:145 D.5646 ] [145])
                (mult:SI (reg:SI 0 ax [orig:144 i.18 ] [144])
                    (reg:SI 1 dx [orig:143 D.5644 ] [143])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:920 333 {*mulsi3_1}
     (nil))

(insn 267 266 268 31 (parallel [
            (set (reg:SI 0 ax [orig:146 D.5647 ] [146])
                (plus:SI (reg:SI 0 ax [orig:145 D.5646 ] [145])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:920 252 {*addsi_1}
     (nil))

(insn 268 267 269 31 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 0 ax [orig:146 D.5647 ] [146])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 269 268 270 31 (set (reg/f:SI 0 ax [196])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(insn 270 269 271 31 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [196])) src/gui.c:920 64 {*movsi_internal}
     (nil))

(call_insn 271 270 272 31 (call (mem:QI (symbol_ref:SI ("Draw_Selected_Arrow") [flags 0x3]  <function_decl 0x4081a500 Draw_Selected_Arrow>) [0 S1 A8])
        (const_int 8 [0x8])) src/gui.c:920 618 {*call_0}
     (nil)
    (nil))

(insn 272 271 273 31 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (symbol_ref/f:SI ("*.LC32") [flags 0x2]  <var_decl 0x409cd300 *.LC32>)) src/gui.c:921 64 {*movsi_internal}
     (nil))

(call_insn 273 272 274 31 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x41]  <function_decl 0x406b1e00 __builtin_puts>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:921 927 {*call_value_0}
     (nil)
    (nil))

(insn 274 273 275 31 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 nbpossibilite+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 nbpossibilite+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:922 252 {*addsi_1}
     (nil))

(insn 275 274 276 31 (set (reg:SI 0 ax [orig:147 cpt.19 ] [147])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 276 275 277 31 (parallel [
            (set (reg:SI 0 ax [orig:148 D.5649 ] [148])
                (ashift:SI (reg:SI 0 ax [orig:147 cpt.19 ] [147])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:923 497 {*ashlsi3_1}
     (nil))

(insn 277 276 278 31 (parallel [
            (set (reg/f:SI 0 ax [orig:149 D.5650 ] [149])
                (plus:SI (reg:SI 0 ax [orig:148 D.5649 ] [148])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:923 252 {*addsi_1}
     (nil))

(insn 278 277 279 31 (set (reg/f:SI 1 dx [197])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 gameState+0 S4 A32])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 279 278 280 31 (set (reg:SI 2 cx [orig:150 D.5651 ] [150])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 dx [197])
                (const_int 224 [0xe0])) [0 gameState_13(D)->die1+0 S4 A32])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 280 279 281 31 (set (reg:SI 1 dx [orig:151 sens.20 ] [151])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 sens+0 S4 A32])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 281 280 282 31 (parallel [
            (set (reg:SI 2 cx [orig:152 D.5653 ] [152])
                (mult:SI (reg:SI 2 cx [orig:150 D.5651 ] [150])
                    (reg:SI 1 dx [orig:151 sens.20 ] [151])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:923 333 {*mulsi3_1}
     (nil))

(insn 282 281 283 31 (set (reg:SI 1 dx [orig:153 i.21 ] [153])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 283 282 284 31 (parallel [
            (set (reg:SI 1 dx [orig:154 D.5655 ] [154])
                (mult:SI (reg:SI 1 dx [orig:153 i.21 ] [153])
                    (reg:SI 2 cx [orig:152 D.5653 ] [152])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:923 333 {*mulsi3_1}
     (nil))

(insn 284 283 286 31 (parallel [
            (set (reg:SI 1 dx [orig:155 D.5656 ] [155])
                (plus:SI (reg:SI 1 dx [orig:154 D.5655 ] [154])
                    (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 20 [0x14])) [0 depart+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:923 252 {*addsi_1}
     (nil))

(insn 286 284 287 31 (set (mem:SI (reg/f:SI 0 ax [orig:149 D.5650 ] [149]) [0 *D.5650_123+0 S4 A32])
        (reg:SI 1 dx [orig:156 D.5657 ] [156])) src/gui.c:923 64 {*movsi_internal}
     (nil))

(insn 287 286 288 31 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -40 [0xffffffffffffffd8])) [0 cpt+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:924 252 {*addsi_1}
     (nil))
;; End of basic block 31 -> ( 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  32 (fallthru)

;; Start of basic block ( 29 30 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  29
;; Pred edge  30
;; Pred edge  31 (fallthru)
(code_label 288 287 289 32 187 "" [2 uses])

(note 289 288 290 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 290 289 291 32 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:914 252 {*addsi_1}
     (nil))
;; End of basic block 32 -> ( 33)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  33 (fallthru)

;; Start of basic block ( 32 25) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  32 (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 291 290 292 33 185 "" [1 uses])

(note 292 291 294 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 294 292 295 33 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])) [0 i+0 S4 A32])
            (const_int 4 [0x4]))) src/gui.c:914 6 {*cmpsi_1}
     (nil))

(jump_insn 295 294 296 33 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 293)
            (pc))) src/gui.c:914 591 {*jcc_1}
     (nil)
 -> 293)
;; End of basic block 33 -> ( 26 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  26
;; Succ edge  34 (fallthru)

;; Start of basic block ( 21 33 20 23 24) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 157 158 159 198

;; Pred edge  21
;; Pred edge  33 (fallthru)
;; Pred edge  20
;; Pred edge  23
;; Pred edge  24 [100.0%] 
(code_label 296 295 297 34 183 "" [4 uses])

(note 297 296 298 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 298 297 299 34 (set (reg/f:SI 0 ax [198])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:929 64 {*movsi_internal}
     (nil))

(insn 299 298 300 34 (set (reg/f:SI 0 ax [orig:157 D.5658 ] [157])
        (mem/s/f/j:SI (reg/f:SI 0 ax [198]) [0 display_12(D)->screen+0 S4 A32])) src/gui.c:929 64 {*movsi_internal}
     (nil))

(insn 300 299 301 34 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:157 D.5658 ] [157])) src/gui.c:929 64 {*movsi_internal}
     (nil))

(call_insn 301 300 302 34 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_Flip") [flags 0x41]  <function_decl 0x4079fa00 SDL_Flip>) [0 S1 A8])
            (const_int 4 [0x4]))) src/gui.c:929 927 {*call_value_0}
     (nil)
    (nil))

(insn 302 301 310 34 (set (reg/f:SI 0 ax [orig:158 D.5659 ] [158])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 arriveesPossibles+0 S4 A32])) src/gui.c:930 64 {*movsi_internal}
     (nil))

(insn 310 302 319 34 (use (reg/i:SI 0 ax)) src/gui.c:931 -1
     (nil))
;; End of basic block 34 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 319 310 0 NOTE_INSN_DELETED)


;; Function Draw_Selected_Arrow (Draw_Selected_Arrow)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 14 count 11 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r98,l0) best GENERAL_REGS, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a0 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a20 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a1(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a2(r107,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a3(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a4(r105,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a6(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a7(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a8(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a9(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a10(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a11(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a12(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a13(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a14(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a15(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a16(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a17(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a18(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a19(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a20(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a21(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a22(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a23(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a24(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a25(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a26(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a27(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a28(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a29(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a30(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a31(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a32(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a33(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a34(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a35(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a36(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a37(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a38(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a39(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a40(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a41(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a42(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a43(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a44(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a45(r95,l0) costs: AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:16
  a46(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a47(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a48(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7

   Insn 109(l0): point = 1
   Insn 108(l0): point = 3
   Insn 107(l0): point = 5
   Insn 106(l0): point = 7
   Insn 105(l0): point = 9
   Insn 104(l0): point = 11
   Insn 103(l0): point = 13
   Insn 102(l0): point = 15
   Insn 101(l0): point = 17
   Insn 100(l0): point = 19
   Insn 99(l0): point = 21
   Insn 98(l0): point = 23
   Insn 97(l0): point = 25
   Insn 96(l0): point = 27
   Insn 95(l0): point = 29
   Insn 94(l0): point = 31
   Insn 93(l0): point = 33
   Insn 92(l0): point = 35
   Insn 91(l0): point = 37
   Insn 90(l0): point = 39
   Insn 88(l0): point = 42
   Insn 87(l0): point = 44
   Insn 118(l0): point = 47
   Insn 82(l0): point = 49
   Insn 81(l0): point = 51
   Insn 80(l0): point = 53
   Insn 79(l0): point = 55
   Insn 78(l0): point = 57
   Insn 77(l0): point = 59
   Insn 76(l0): point = 61
   Insn 75(l0): point = 63
   Insn 74(l0): point = 65
   Insn 73(l0): point = 67
   Insn 72(l0): point = 69
   Insn 71(l0): point = 71
   Insn 70(l0): point = 73
   Insn 69(l0): point = 75
   Insn 68(l0): point = 77
   Insn 67(l0): point = 79
   Insn 65(l0): point = 82
   Insn 64(l0): point = 84
   Insn 116(l0): point = 87
   Insn 59(l0): point = 89
   Insn 58(l0): point = 91
   Insn 57(l0): point = 93
   Insn 56(l0): point = 95
   Insn 55(l0): point = 97
   Insn 54(l0): point = 99
   Insn 53(l0): point = 101
   Insn 52(l0): point = 103
   Insn 51(l0): point = 105
   Insn 50(l0): point = 107
   Insn 49(l0): point = 109
   Insn 47(l0): point = 112
   Insn 46(l0): point = 114
   Insn 114(l0): point = 117
   Insn 41(l0): point = 119
   Insn 40(l0): point = 121
   Insn 39(l0): point = 123
   Insn 38(l0): point = 125
   Insn 37(l0): point = 127
   Insn 36(l0): point = 129
   Insn 35(l0): point = 131
   Insn 34(l0): point = 133
   Insn 33(l0): point = 135
   Insn 32(l0): point = 137
   Insn 31(l0): point = 139
   Insn 30(l0): point = 141
   Insn 29(l0): point = 143
   Insn 28(l0): point = 145
   Insn 27(l0): point = 147
   Insn 26(l0): point = 149
   Insn 25(l0): point = 151
   Insn 24(l0): point = 153
   Insn 23(l0): point = 155
   Insn 22(l0): point = 157
   Insn 21(l0): point = 159
   Insn 20(l0): point = 161
   Insn 19(l0): point = 163
   Insn 18(l0): point = 165
   Insn 16(l0): point = 168
   Insn 15(l0): point = 170
   Insn 14(l0): point = 172
   Insn 13(l0): point = 174
   Insn 12(l0): point = 176
   Insn 11(l0): point = 178
   Insn 10(l0): point = 180
   Insn 9(l0): point = 182
   Insn 8(l0): point = 184
   Insn 7(l0): point = 186
   Insn 6(l0): point = 188
   Insn 5(l0): point = 190
 a0(r91): [4..13]
 a1(r90): [8..17]
 a2(r107): [10..11]
 a3(r106): [14..15]
 a4(r105): [18..19]
 a5(r89): [22..23]
 a6(r88): [24..25]
 a7(r87): [26..27]
 a8(r86): [28..29]
 a9(r85): [32..33]
 a10(r84): [34..35]
 a11(r83): [36..37]
 a12(r82): [38..39]
 a13(r81): [52..61]
 a14(r80): [56..65]
 a15(r104): [58..59]
 a16(r103): [62..63]
 a17(r102): [66..67]
 a18(r79): [72..73]
 a19(r78): [74..75]
 a20(r77): [76..77]
 a21(r76): [78..79]
 a22(r75): [92..101]
 a23(r74): [96..105]
 a24(r101): [98..99]
 a25(r100): [102..103]
 a26(r99): [106..107]
 a27(r73): [122..131]
 a28(r72): [126..135]
 a29(r98): [128..129]
 a30(r97): [132..133]
 a31(r96): [136..137]
 a32(r71): [140..141]
 a33(r70): [142..143]
 a34(r69): [144..145]
 a35(r68): [146..147]
 a36(r67): [152..157]
 a37(r66): [154..159]
 a38(r64): [156..163]
 a39(r65): [160..161]
 a40(r63): [164..165]
 a41(r62): [173..174]
 a42(r61): [175..176]
 a43(r60): [177..178]
 a44(r59): [179..180]
 a45(r95 [0]): [183..184]
 a45(r95 [1]): [183..184]
 a46(r92): [185..190]
 a47(r93): [185..186]
 a48(r94): [187..188]
Compressing live ranges: from 193 to 76 - 39%
Ranges after the compression:
 a0(r91): [0..1]
 a1(r90): [0..3]
 a2(r107): [0..1]
 a3(r106): [2..3]
 a4(r105): [4..5]
 a5(r89): [6..7]
 a6(r88): [8..9]
 a7(r87): [10..11]
 a8(r86): [12..13]
 a9(r85): [14..15]
 a10(r84): [16..17]
 a11(r83): [18..19]
 a12(r82): [20..21]
 a13(r81): [22..23]
 a14(r80): [22..25]
 a15(r104): [22..23]
 a16(r103): [24..25]
 a17(r102): [26..27]
 a18(r79): [28..29]
 a19(r78): [30..31]
 a20(r77): [32..33]
 a21(r76): [34..35]
 a22(r75): [36..37]
 a23(r74): [36..39]
 a24(r101): [36..37]
 a25(r100): [38..39]
 a26(r99): [40..41]
 a27(r73): [42..43]
 a28(r72): [42..45]
 a29(r98): [42..43]
 a30(r97): [44..45]
 a31(r96): [46..47]
 a32(r71): [48..49]
 a33(r70): [50..51]
 a34(r69): [52..53]
 a35(r68): [54..55]
 a36(r67): [56..57]
 a37(r66): [56..57]
 a38(r64): [56..59]
 a39(r65): [58..59]
 a40(r63): [60..61]
 a41(r62): [62..63]
 a42(r61): [64..65]
 a43(r60): [66..67]
 a44(r59): [68..69]
 a45(r95 [0]): [70..71]
 a45(r95 [1]): [70..71]
 a46(r92): [72..75]
 a47(r93): [72..73]
 a48(r94): [74..75]
  regions=1, blocks=11, points=76
    allocnos=49 (big 1), copies=0, conflicts=0, ranges=50
Disposition:
   44:r59  l0     0   43:r60  l0     0   42:r61  l0     0   41:r62  l0     0
   40:r63  l0     0   38:r64  l0     2   39:r65  l0     0   37:r66  l0     1
   36:r67  l0     0   35:r68  l0     0   34:r69  l0     0   33:r70  l0     0
   32:r71  l0     0   28:r72  l0     1   27:r73  l0     0   23:r74  l0     1
   22:r75  l0     0   21:r76  l0     0   20:r77  l0     0   19:r78  l0     0
   18:r79  l0     0   14:r80  l0     1   13:r81  l0     0   12:r82  l0     0
   11:r83  l0     0   10:r84  l0     0    9:r85  l0     0    8:r86  l0     0
    7:r87  l0     0    6:r88  l0     0    5:r89  l0     0    1:r90  l0     1
    0:r91  l0     0   46:r92  l0     0   47:r93  l0     1   48:r94  l0     1
   45:r95  l0     0   31:r96  l0     0   30:r97  l0     0   29:r98  l0     2
   26:r99  l0     0   25:r100 l0     0   24:r101 l0     2   17:r102 l0     0
   16:r103 l0     0   15:r104 l0     2    4:r105 l0     0    3:r106 l0     0
    2:r107 l0     2
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 92
insn=6, live_throughout: 7, 92, dead_or_set: 94
insn=7, live_throughout: 7, 92, dead_or_set: 93, 94
insn=8, live_throughout: 7, dead_or_set: 92, 93, 95
insn=9, live_throughout: 7, dead_or_set: 95
insn=10, live_throughout: 7, dead_or_set: 59
insn=11, live_throughout: 7, dead_or_set: 59, 60
insn=12, live_throughout: 7, dead_or_set: 60, 61
insn=13, live_throughout: 7, dead_or_set: 61, 62
insn=14, live_throughout: 7, dead_or_set: 62
insn=15, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 63
insn=19, live_throughout: 7, dead_or_set: 63, 64
insn=20, live_throughout: 7, 64, dead_or_set: 65
insn=21, live_throughout: 7, 64, dead_or_set: 65, 66
insn=22, live_throughout: 7, 64, 66, dead_or_set: 67
insn=23, live_throughout: 7, 66, 67, dead_or_set: 64
insn=24, live_throughout: 7, 67, dead_or_set: 66
insn=25, live_throughout: 7, dead_or_set: 67
insn=26, live_throughout: 7, dead_or_set: 0
insn=27, live_throughout: 7, dead_or_set: 68
insn=28, live_throughout: 7, dead_or_set: 68, 69
insn=29, live_throughout: 7, dead_or_set: 69, 70
insn=30, live_throughout: 7, dead_or_set: 70, 71
insn=31, live_throughout: 7, dead_or_set: 71
insn=32, live_throughout: 7, dead_or_set: 96
insn=33, live_throughout: 7, dead_or_set: 72, 96
insn=34, live_throughout: 7, 72, dead_or_set: 97
insn=35, live_throughout: 7, 72, dead_or_set: 73, 97
insn=36, live_throughout: 7, 72, 73, dead_or_set: 98
insn=37, live_throughout: 7, 72, 73, dead_or_set: 98
insn=38, live_throughout: 7, 73, dead_or_set: 72
insn=39, live_throughout: 7, 73, dead_or_set: 
insn=40, live_throughout: 7, dead_or_set: 73
insn=41, live_throughout: 7, dead_or_set: 0
insn=114, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 
insn=46, live_throughout: 7, dead_or_set: 
insn=47, live_throughout: 7, dead_or_set: 
insn=49, live_throughout: 7, dead_or_set: 
insn=50, live_throughout: 7, dead_or_set: 99
insn=51, live_throughout: 7, dead_or_set: 74, 99
insn=52, live_throughout: 7, 74, dead_or_set: 100
insn=53, live_throughout: 7, 74, dead_or_set: 75, 100
insn=54, live_throughout: 7, 74, 75, dead_or_set: 101
insn=55, live_throughout: 7, 74, 75, dead_or_set: 101
insn=56, live_throughout: 7, 75, dead_or_set: 74
insn=57, live_throughout: 7, 75, dead_or_set: 
insn=58, live_throughout: 7, dead_or_set: 75
insn=59, live_throughout: 7, dead_or_set: 0
insn=116, live_throughout: 7, dead_or_set: 
insn=62, live_throughout: 7, dead_or_set: 
insn=64, live_throughout: 7, dead_or_set: 
insn=65, live_throughout: 7, dead_or_set: 
insn=67, live_throughout: 7, dead_or_set: 76
insn=68, live_throughout: 7, dead_or_set: 76, 77
insn=69, live_throughout: 7, dead_or_set: 77, 78
insn=70, live_throughout: 7, dead_or_set: 78, 79
insn=71, live_throughout: 7, dead_or_set: 79
insn=72, live_throughout: 7, dead_or_set: 
insn=73, live_throughout: 7, dead_or_set: 102
insn=74, live_throughout: 7, dead_or_set: 80, 102
insn=75, live_throughout: 7, 80, dead_or_set: 103
insn=76, live_throughout: 7, 80, dead_or_set: 81, 103
insn=77, live_throughout: 7, 80, 81, dead_or_set: 104
insn=78, live_throughout: 7, 80, 81, dead_or_set: 104
insn=79, live_throughout: 7, 81, dead_or_set: 80
insn=80, live_throughout: 7, 81, dead_or_set: 
insn=81, live_throughout: 7, dead_or_set: 81
insn=82, live_throughout: 7, dead_or_set: 0
insn=118, live_throughout: 7, dead_or_set: 
insn=85, live_throughout: 7, dead_or_set: 
insn=87, live_throughout: 7, dead_or_set: 
insn=88, live_throughout: 7, dead_or_set: 
insn=90, live_throughout: 7, dead_or_set: 82
insn=91, live_throughout: 7, dead_or_set: 82, 83
insn=92, live_throughout: 7, dead_or_set: 83, 84
insn=93, live_throughout: 7, dead_or_set: 84, 85
insn=94, live_throughout: 7, dead_or_set: 85
insn=95, live_throughout: 7, dead_or_set: 86
insn=96, live_throughout: 7, dead_or_set: 86, 87
insn=97, live_throughout: 7, dead_or_set: 87, 88
insn=98, live_throughout: 7, dead_or_set: 88, 89
insn=99, live_throughout: 7, dead_or_set: 89
insn=100, live_throughout: 7, dead_or_set: 105
insn=101, live_throughout: 7, dead_or_set: 90, 105
insn=102, live_throughout: 7, 90, dead_or_set: 106
insn=103, live_throughout: 7, 90, dead_or_set: 91, 106
insn=104, live_throughout: 7, 90, 91, dead_or_set: 107
insn=105, live_throughout: 7, 90, 91, dead_or_set: 107
insn=106, live_throughout: 7, 91, dead_or_set: 90
insn=107, live_throughout: 7, 91, dead_or_set: 
insn=108, live_throughout: 7, dead_or_set: 91
insn=109, live_throughout: 7, dead_or_set: 0
insn=112, live_throughout: 7, dead_or_set: 
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 23
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 24
changing reg in insn 22
changing reg in insn 25
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 38
changing reg in insn 35
changing reg in insn 40
changing reg in insn 51
changing reg in insn 56
changing reg in insn 53
changing reg in insn 58
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 69
changing reg in insn 70
changing reg in insn 70
changing reg in insn 71
changing reg in insn 74
changing reg in insn 79
changing reg in insn 76
changing reg in insn 81
changing reg in insn 90
changing reg in insn 91
changing reg in insn 91
changing reg in insn 92
changing reg in insn 92
changing reg in insn 93
changing reg in insn 93
changing reg in insn 94
changing reg in insn 95
changing reg in insn 96
changing reg in insn 96
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 98
changing reg in insn 99
changing reg in insn 101
changing reg in insn 106
changing reg in insn 103
changing reg in insn 108
changing reg in insn 5
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
changing reg in insn 50
changing reg in insn 51
changing reg in insn 52
changing reg in insn 53
changing reg in insn 54
changing reg in insn 55
changing reg in insn 73
changing reg in insn 74
changing reg in insn 75
changing reg in insn 76
changing reg in insn 77
changing reg in insn 78
changing reg in insn 100
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 104
changing reg in insn 105
deleting insn with uid = 11.
deleting insn with uid = 13.
deleting insn with uid = 28.
deleting insn with uid = 30.
deleting insn with uid = 68.
deleting insn with uid = 70.
deleting insn with uid = 91.
deleting insn with uid = 93.
deleting insn with uid = 96.
deleting insn with uid = 98.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 109.


Draw_Selected_Arrow

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={33d,27u} r1={14d,8u} r2={11d,5u} r6={1d,43u} r7={1d,34u} r8={5d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={1e} r17={19d,4u} r18={5d} r19={5d} r20={1d,1u,4e} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} 
;;    total ref usage 417{290d,122u,5e} in 82{77 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 60 61 62 92 93 94 95

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (reg/f:SI 0 ax [92])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:935 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:SI 1 dx [94])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 12 [0xc])) [0 pos+0 S4 A32])) src/gui.c:935 64 {*movsi_internal}
     (nil))

(insn 7 6 8 2 (parallel [
            (set (reg:SI 1 dx [93])
                (plus:SI (reg:SI 1 dx [94])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:935 252 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 16 argp)
                    (const_int 4 [0x4])) [0 pos+0 S4 A32])
            (const_int 16 [0x10]))
        (nil)))

(insn 8 7 9 2 (set (reg:DI 0 ax [95])
        (mem/s/j:DI (plus:SI (plus:SI (mult:SI (reg:SI 1 dx [93])
                        (const_int 8 [0x8]))
                    (reg/f:SI 0 ax [92]))
                (const_int 4 [0x4])) [0 display_1(D)->positions S8 A32])) src/gui.c:935 63 {*movdi_internal}
     (nil))

(insn 9 8 10 2 (set (mem/s/c:DI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow+0 S8 A32])
        (reg:DI 0 ax [95])) src/gui.c:935 63 {*movdi_internal}
     (nil))

(insn 10 9 12 2 (set (reg:HI 0 ax [orig:59 D.5487 ] [59])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])) src/gui.c:936 65 {*movhi_internal}
     (nil))

(insn 12 10 14 2 (parallel [
            (set (reg:HI 0 ax [orig:61 D.5489 ] [61])
                (plus:HI (reg:HI 0 ax [orig:60 D.5488 ] [60])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:936 256 {*addhi_1_lea}
     (nil))

(insn 14 12 15 2 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])
        (reg:HI 0 ax [orig:62 D.5490 ] [62])) src/gui.c:936 65 {*movhi_internal}
     (nil))

(insn 15 14 16 2 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 pos+0 S4 A32])
            (const_int 11 [0xb]))) src/gui.c:938 6 {*cmpsi_1}
     (nil))

(jump_insn 16 15 17 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) src/gui.c:938 591 {*jcc_1}
     (nil)
 -> 44)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 63 64 65 66 67 68 69 70 71 72 73 96 97 98

;; Pred edge  2 (fallthru)
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 3 (set (reg:HI 0 ax [orig:63 D.5493 ] [63])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])) src/gui.c:940 65 {*movhi_internal}
     (nil))

(insn 19 18 20 3 (set (reg:SI 2 cx [orig:64 D.5494 ] [64])
        (sign_extend:SI (reg:HI 0 ax [orig:63 D.5493 ] [63]))) src/gui.c:940 130 {extendhisi2}
     (nil))

(insn 20 19 21 3 (set (reg:HI 0 ax [orig:65 D.5495 ] [65])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])) src/gui.c:940 65 {*movhi_internal}
     (nil))

(insn 21 20 22 3 (set (reg:SI 1 dx [orig:66 D.5496 ] [66])
        (sign_extend:SI (reg:HI 0 ax [orig:65 D.5495 ] [65]))) src/gui.c:940 130 {extendhisi2}
     (nil))

(insn 22 21 23 3 (set (reg/f:SI 0 ax [orig:67 D.5497 ] [67])
        (symbol_ref/f:SI ("*.LC33") [flags 0x2]  <var_decl 0x409cd3c0 *.LC33>)) src/gui.c:940 64 {*movsi_internal}
     (nil))

(insn 23 22 24 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 2 cx [orig:64 D.5494 ] [64])) src/gui.c:940 64 {*movsi_internal}
     (nil))

(insn 24 23 25 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 1 dx [orig:66 D.5496 ] [66])) src/gui.c:940 64 {*movsi_internal}
     (nil))

(insn 25 24 26 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:67 D.5497 ] [67])) src/gui.c:940 64 {*movsi_internal}
     (nil))

(call_insn 26 25 27 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x406b1b80 printf>) [0 S1 A8])
            (const_int 12 [0xc]))) src/gui.c:940 927 {*call_value_0}
     (nil)
    (nil))

(insn 27 26 29 3 (set (reg:HI 0 ax [orig:68 D.5498 ] [68])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])) src/gui.c:941 65 {*movhi_internal}
     (nil))

(insn 29 27 31 3 (parallel [
            (set (reg:HI 0 ax [orig:70 D.5500 ] [70])
                (plus:HI (reg:HI 0 ax [orig:69 D.5499 ] [69])
                    (const_int -130 [0xffffffffffffff7e])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:941 256 {*addhi_1_lea}
     (nil))

(insn 31 29 32 3 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])
        (reg:HI 0 ax [orig:71 D.5501 ] [71])) src/gui.c:941 65 {*movhi_internal}
     (nil))

(insn 32 31 33 3 (set (reg/f:SI 0 ax [96])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 33 32 34 3 (set (reg/f:SI 1 dx [orig:72 D.5502 ] [72])
        (mem/s/f/j:SI (reg/f:SI 0 ax [96]) [0 display_1(D)->screen+0 S4 A32])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 34 33 35 3 (set (reg/f:SI 0 ax [97])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 35 34 36 3 (set (reg/f:SI 0 ax [orig:73 D.5503 ] [73])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [97])
                (const_int 104 [0x68])) [0 display_1(D)->possibility1_12+0 S4 A32])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 36 35 37 3 (parallel [
            (set (reg:SI 2 cx [98])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:942 252 {*addsi_1}
     (nil))

(insn 37 36 38 3 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [98])) src/gui.c:942 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 38 37 39 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:72 D.5502 ] [72])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 39 38 40 3 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(insn 40 39 41 3 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:73 D.5503 ] [73])) src/gui.c:942 64 {*movsi_internal}
     (nil))

(call_insn 41 40 114 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:942 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 114 41 115 3 (set (pc)
        (label_ref 112)) 606 {jump}
     (nil)
 -> 112)
;; End of basic block 3 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 [100.0%] 

(barrier 115 114 44)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  2
(code_label 44 115 45 4 190 "" [1 uses])

(note 45 44 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 4 (set (reg:CC 17 flags)
        (compare:CC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 pos+0 S4 A32])
            (const_int 23 [0x17]))) src/gui.c:944 6 {*cmpsi_1}
     (nil))

(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 62)
            (pc))) src/gui.c:944 591 {*jcc_1}
     (nil)
 -> 62)
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 74 75 99 100 101

;; Pred edge  4 (fallthru)
(note 48 47 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 49 48 50 5 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])
        (const_int 145 [0x91])) src/gui.c:946 65 {*movhi_internal}
     (nil))

(insn 50 49 51 5 (set (reg/f:SI 0 ax [99])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 51 50 52 5 (set (reg/f:SI 1 dx [orig:74 D.5507 ] [74])
        (mem/s/f/j:SI (reg/f:SI 0 ax [99]) [0 display_1(D)->screen+0 S4 A32])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 52 51 53 5 (set (reg/f:SI 0 ax [100])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 53 52 54 5 (set (reg/f:SI 0 ax [orig:75 D.5508 ] [75])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [100])
                (const_int 108 [0x6c])) [0 display_1(D)->possibility13_24+0 S4 A32])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 54 53 55 5 (parallel [
            (set (reg:SI 2 cx [101])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:947 252 {*addsi_1}
     (nil))

(insn 55 54 56 5 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [101])) src/gui.c:947 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 56 55 57 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:74 D.5507 ] [74])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 57 56 58 5 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(insn 58 57 59 5 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:75 D.5508 ] [75])) src/gui.c:947 64 {*movsi_internal}
     (nil))

(call_insn 59 58 116 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:947 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 116 59 117 5 (set (pc)
        (label_ref 112)) 606 {jump}
     (nil)
 -> 112)
;; End of basic block 5 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 [100.0%] 

(barrier 117 116 62)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  4
(code_label 62 117 63 6 192 "" [1 uses])

(note 63 62 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 pos+0 S4 A32])
            (const_int 24 [0x18]))) src/gui.c:949 6 {*cmpsi_1}
     (nil))

(jump_insn 65 64 66 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 85)
            (pc))) src/gui.c:949 591 {*jcc_1}
     (nil)
 -> 85)
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7 (fallthru)
;; Succ edge  8

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 76 77 78 79 80 81 102 103 104

;; Pred edge  6 (fallthru)
(note 66 65 67 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 69 7 (set (reg:HI 0 ax [orig:76 D.5512 ] [76])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])) src/gui.c:951 65 {*movhi_internal}
     (nil))

(insn 69 67 71 7 (parallel [
            (set (reg:HI 0 ax [orig:78 D.5514 ] [78])
                (plus:HI (reg:HI 0 ax [orig:77 D.5513 ] [77])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:951 256 {*addhi_1_lea}
     (nil))

(insn 71 69 72 7 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])
        (reg:HI 0 ax [orig:79 D.5515 ] [79])) src/gui.c:951 65 {*movhi_internal}
     (nil))

(insn 72 71 73 7 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])
        (const_int 145 [0x91])) src/gui.c:952 65 {*movhi_internal}
     (nil))

(insn 73 72 74 7 (set (reg/f:SI 0 ax [102])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 74 73 75 7 (set (reg/f:SI 1 dx [orig:80 D.5516 ] [80])
        (mem/s/f/j:SI (reg/f:SI 0 ax [102]) [0 display_1(D)->screen+0 S4 A32])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 75 74 76 7 (set (reg/f:SI 0 ax [103])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 76 75 77 7 (set (reg/f:SI 0 ax [orig:81 D.5517 ] [81])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [103])
                (const_int 112 [0x70])) [0 display_1(D)->possibility_out+0 S4 A32])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 77 76 78 7 (parallel [
            (set (reg:SI 2 cx [104])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:953 252 {*addsi_1}
     (nil))

(insn 78 77 79 7 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [104])) src/gui.c:953 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 79 78 80 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:80 D.5516 ] [80])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 80 79 81 7 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(insn 81 80 82 7 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:81 D.5517 ] [81])) src/gui.c:953 64 {*movsi_internal}
     (nil))

(call_insn 82 81 118 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:953 927 {*call_value_0}
     (nil)
    (nil))

(jump_insn 118 82 119 7 (set (pc)
        (label_ref 112)) 606 {jump}
     (nil)
 -> 112)
;; End of basic block 7 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 [100.0%] 

(barrier 119 118 85)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  6
(code_label 85 119 86 8 193 "" [1 uses])

(note 86 85 87 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 87 86 88 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int 12 [0xc])) [0 pos+0 S4 A32])
            (const_int 26 [0x1a]))) src/gui.c:955 6 {*cmpsi_1}
     (nil))

(jump_insn 88 87 89 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 112)
            (pc))) src/gui.c:955 591 {*jcc_1}
     (nil)
 -> 112)
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  9 (fallthru)
;; Succ edge  10

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 82 83 84 85 86 87 88 89 90 91 105 106 107

;; Pred edge  8 (fallthru)
(note 89 88 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 92 9 (set (reg:HI 0 ax [orig:82 D.5521 ] [82])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])) src/gui.c:957 65 {*movhi_internal}
     (nil))

(insn 92 90 94 9 (parallel [
            (set (reg:HI 0 ax [orig:84 D.5523 ] [84])
                (plus:HI (reg:HI 0 ax [orig:83 D.5522 ] [83])
                    (const_int -2 [0xfffffffffffffffe])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:957 256 {*addhi_1_lea}
     (nil))

(insn 94 92 95 9 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 posArrow.x+0 S2 A32])
        (reg:HI 0 ax [orig:85 D.5524 ] [85])) src/gui.c:957 65 {*movhi_internal}
     (nil))

(insn 95 94 97 9 (set (reg:HI 0 ax [orig:86 D.5525 ] [86])
        (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])) src/gui.c:958 65 {*movhi_internal}
     (nil))

(insn 97 95 99 9 (parallel [
            (set (reg:HI 0 ax [orig:88 D.5527 ] [88])
                (plus:HI (reg:HI 0 ax [orig:87 D.5526 ] [87])
                    (const_int -130 [0xffffffffffffff7e])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:958 256 {*addhi_1_lea}
     (nil))

(insn 99 97 100 9 (set (mem/s/j/c:HI (plus:SI (reg/f:SI 6 bp)
                (const_int -14 [0xfffffffffffffff2])) [0 posArrow.y+0 S2 A16])
        (reg:HI 0 ax [orig:89 D.5528 ] [89])) src/gui.c:958 65 {*movhi_internal}
     (nil))

(insn 100 99 101 9 (set (reg/f:SI 0 ax [105])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 101 100 102 9 (set (reg/f:SI 1 dx [orig:90 D.5529 ] [90])
        (mem/s/f/j:SI (reg/f:SI 0 ax [105]) [0 display_1(D)->screen+0 S4 A32])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 102 101 103 9 (set (reg/f:SI 0 ax [106])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 display+0 S4 A32])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 103 102 104 9 (set (reg/f:SI 0 ax [orig:91 D.5530 ] [91])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 0 ax [106])
                (const_int 112 [0x70])) [0 display_1(D)->possibility_out+0 S4 A32])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 104 103 105 9 (parallel [
            (set (reg:SI 2 cx [107])
                (plus:SI (reg/f:SI 6 bp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:959 252 {*addsi_1}
     (nil))

(insn 105 104 106 9 (set (mem/f/i:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 2 cx [107])) src/gui.c:959 64 {*movsi_internal}
     (expr_list:REG_EQUAL (plus:SI (reg/f:SI 20 frame)
            (const_int -8 [0xfffffffffffffff8]))
        (nil)))

(insn 106 105 107 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg/f:SI 1 dx [orig:90 D.5529 ] [90])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 107 106 108 9 (set (mem:SI (plus:SI (reg/f:SI 7 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (const_int 0 [0])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(insn 108 107 109 9 (set (mem:SI (reg/f:SI 7 sp) [0 S4 A32])
        (reg/f:SI 0 ax [orig:91 D.5530 ] [91])) src/gui.c:959 64 {*movsi_internal}
     (nil))

(call_insn 109 108 112 9 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("SDL_UpperBlit") [flags 0x41]  <function_decl 0x407d1500 SDL_UpperBlit>) [0 S1 A8])
            (const_int 16 [0x10]))) src/gui.c:959 927 {*call_value_0}
     (nil)
    (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)

;; Start of basic block ( 9 8 3 5 7) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  9 (fallthru)
;; Pred edge  8
;; Pred edge  3 [100.0%] 
;; Pred edge  5 [100.0%] 
;; Pred edge  7 [100.0%] 
(code_label 112 109 113 10 189 "" [4 uses])

(note 113 112 120 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 10 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 120 113 0 NOTE_INSN_DELETED)


;; Function inTab (inTab)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 10 count 9 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r65: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r65,l0) best AREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a2 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r65,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:11
  a2(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a3(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a4(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:8
  a5(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a6(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 GENERAL_REGS:0,0 MEM:7

   Insn 39(l0): point = 0
   Insn 36(l0): point = 2
   Insn 32(l0): point = 4
   Insn 29(l0): point = 7
   Insn 27(l0): point = 10
   Insn 26(l0): point = 12
   Insn 22(l0): point = 15
   Insn 44(l0): point = 18
   Insn 17(l0): point = 20
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 13(l0): point = 27
   Insn 12(l0): point = 29
   Insn 11(l0): point = 31
   Insn 10(l0): point = 33
   Insn 9(l0): point = 35
   Insn 42(l0): point = 38
   Insn 5(l0): point = 40
 a0(r65): [3..4]
 a1(r59): [18..20] [5..7]
 a2(r64): [26..27]
 a3(r63): [26..29]
 a4(r62): [30..31]
 a5(r61): [32..33]
 a6(r60): [34..35]
Compressing live ranges: from 43 to 14 - 32%
Ranges after the compression:
 a0(r65): [0..1]
 a1(r59): [4..5] [2..3]
 a2(r64): [6..7]
 a3(r63): [6..7]
 a4(r62): [8..9]
 a5(r61): [10..11]
 a6(r60): [12..13]
  regions=2, blocks=9, points=14
    allocnos=7 (big 0), copies=0, conflicts=0, ranges=8
Disposition:
    1:r59  l0     0    6:r60  l0     0    5:r61  l0     0    4:r62  l0     0
    3:r63  l0     1    2:r64  l0     0    0:r65  l0     0
+++Costs: overall -1, reg -1, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=42, live_throughout: 7, dead_or_set: 
insn=25, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 60
insn=10, live_throughout: 7, dead_or_set: 60, 61
insn=11, live_throughout: 7, dead_or_set: 61, 62
insn=12, live_throughout: 7, dead_or_set: 62, 63
insn=13, live_throughout: 7, 63, dead_or_set: 64
insn=14, live_throughout: 7, dead_or_set: 63, 64
insn=15, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 59
insn=44, live_throughout: 7, 59, dead_or_set: 
insn=20, live_throughout: 7, dead_or_set: 
insn=22, live_throughout: 7, dead_or_set: 
insn=23, live_throughout: 7, dead_or_set: 
insn=26, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 
insn=29, live_throughout: 7, dead_or_set: 59
insn=30, live_throughout: 7, 59, dead_or_set: 
insn=32, live_throughout: 7, dead_or_set: 59, 65
insn=36, live_throughout: 7, dead_or_set: 0, 65
insn=39, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 29
changing reg in insn 17
changing reg in insn 32
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 14
changing reg in insn 13
changing reg in insn 14
changing reg in insn 32
changing reg in insn 36
deleting insn with uid = 32.
deleting insn with uid = 36.
starting the processing of deferred insns
ending the processing of deferred insns


inTab

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 6[bp] 17[flags]
;;  ref usage 	r0={7d,6u} r1={2d,1u} r2={1d} r6={1d,15u} r7={1d,8u} r17={5d,2u} r20={1d,1u} 
;;    total ref usage 51{18d,33u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 42 2 (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
        (const_int 0 [0])) src/gui.c:965 64 {*movsi_internal}
     (nil))

(jump_insn 42 5 43 2 (set (pc)
        (label_ref 23)) src/gui.c:965 606 {jump}
     (nil)
 -> 23)
;; End of basic block 2 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 [100.0%] 

(barrier 43 42 25)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 60 61 62 63 64

;; Pred edge  6
(code_label 25 43 8 3 198 "" [1 uses])

(note 8 25 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 (set (reg:SI 0 ax [orig:60 i.0 ] [60])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])) src/gui.c:967 64 {*movsi_internal}
     (nil))

(insn 10 9 11 3 (parallel [
            (set (reg:SI 0 ax [orig:61 D.5479 ] [61])
                (ashift:SI (reg:SI 0 ax [orig:60 i.0 ] [60])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:967 497 {*ashlsi3_1}
     (nil))

(insn 11 10 12 3 (parallel [
            (set (reg/f:SI 0 ax [orig:62 D.5480 ] [62])
                (plus:SI (reg:SI 0 ax [orig:61 D.5479 ] [61])
                    (mem/f/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int 12 [0xc])) [0 tab+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:967 252 {*addsi_1}
     (nil))

(insn 12 11 13 3 (set (reg:SI 1 dx [orig:63 D.5481 ] [63])
        (mem:SI (reg/f:SI 0 ax [orig:62 D.5480 ] [62]) [0 *D.5480_7+0 S4 A32])) src/gui.c:967 64 {*movsi_internal}
     (nil))

(insn 13 12 14 3 (set (reg:SI 0 ax [orig:64 p.1 ] [64])
        (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                (const_int 8 [0x8])) [0 p+0 S4 A32])) src/gui.c:967 64 {*movsi_internal}
     (nil))

(insn 14 13 15 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:63 D.5481 ] [63])
            (reg:SI 0 ax [orig:64 p.1 ] [64]))) src/gui.c:967 6 {*cmpsi_1}
     (nil))

(jump_insn 15 14 16 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 20)
            (pc))) src/gui.c:967 591 {*jcc_1}
     (nil)
 -> 20)
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  3 (fallthru)
(note 16 15 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 44 4 (set (reg:SI 0 ax [orig:59 D.5485 ] [59])
        (const_int 1 [0x1])) src/gui.c:968 64 {*movsi_internal}
     (nil))

(jump_insn 44 17 45 4 (set (pc)
        (label_ref 30)) src/gui.c:968 606 {jump}
     (nil)
 -> 30)
;; End of basic block 4 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  8 [100.0%] 

(barrier 45 44 20)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  3
(code_label 20 45 21 5 196 "" [1 uses])

(note 21 20 22 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 23 5 (parallel [
            (set (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) src/gui.c:965 252 {*addsi_1}
     (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)

;; Start of basic block ( 5 2) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  5 (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 23 22 24 6 195 "" [1 uses])

(note 24 23 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 27 6 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:SI (reg/f:SI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 i+0 S4 A32])
            (const_int 27 [0x1b]))) src/gui.c:965 6 {*cmpsi_1}
     (nil))

(jump_insn 27 26 28 6 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) src/gui.c:965 591 {*jcc_1}
     (nil)
 -> 25)
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3
;; Succ edge  7 (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  6 (fallthru)
(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 30 7 (set (reg:SI 0 ax [orig:59 D.5485 ] [59])
        (const_int 0 [0])) src/gui.c:970 64 {*movsi_internal}
     (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  8 (fallthru)

;; Start of basic block ( 7 4) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 65

;; Pred edge  7 (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 30 29 31 8 197 "" [1 uses])

(note 31 30 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 39 31 46 8 (use (reg/i:SI 0 ax)) src/gui.c:971 -1
     (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 46 39 0 NOTE_INSN_DELETED)

